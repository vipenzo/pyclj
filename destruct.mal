  


(debug-eval-to-test test-fn
 ((fn ([x y] (+ x y)) ([[x y]] (recur x y))) [3 4])
 ((fn ([& v] (apply + v)) ([[x y]] (recur x y))) [3 4])
 ((fn ([& v] (apply + v)) ([[x y]] (recur x y))) [3 4 5]))

(debug-eval-to-test test-destruct
 (destruct '[] [])
 (destruct '[a b c] [1 2 3])
 (destruct '[a b c & cs] (range 10))
 (destruct '{a :a b :b c :c} {:a 1 :b 2 :c 3})
 (destruct '{a :a b :b [x y & zs] :c} {:a 1 :b 2 :c (range 10)})
 (destruct '{a :a b :b [x y & zs] :c d :d :or {:d 1000}}
           {:a 1 :b 2 :c (range 10)})
 (destruct '{a :a b :b [x y & zs] :c d :d {:keys [g h]} :e :or {:d 1000}}
           {:a 1 :b 2 :c (range 10) :e {:g 100 :h 200}}))

(debug-eval-to-test test-let
 (let [[] []] "nada")
 (let [[a b c] [1 2 3]] [a b c])
 (let [[a b c & cs] (range 10)] [a b c cs])
 (let [{a :a b :b c :c} {:a 1 :b 2 :c 3}] [a b c])
 (let [{a :a b :b [x y & zs] :c} {:a 1 :b 2 :c (range 10)}] [a b x y zs])
 (let [{a :a b :b [x y & zs] :c d :d :or {:d 1000}}
       {:a 1 :b 2 :c (range 10)}] [a b x y zs d])
 (let [{a :a b :b [x y & zs] :c d :d {:keys [g h]} :e :or {:d 1000}}
       {:a 1 :b 2 :c (range 10) :e {:g 100 :h 200}}] [a b x y zs d g h]))


(debug-eval-to-test test-let-strange
 (def list-of-things (range 10 20))

;; OK...
 (let [[a b c & cs] list-of-things] [a b c cs])

;; uhhh...
 (let [list-of-things (range 10)] (let [[a b c & cs] list-of-things] [a b c cs]))

;; oh, $@!#
 (defn uh-oh [list-of-things]
   (let [[a b c & cs] list-of-things]
     [a b c cs]))
 (uh-oh (range 10))

;; the beatings will continue until morale improves
 (let [list-of-things (range 10)]
   list-of-things))

(debug-eval-to-test test-trailing-maps
 (defn configure [val & {:keys [debug verbose] :or {:debug false, :verbose false} :as options}]
   (str "val = " val " debug = " debug " verbose = "  verbose))

 (configure 12 {:debug true})
 (configure 12 :debug true)

 (defn ma-configure ([val & {:keys [debug verbose] :or {:debug false, :verbose false} :as options}]
                     (str "val = " val " debug = " debug " verbose = "  verbose))
                    ([] (ma-configure 17 :verbose true)))
 (ma-configure)
(ma-configure 21)
(ma-configure 21 :debug true)
 (ma-configure 21 {:verbose true})
)
 



(debug-eval-to-test test-merge
 (merge {:a 1 :b 2 :c 3} {:b 10 :d 20} {:a 11 :x 87})
 )


                                             

(debug-eval-to-test test-compact-key-val-trailing-pairs
 (compact-key-val-trailing-pairs '[])
 (compact-key-val-trailing-pairs '[:a 1])
 (compact-key-val-trailing-pairs '[23 :a 1])
 (compact-key-val-trailing-pairs '[23 {:A 3 :B 27} 41 {:b 33 :c 44} :a 1]))