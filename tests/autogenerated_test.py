
###########################################################
### Do not edit: generated by tests/refresh_clj_tests.py ##
###########################################################

import unittest
from mal.boot import BOOT
RE, REP, REPL = BOOT()

REP("(set-pythonize-test-results true)")


class reader_tests(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        REP('(load-file "./tests/reader_tests.clj")')

    @classmethod
    def tearDownClass(cls):
        print("End.")

    
    def test_read_integer(self):
        self.assertEqual(RE("(run-test read-integer)")["global-result"], True)  


    def test_read_floating(self):
        self.assertEqual(RE("(run-test read-floating)")["global-result"], True)  


    def test_read_ratio(self):
        self.assertEqual(RE("(run-test read-ratio)")["global-result"], True)  


    def test_read_symbol(self):
        self.assertEqual(RE("(run-test read-symbol)")["global-result"], True)  


    def test_read_specials(self):
        self.assertEqual(RE("(run-test read-specials)")["global-result"], True)  


    def test_read_char(self):
        self.assertEqual(RE("(run-test read-char)")["global-result"], True)  



class destructuring_tests(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        REP('(load-file "./tests/destructuring_tests.clj")')

    @classmethod
    def tearDownClass(cls):
        print("End.")

    
    def test_test_destructuring(self):
        self.assertEqual(RE("(run-test test-destructuring)")["global-result"], True)  


    def test_test_get_paths(self):
        self.assertEqual(RE("(run-test test-get-paths)")["global-result"], True)  


    def test_tests_let(self):
        self.assertEqual(RE("(run-test tests-let)")["global-result"], True)  


    def test_test_fn(self):
        self.assertEqual(RE("(run-test test-fn)")["global-result"], True)  


    def test_test_destruct(self):
        self.assertEqual(RE("(run-test test-destruct)")["global-result"], True)  


    def test_test_let_2(self):
        self.assertEqual(RE("(run-test test-let-2)")["global-result"], True)  


    def test_test_let_strange(self):
        self.assertEqual(RE("(run-test test-let-strange)")["global-result"], True)  


    def test_test_trailing_maps(self):
        self.assertEqual(RE("(run-test test-trailing-maps)")["global-result"], True)  


    def test_test_merge(self):
        self.assertEqual(RE("(run-test test-merge)")["global-result"], True)  


    def test_test_compact_key_val_trailing_pairs(self):
        self.assertEqual(RE("(run-test test-compact-key-val-trailing-pairs)")["global-result"], True)  


