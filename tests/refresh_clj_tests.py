import os
import re

def find_clj_files():
    clj_files = []
    for root, dirs, files in os.walk("./tests"):
        for file in files:
            if file.endswith("_tests.clj"):
                clj_files.append(os.path.join(root, file))
    return clj_files

def find_deftest_occurrences(file_path):
    with open(file_path, 'r') as f:
        contents = f.read()
    pattern = r'\(deftest\s+(\S+)'
    return re.findall(pattern, contents)

def make_tests():
    clj_files = find_clj_files()
    tests = []
    for file_path in clj_files:
        deftest_occurrences = find_deftest_occurrences(file_path)
        tests.append([file_path, deftest_occurrences])
    return tests

def make_test(testname):
    test_template = """
    def <<<PYTESTNAME>>>(self):
        self.assertEqual(RE("(run-test <<<TESTNAME>>>)")["global-result"], True)  
"""
    return test_template.replace("<<<TESTNAME>>>", testname).replace("<<<PYTESTNAME>>>", "test_" + testname.replace("-", "_"))


def make_test_class(test_file_path, tests):
    test_class_template = """
class <<<TESTCLASSNAME>>>(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        REP('(load-file "<<<TESTFILEPATH>>>")')

    @classmethod
    def tearDownClass(cls):
        print("End.")

    <<<TESTS>>>
"""
    return test_class_template.replace("<<<TESTFILEPATH>>>", test_file_path).replace("<<<TESTCLASSNAME>>>", get_test_name(test_file_path)).replace("<<<TESTS>>>", tests)

def make_test_file(test_classes):
    test_file_template = """
###########################################################
### Do not edit: generated by tests/refresh_clj_tests.py ##
###########################################################

import unittest
from mal.boot import BOOT
RE, REP, REPL = BOOT()

REP("(set-pythonize-test-results true)")

<<<TEST_CLASSES>>>
"""
    return test_file_template.replace("<<<TEST_CLASSES>>>", test_classes)

def get_test_name(file_path):
    file_name = os.path.basename(file_path)
    test_name = os.path.splitext(file_name)[0]
    return test_name

def generate_tests():
    tests = make_tests()
    test_classes = []
    for test in tests:
        test_class = []
        for testname in test[1]:
            test_class.append(make_test(testname))
        test_classes.append(make_test_class(test[0], "\n".join(test_class)))
    output =  make_test_file("\n".join(test_classes))
    file_path = "./tests/autogenerated_test.py"
    with open(file_path, 'w') as f:
        f.write(output)
        


generate_tests()