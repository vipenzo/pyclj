{
    "my_trampoline_test" : "(defn triple [x]\r\n  (fn []\r\n    (sub-two (* 3 x))))\r\n\r\n(defn sub-two [x]\r\n  (fn []\r\n    (stop? (- x 2))))\r\n\r\n(defn stop? [x]\r\n  (if (> x 50) x\r\n    (fn []\r\n      (triple x))))\r\n\r\n(defn my-even? [x]\r\n  (if (zero? x) true\r\n    (fn []\r\n       (my-odd? (dec x)))))\r\n\r\n(defn my-odd? [x]\r\n  (if (zero? x) false\r\n    (fn []\r\n      (my-even? (dec x)))))\r\n\r\n(deftest test-78\r\n  (is (= (my-trampoline triple 2) 82))\r\n  (is (= (map (partial my-trampoline my-even?) (range 6))\r\n         [true false true false true false])))",
    "double_test" : "(deftest double-test\r\n  (is (= (f 2) 4))\r\n  (is (= (f 3) 6))\r\n  (is (= (f 11) 22))\r\n  (is (= (f 7) 14)))",
    "tree_test" : "(deftest test-95\r\n  (is (= (tree? '(:a (:b nil nil) nil))\r\n         true))\r\n  (is (= (tree? '(:a (:b nil nil)))\r\n         false))\r\n  (is (= (tree? [1 nil [2 [3 nil nil] [4 nil nil]]])\r\n         true))\r\n  (is (= (tree? [1 [2 nil nil] [3 nil nil] [4 nil nil]])\r\n         false))\r\n  (is (= (tree? [1 [2 [3 [4 nil nil] nil] nil] nil])\r\n         true))\r\n  (is (= (tree? [1 [2 [3 [4 false nil] nil] nil] nil])\r\n         false))\r\n  (is (= (tree? '(:a nil ()))\r\n         false))\r\n  (is (= (tree? '(:a nil ()))\r\n         false)))",
    "factorial_test" : "(deftest test-42\r\n  (is (= (factorial 1) 1))\r\n  (is (= (factorial 3) 6))\r\n  (is (= (factorial 5) 120))\r\n  (is (= (factorial 8) 40320)))",
    "find_path_test" : "(deftest test-106\r\n  (is (= 1 (find-path 1 1)))\r\n  (is (= 3 (find-path 3 12)))\r\n  (is (= 3 (find-path 12 3)))\r\n  (is (= 3 (find-path 5 9)))\r\n  #_(is (= 9 (find-path 9 2)))\r\n  (is (= 5 (find-path 9 12))))",
    "truth_test" : "(deftest equality-test\r\n  (is (true? truth)))",
    "myjuxt_test" : "(deftest test-59\r\n  (is (= [21 6 1] ((myjuxt + max min) 2 3 5 1 6 4)))\r\n  (is (= [\"HELLO\" 5] ((myjuxt #(upper-case %) count) \"hello\")))\r\n  (is (= [2 6 4]  ((myjuxt #(get % :a) #(get % :c) #(get % :b))  {:a 2, :b 4, :c 6, :d 8 :e 10})))) ",
    "my_group_by_test" : "(deftest test-63\r\n  (is (= (my-group-by #(> % 5) #{1 3 6 8}) {false [1 3], true [6 8]}))\r\n  (is (= (my-group-by #(apply / %) [[1 2] [2 4] [4 6] [3 6]]) {1/2 [[1 2] [2 4] [3 6]], 2/3 [[4 6]]}))\r\n  (is (= (my-group-by count [[1] [1 2] [3] [1 2 3] [2 3]]) {1 [[1] [3]], 2 [[1 2] [2 3]], 3 [[1 2 3]]})))",
    "lt_test" : "(deftest test-127\r\n  (is (= 10 (lt [15 15 15 15 15])))\r\n  #_(is (= 15 (lt [1 3 7 15 31])))\r\n  #_(is (= 3 (lt [3 3])))\r\n  #_(is (= 4 (lt [7 3])))\r\n  #_(is (= 6 (lt [17 22 6 14 22])))\r\n  #_(is (= 9 (lt [18 7 14 14 6 3])))\r\n  #_(is (= nil (lt [21 10 21 10])))\r\n  #_(is (= nil (lt [0 31 0 31 0]))))\r\n",
    "maps_test" : "(deftest maps-test\r\n  (is (= n (get (hash-map :a 10, :b 20, :c 30) :b)))\r\n  (is (= n (:b {:a 10, :b 20, :c 30}))))",
    "deinterleave_test" : "(deftest test-43\r\n  (is (= (deinterleave [1 2 3 4 5 6] 2) '((1 3 5) (2 4 6))))\r\n  (is (= (deinterleave (range 9) 3) '((0 3 6) (1 4 7) (2 5 8))))\r\n  (is (= (deinterleave (range 10) 5) '((0 5) (1 6) (2 7) (3 8) (4 9)))))",
    "conway_test" : "(deftest test-94\r\n  (is (= (conway [\"      \"\r\n                  \" ##   \"\r\n                  \" ##   \"\r\n                  \"   ## \"\r\n                  \"   ## \"\r\n                  \"      \"])\r\n         [\"      \"\r\n          \" ##   \"\r\n          \" #    \"\r\n          \"    # \"\r\n          \"   ## \"\r\n          \"      \"]))\r\n  (is (= (conway [\"     \"\r\n                  \"     \"\r\n                  \" ### \"\r\n                  \"     \"\r\n                  \"     \"]))\r\n      [\"     \"\r\n       \"  #  \"\r\n       \"  #  \"\r\n       \"  #  \"\r\n       \"     \"])\r\n  (is (= (conway [\"      \"\r\n                  \"      \"\r\n                  \"  ### \"\r\n                  \" ###  \"\r\n                  \"      \"\r\n                  \"      \"])\r\n         [\"      \"\r\n          \"   #  \"\r\n          \" #  # \"\r\n          \" #  # \"\r\n          \"  #   \"\r\n          \"      \"])))",
    "hack_test" : "(deftest test-49\r\n  (is (= (hack 3 [1 2 3 4 5 6]) [[1 2 3] [4 5 6]]))\r\n  (is (= (hack 1 [:a :b :c :d]) [[:a] [:b :c :d]]))\r\n  (is (= (hack 2 [[1 2] [3 4] [5 6]]) [[[1 2] [3 4]] [[5 6]]])))",
    "myrange_test" : "(deftest test-34\r\n  (is (= (myrange 1 4) '(1 2 3)))\r\n  (is (= (myrange -2 2) '(-2 -1 0 1)))\r\n  (is (= (myrange 5 8) '(5 6 7))))",
    "drop_every_nth_test" : "(deftest test-41\r\n  (is (= (drop-every-nth [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8]))\r\n  (is (= (drop-every-nth [:a :b :c :d :e :f] 2) [:a :c :e]))\r\n  (is (= (drop-every-nth [1 2 3 4 5 6] 4) [1 2 3 5 6])))",
    "myreductions_test" : "(deftest test-60\r\n  (is (= (reductions + 0 (range 1 5)) [0 1 3 6 10]))\r\n  (is (= (my-reductions conj [1] [2 3 4]) [[1] [1 2] [1 2 3] [1 2 3 4]]))\r\n  (is (= (last (my-reductions * 2 [3 4 5])) (reduce * 2 [3 4 5]) 120)))",
    "ttt_test" : "(deftest test-73\r\n  (is (= nil (ttt [[:e :e :e] [:e :e :e] [:e :e :e]])))\r\n  (is (= :x (ttt [[:x :e :o] [:x :e :e] [:x :e :o]])))\r\n  (is (= :o (ttt [[:e :x :e] [:o :o :o] [:x :e :x]])))\r\n  (is (= nil (ttt [[:x :e :o] [:x :x :e] [:o :x :o]])))\r\n  (is (= :x (ttt [[:x :e :e] [:o :x :e] [:o :e :x]])))\r\n  (is (= :o (ttt [[:x :e :o] [:x :o :e] [:o :e :x]])))\r\n  (is (= nil (ttt [[:x :o :x] [:x :o :x] [:o :x :o]]))))",
    "pack_test" : "(deftest test-31\r\n  (is (= (pack [1 1 2 1 1 1 3 3]) '((1 1) (2) (1 1 1) (3 3))))\r\n  (is (= (pack [:a :a :b :b :c]) '((:a :a) (:b :b) (:c))))\r\n  (is (= (pack [[1 2] [1 2] [3 4]]) '(([1 2] [1 2]) ([3 4])))))",
    "bal_num_test" : "(deftest test-115\r\n  (is (= true (bal-num 11)))\r\n  (is (= true (bal-num 121)))\r\n  (is (= false (bal-num 123)))\r\n  (is (= true (bal-num 0)))\r\n  (is (= false (bal-num 88099)))\r\n  (is (= true (bal-num 89098)))\r\n  (is (= true (bal-num 89089)))\r\n  (is (= (take 20 (filter bal-num (range 110)))\r\n         [0 1 2 3 4 5 6 7 8 9 11 22 33 44 55 66 77 88 99 101])))",
    "digits_test" : "(deftest test-99\r\n  (is (= (digits 1 1) [1]))\r\n  (is (= (digits 99 9) [8 9 1]))\r\n  (is (= (digits 999 99) [9 8 9 0 1])))",
    "lev_test" : "(deftest test-101\r\n  (is (= (lev \"kitten\" \"sitting\") 3))\r\n  (is (= (lev \"closure\" \"clojure\") (lev \"clojure\" \"closure\") 1))\r\n  (is (= (lev \"xyx\" \"xyyyx\") 2))\r\n  (is (= (lev \"\" \"123456\") 6))\r\n  (is (= (lev \"Clojure\" \"Clojure\") (lev \"\" \"\") (lev [] []) 0))\r\n  (is (= (lev [1 2 3 4] [0 2 3 4 5]) 2))\r\n  (is (= (lev '(:a :b :c :d) '(:a :d)) 2))\r\n  (is (= (lev \"ttttattttctg\" \"tcaaccctaccat\") 10))\r\n  (is (= (lev \"gaattctaatctc\" \"caaacaaaaaattt\") 9)))",
    "vectors_test" : "(deftest vectors-test\r\n  (is (= v (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))))",
    "totient_test" : "(deftest test-75\r\n  (is (= (totient 1) 1))\r\n  (is (= (totient 10) (count '(1 3 7 9)) 4))\r\n  (is (= (totient 40) 16))\r\n  (is (= (totient 99) 60)))",
    "primes_test" : "(deftest test-67\r\n  (is (= (primes 2) [2 3]))\r\n  (is (= (primes 5) [2 3 5 7 11]))\r\n  (is (= (last (primes 100)) 541)))",
    "tri_path_test" : "(deftest test-79\r\n  (is (= (tri-path [[1] [2 4] [5 1 4] [2 3 4 5]]) (+ 1 2 1 3) 7))\r\n  (is (= (tri-path [[3] [2 4] [1 9 3] [9 9 2 4] [4 6 6 7 8] [5 7 3 5 1 4]]) (+ 3 4 3 2 7 1) 20)))",
    "getcaps_test" : "(deftest test-29\r\n  (is (= (getcaps \"HeLlO, WoRlD!\") \"HLOWRD\"))\r\n  (is (empty? (getcaps \"nothing\")))\r\n  (is (= (getcaps \"$#A(*&987Zf\") \"AZ\")))",
    "reverse_seq_test" : "(deftest test-23\r\n  (is (= (reverse-seq [1 2 3 4 5]) [5 4 3 2 1]))\r\n  (is (= (reverse-seq (sort (set [5 7 2 7]))) '(7 5 2)))\r\n  (is (= (reverse-seq [[1 2] [3 4] [5 6]]) [[5 6] [3 4] [1 2]])))",
    "uce_test" : "(deftest test-121\r\n  (is (= 2 ((uce '(/ a b))\r\n            '{b 8 a 16})))\r\n  (is (= 8 ((uce '(+ a b 2))\r\n            '{a 2 b 4})))\r\n  (is (= [6 0 -4]\r\n         (map (uce '(* (+ 2 a)\r\n                       (- 10 b)))\r\n              '[{a 1 b 8}\r\n                {b 5 a -2}\r\n                {a 2 b 11}])))\r\n  (is (= 1 ((uce '(/ (+ x 2)\r\n                     (* 3 (+ y 1))))\r\n            '{x 4 y 1}))))",
    "conj_list_test" : "(deftest conj-list-test\r\n  (is (= l (conj '(2 3 4) 1)))\r\n  (is (= l (conj '(3 4) 2 1))))",
    "set_sect_test" : "(deftest test-81\r\n  (is (= (set-sect #{0 1 2 3} #{2 3 4 5}) #{2 3}))\r\n  (is (= (set-sect #{0 1 2} #{3 4 5}) #{}))\r\n  (is (= (set-sect #{:a :b :c :d} #{:c :e :a :f :d}) #{:a :c :d})))",
    "perfect_nums_test" : "(deftest test-80\r\n  (is (= (perfect-nums 6) true))\r\n  (is (= (perfect-nums 7) false))\r\n  (is (= (perfect-nums 496) true))\r\n  (is (= (perfect-nums 500) false))\r\n  (is (= (perfect-nums 8128) true)))",
    "gtw_test" : "(deftest test-114\r\n  (is (= [2 3 5 7 11 13]\r\n         (gtw 4 #(= 2 (mod % 3))\r\n              [2 3 5 7 11 13 17 19 23])))\r\n  (is (= [\"this\" \"is\" \"a\" \"sentence\"]\r\n         (gtw 3 #(some #{\\i} %)\r\n              [\"this\" \"is\" \"a\" \"sentence\" \"i\" \"wrote\"])))\r\n  (is (= [\"this\" \"is\"]\r\n         (gtw 1 #{\"a\"}\r\n              [\"this\" \"is\" \"a\" \"sentence\" \"i\" \"wrote\"]))))",
    "filter_test" : "(deftest filter-test\r\n  (is (= l (filter #(> % 5) '(3 4 5 6 7)))))",
    "my_interleave_test" : "(deftest test-39\r\n  (is (= (my-interleave [1 2 3] [:a :b :c]) '(1 :a 2 :b 3 :c)))\r\n  (is (= (my-interleave [1 2] [3 4 5 6]) '(1 3 2 4)))\r\n  (is (= (my-interleave [1 2 3 4] [5]) [1 5]))\r\n  (is (= (my-interleave [30 20] [25 15]) [30 25 20 15])))",
    "ps_test" : "(deftest test-116\r\n  (is (= false (ps 4)))\r\n  (is (= true (ps 563)))\r\n  (is (= 53 (nth (filter ps (range 1 100)) 1))))",
    "powerset_test" : "(deftest test-85\r\n  (is (= (powerset #{1 :a}) #{#{1 :a} #{:a} #{} #{1}}))\r\n  (is (= (powerset #{}) #{#{}}))\r\n  (is (= (powerset #{1 2 3}) #{#{} #{1} #{2} #{3} #{1 2} #{1 3} #{2 3} #{1 2 3}}))\r\n  (is (= (count (powerset (into #{} (range 10)))) 1024)))",
    "closure_test" : "(deftest test-107\r\n  (is (= 256 ((closure 2) 16), ((closure 8) 2)))\r\n  (is (= [1 8 27 64] (map (closure 3) [1 2 3 4])))\r\n  (is (= [1 2 4 8 16] (map #((closure %) 2) [0 1 2 3 4]))))",
    "quine_test" : "(deftest test-125\r\n  (is (= (str '(fn [x] (str x x))\r\n              '(fn [x] (str x x)))\r\n         ((fn [x] (str x x))\r\n          '(fn [x] (str x x))))))",
    "pascal_test" : "(deftest test-97\r\n  (is (= (pascal 1) [1]))\r\n  (is (= (map pascal (range 1 6))\r\n         [[1]\r\n          [1 1]\r\n          [1 2 1]\r\n          [1 3 3 1]\r\n          [1 4 6 4 1]]))\r\n  (is (= (pascal 11)\r\n         [1 10 45 120 210 252 210 120 45 10 1])))",
    "conj_set_test" : "(deftest conj-set-test\r\n  (is (= #{1 2 3 4} (conj #{1 4 3} n))))",
    "anagram_test" : "(deftest test-77\r\n  (is (= (anagram [\"meat\" \"mat\" \"team\" \"mate\" \"eat\"]) #{#{\"meat\" \"team\" \"mate\"}}))\r\n  (is (= (anagram [\"veer\" \"lake\" \"item\" \"kale\" \"mite\" \"ever\"]) #{#{\"veer\" \"ever\"} #{\"lake\" \"kale\"} #{\"mite\" \"item\"}})))",
    "trans_closure_test" : "(deftest test-84\r\n  (is (let [divides #{[8 4] [9 3] [4 2] [27 9]}]\r\n        (= (trans-closure divides) #{[4 2] [8 4] [8 2] [9 3] [27 9] [27 3]})))\r\n  (is (let [more-legs\r\n            #{[\"cat\" \"man\"] [\"man\" \"snake\"] [\"spider\" \"cat\"]}]\r\n        (= (trans-closure more-legs)\r\n           #{[\"cat\" \"man\"] [\"cat\" \"snake\"] [\"man\" \"snake\"]\r\n             [\"spider\" \"cat\"] [\"spider\" \"man\"] [\"spider\" \"snake\"]})))\r\n  (is (let [progeny\r\n            #{[\"father\" \"son\"] [\"uncle\" \"cousin\"] [\"son\" \"grandson\"]}]\r\n        (= (trans-closure progeny)\r\n           #{[\"father\" \"son\"] [\"father\" \"grandson\"]\r\n             [\"uncle\" \"cousin\"] [\"son\" \"grandson\"]}))))",
    "ttt2_test" : "(deftest test-119\r\n  (is (= (ttt :x [[:o :e :e]\r\n                  [:o :x :o]\r\n                  [:x :x :e]])\r\n         #{[2 2] [0 1] [0 2]}))\r\n  (is (= (ttt :x [[:x :o :o]\r\n                  [:x :x :e]\r\n                  [:e :o :e]])\r\n         #{[2 2] [1 2] [2 0]}))\r\n  (is (= (ttt :x [[:x :e :x]\r\n                  [:o :x :o]\r\n                  [:e :o :e]])\r\n         #{[2 2] [0 1] [2 0]}))\r\n  (is (= (ttt :x [[:x :x :o]\r\n                  [:e :e :e]\r\n                  [:e :e :e]])\r\n         #{}))\r\n  (is (= (ttt :o [[:x :x :o]\r\n                  [:o :e :o]\r\n                  [:x :e :e]])\r\n         #{[2 2] [1 1]})))",
    "map_test" : "(deftest map-test\r\n  (is (= l (map #(+ % 5) '(1 2 3)))))",
    "f_test" : "(deftest test-117\r\n  (is (= true  (f [\"M   C\"])))\r\n  (is (= false (f [\"M # C\"])))\r\n  (is (= true  (f [\"#######\"\r\n                   \"#     #\"\r\n                   \"#  #  #\"\r\n                   \"#M # C#\"\r\n                   \"#######\"])))\r\n  (is (= false (f [\"########\"\r\n                   \"#M  #  #\"\r\n                   \"#   #  #\"\r\n                   \"# # #  #\"\r\n                   \"#   #  #\"\r\n                   \"#  #   #\"\r\n                   \"#  # # #\"\r\n                   \"#  #   #\"\r\n                   \"#  #  C#\"\r\n                   \"########\"])))\r\n  (is (= false (f [\"M     \"\r\n                   \"      \"\r\n                   \"      \"\r\n                   \"      \"\r\n                   \"    ##\"\r\n                   \"    #C\"])))\r\n  (is (= true  (f [\"C######\"\r\n                   \" #     \"\r\n                   \" #   # \"\r\n                   \" #   #M\"\r\n                   \"     # \"])))\r\n  (is (= true  (f [\"C# # # #\"\r\n                   \"        \"\r\n                   \"# # # # \"\r\n                   \"        \"\r\n                   \" # # # #\"\r\n                   \"        \"\r\n                   \"# # # #M\"]))))",
    "fib_test" : "(deftest test-26\r\n  (is (= (fib 3) '(1 1 2)))\r\n  (is (= (fib 6) '(1 1 2 3 5 8)))\r\n  (is (= (fib 8) '(1 1 2 3 5 8 13 21))))",
    "intervals_test" : "(deftest test-171\r\n  (is (= (intervals [1 2 3]) [[1 3]]))\r\n  (is (= (intervals [10 9 8 1 2 3]) [[1 3] [8 10]]))\r\n  (is (= (intervals [1 1 1 1 1 1 1]) [[1 1]]))\r\n  (is (= (intervals []) []))\r\n  (is (= (intervals [19 4 17 1 3 10 2 13 13 2 16 4 2 15 13 9 6 14 2 11])\r\n         [[1 4] [6 6] [9 11] [13 17] [19 19]])))",
    "conj_map_test" : "(deftest conj-map-test\r\n  (is (= {:a 1, :b 2, :c 3} (conj {:a 1} kv [:c 3]))))",
    "functions_test" : "(deftest functions-test\r\n  (is (= n ((fn [x] (+ x 5)) 3)))\r\n  (is (= n ((fn [x] (+ x 5)) 3)))\r\n  (is (= n (#(+ % 5) 3)))\r\n  (is (= n ((partial + 5) 3))))",
    "db_test" : "(deftest test-137\r\n  (is (= [1 2 3 4 5 0 1] (digits 1234501 10)))\r\n  (is (= [0] (digits 0 11)))\r\n  (is (= [1 0 0 1] (digits 9 2)))\r\n  (is (= [1 0] (let [n (rand-int 100000)] (digits n n))))\r\n  (is (= [22 6 10 5 0 19 6 9 6 32] (digits 9007199254740992 42))))",
    "compress_test" : "(deftest test-30\r\n  (is (= (apply str (compress \"Leeeeeerrroyyy\")) \"Leroy\"))\r\n  (is (= (compress [1 1 2 3 3 2 2 3]) '(1 2 3 2 3)))\r\n  (is (= (compress [[1 2] [1 2] [3 4] [1 2]]) '([1 2] [3 4] [1 2]))))",
    "lcm_test" : "(deftest test-100\r\n  (is (= (lcm 2 3) 6))\r\n  (is (= (lcm 5 3 7) 105))\r\n  #_(is (= (lcm 1/3 2/5) 2))\r\n  #_(is (= (lcm 3/4 1/6) 3/2))\r\n  #_(is (== (__ 7 5/7 2 3/5) 210)))",
    "penultimate_test" : "(deftest test-20\r\n  (is (= (penultimate (list 1 2 3 4 5)) 4))\r\n  (is (= (penultimate [\"a\" \"b\" \"c\"]) \"b\"))\r\n  (is (= (penultimate [[1 2] [3 4]]) [1 2])))",
    "classes_test" : "(deftest test-98\r\n  (is (= (classes #(* % %) #{-2 -1 0 1 2})\r\n         #{#{0} #{1 -1} #{2 -2}}))\r\n  (is (= (classes #(rem % 3) #{0 1 2 3 4 5})\r\n         #{#{0 3} #{1 4} #{2 5}}))\r\n  (is (= (classes identity #{0 1 2 3 4})\r\n         #{#{0} #{1} #{2} #{3} #{4}}))\r\n  (is (= (classes (constantly true) #{0 1 2 3 4})\r\n         #{#{0 1 2 3 4}})))",
    "maths_test" : "(deftest maths-test\r\n  (is (true? expr)))",
    "happy_test" : "(deftest test-86\r\n  (is (= (happy 7) true))\r\n  (is (= (happy 986543210) true))\r\n  (is (= (happy 2) false))\r\n  (is (= (happy 3) false)))",
    "makeflat_test" : "(deftest test-28\r\n  (is (= (makeflat '((1 2) 3 [4 [5 6]])) '(1 2 3 4 5 6)))\r\n  (is (= (makeflat [\"a\" [\"b\"] \"c\"]) '(\"a\" \"b\" \"c\")))\r\n  (is (= (makeflat '((((:a))))) '(:a))))",
    "word_sort_test" : "(deftest test-70\r\n  (is (= (word-sort  \"Have a nice day.\")\r\n         [\"a\" \"day\" \"Have\" \"nice\"]))\r\n  (is (= (word-sort  \"Clojure is a fun language!\")\r\n         [\"a\" \"Clojure\" \"fun\" \"is\" \"language\"]))\r\n  (is (= (word-sort  \"Fools fall for foolish follies.\")\r\n         [\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"])))",
    "sym_diff_test" : "(deftest test-88\r\n  (is (= (sym-diff #{1 2 3 4 5 6} #{1 3 5 7}) #{2 4 6 7}))\r\n  (is (= (sym-diff #{:a :b :c} #{}) #{:a :b :c}))\r\n  (is (= (sym-diff #{} #{4 5 6}) #{4 5 6}))\r\n  (is (= (sym-diff #{[1 2] [2 3]} #{[2 3] [3 4]}) #{[1 2] [3 4]})))",
    "count_elements_test" : "(deftest test-22\r\n  (is (= (count-elements '(1 2 3 3 1)) 5))\r\n  (is (= (count-elements \"Hello World\") 11))\r\n  (is (= (count-elements [[1 2] [3 4] [5 6]]) 3))\r\n  (is (= (count-elements '(13)) 1))\r\n  (is (= (count-elements '(:a :b :c)) 3)))",
    "conj_vector_test" : "(deftest conj-vectors-test\r\n  (is (= v (conj [1 2 3] 4)))\r\n  (is (= v (conj [1 2] 3 4))))",
    "roman_test" : "(deftest test-104\r\n  (is (= \"I\" (roman 1)))\r\n  (is (= \"I\" (roman 1)))\r\n  (is (= \"XXX\" (roman 30)))\r\n  (is (= \"IV\" (roman 4)))\r\n  (is (= \"CXL\" (roman 140)))\r\n  (is (= \"DCCCXXVII\" (roman 827)))\r\n  (is (= \"MMMCMXCIX\" (roman 3999)))\r\n  (is (= \"XLVIII\" (roman 48))))",
    "camel_test" : "(deftest test-102\r\n  (is (= (camel \"something\") \"something\"))\r\n  (is (= (camel \"multi-word-key\") \"multiWordKey\"))\r\n  (is (= (camel \"leaveMeAlone\") \"leaveMeAlone\")))",
    "strings_test" : "(deftest strings-test\r\n  (is (= \"HELLO\" s)))",
    "rn_test" : "(deftest test-92\r\n  (is (= 14 (rn \"XIV\")))\r\n  (is (= 827 (rn \"DCCCXXVII\")))\r\n  (is (= 3999 (rn \"MMMCMXCIX\")))\r\n  (is (= 48 (rn \"XLVIII\"))))",
    "cards_test" : "(deftest test-128\r\n  (is (= {:suit :diamond :rank 10} (cards \"DQ\")))\r\n  (is (= {:suit :heart :rank 3} (cards \"H5\")))\r\n  (is (= {:suit :club :rank 12} (cards \"CA\")))\r\n  (is (= (range 13) (map (comp :rank cards str)\r\n                         '[S2 S3 S4 S5 S6 S7\r\n                           S8 S9 ST SJ SQ SK SA]))))",
    "half_truth_test" : "(deftest test-83\r\n  (is (= false (half-truth false false)))\r\n  (is (= true (half-truth true false)))\r\n  (is (= false (half-truth true)))\r\n  (is (= true (half-truth false true false)))\r\n  (is (= false (half-truth true true true)))\r\n  (is (= true (half-truth true true true false))))",
    "perfect_square_test" : "(deftest test-74\r\n  (is (= (perfect-square \"4,5,6,7,8,9\") \"4,9\"))\r\n  (is (= (perfect-square \"15,16,25,36,37\") \"16,25,36\")))",
    "pf_test" : "(deftest test-93\r\n  (is (= (pf [[\"Do\"] [\"Nothing\"]])\r\n         [[\"Do\"] [\"Nothing\"]]))\r\n  (is (= (pf [[[[:a :b]]] [[:c :d]] [:e :f]])\r\n         [[:a :b] [:c :d] [:e :f]]))\r\n  (is (= (pf '((1 2) ((3 4) ((((5 6)))))))\r\n         '((1 2) (3 4) (5 6)))))",
    "nth_element_test" : "(deftest test-21\r\n  (is (= (nth-element '(4 5 6 7) 2) 6))\r\n  (is (= (nth-element [:a :b :c] 0) :a))\r\n  (is (= (nth-element [1 2 3 4] 1) 2))\r\n  (is (= (nth-element '([1 2] [3 4] [5 6]) 2) [5 6])))",
    "mycomp_test" : "(deftest test-58\r\n  (is (= [3 2 1] ((mycomp rest reverse) [1 2 3 4])))\r\n  (is (= 5 ((mycomp (partial + 3) second) [1 2 3 4])))\r\n  (is (= true ((mycomp zero? #(mod % 8) +) 3 5 7 9)))\r\n  (is (= \"HELLO\" ((mycomp #(.toUpperCase %) #(apply str %) take) 5 \"hello world\"))))",
    "longest_subseq_test" : "(deftest test-53\r\n  (is (= (longest-subseq [1 0 1 2 3 0 4 5]) [0 1 2 3]))\r\n  (is (= (longest-subseq [5 6 1 3 2 7]) [5 6]))\r\n  (is (= (longest-subseq [2 3 3 4 5]) [3 4 5]))\r\n  (is (= (longest-subseq [7 6 5 4]) [])))",
    "flipper_test" : "(deftest test-46\r\n  (is (= 3 ((flipper nth) 2 [1 2 3 4 5])))\r\n  (is (= true ((flipper >) 7 8)))\r\n  (is (= 4 ((flipper quot) 2 8)))\r\n  (is (= [1 2 3] ((flipper take) [1 2 3 4 5] 3))))",
    "mypal_test" : "(deftest test-27\r\n  (is (false? (mypal '(1 2 3 4 5))))\r\n  (is (true? (mypal \"racecar\")))\r\n  (is (true? (mypal [:foo :bar :foo])))\r\n  (is (true? (mypal '(1 1 3 3 1 1))))\r\n  (is (false? (mypal '(:a :b :c)))))",
    "eulerian_test" : "(deftest test-89\r\n  (is (= true (eulerian [[:a :b]])))\r\n  (is (= false (eulerian [[:a :a] [:b :b]])))\r\n  (is (= false (eulerian [[:a :b] [:a :b] [:a :c] [:c :a]\r\n                          [:a :d] [:b :d] [:c :d]])))\r\n  (is (= true (eulerian [[1 2] [2 3] [3 4] [4 1]])))\r\n  (is (= true (eulerian [[:a :b] [:a :c] [:c :b] [:a :e]\r\n                         [:b :e] [:a :d] [:b :d] [:c :e]\r\n                         [:d :e] [:c :f] [:d :f]])))\r\n  (is (= false (eulerian [[1 2] [2 3] [2 4] [2 5]]))))",
    "split_by_type_test" : "(deftest test-50\r\n  (is (= (set (split-by-type [1 :a 2 :b 3 :c])) #{[1 2 3] [:a :b :c]}))\r\n  (is (= (set (split-by-type [:a \"foo\"  \"bar\" :b])) #{[:a :b] [\"foo\" \"bar\"]}))\r\n  (is (= (set (split-by-type [[1 2] :a [3 4] 5 6 :b])) #{[[1 2] [3 4]] [:a :b] [5 6]})))",
    "lazy_test" : "(deftest test-108\r\n  (is (= 3 (lazy [3 4 5])))\r\n  (is (= 4 (lazy [1 2 3 4 5 6 7] [0.5 3/2 4 19])))\r\n  (is (= 64 (lazy (map #(* % % %) (range))\r\n                  (filter #(zero? (bit-and % (dec %))) (range))\r\n                  (iterate inc 20))))\r\n  (is (= 7 (lazy (range) (range 0 100 7/6) [2 3 5 7 11 13]))))",
    "sh_test" : "(deftest test-112\r\n  (is (=  (sh 10 [1 2 [3 [4 5] 6] 7])\r\n          '(1 2 (3 (4)))))\r\n  (is (=  (sh 30 [1 2 [3 [4 [5 [6 [7 8]] 9]] 10] 11])\r\n          '(1 2 (3 (4 (5 (6 (7))))))))\r\n  (is (=  (sh 9 (range))\r\n          '(0 1 2 3)))\r\n  (is (=  (sh 1 [[[[[1]]]]])\r\n          '(((((1)))))))\r\n  (is (=  (sh 0 [1 2 [3 [4 5] 6] 7])\r\n          '()))\r\n  (is (=  (sh 0 [0 0 [0 [0]]])\r\n          '(0 0 (0 (0)))))\r\n  (is (=  (sh 1 [-10 [1 [2 3 [4 5 [6 7 [8]]]]]])\r\n          '(-10 (1 (2 3 (4)))))))",
    "my_merge_with_test" : "(deftest test-69\r\n  (is (= (my-merge-with * {:a 2, :b 3, :c 4} {:a 2} {:b 2} {:c 5}) {:a 4, :b 6, :c 20}))\r\n  (is (= (my-merge-with - {1 10, 2 20} {1 3, 2 10, 3 15}) {1 7, 2 10, 3 15}))\r\n  (is (= (my-merge-with concat {:a [3], :b [6]} {:a [4 5], :c [8 9]} {:b [7]}) {:a [3 4 5], :b [6 7], :c [8 9]})))",
    "veitch_test" : "(deftest test-140\r\n  (is (= (veitch #{#{'a 'B 'C 'd}\r\n                   #{'A 'b 'c 'd}\r\n                   #{'A 'b 'c 'D}\r\n                   #{'A 'b 'C 'd}\r\n                   #{'A 'b 'C 'D}\r\n                   #{'A 'B 'c 'd}\r\n                   #{'A 'B 'c 'D}\r\n                   #{'A 'B 'C 'd}})\r\n         #{#{'A 'c}\r\n           #{'A 'b}\r\n           #{'B 'C 'd}}))\r\n  (is (= (veitch #{#{'A 'B 'C 'D}\r\n                   #{'A 'B 'C 'd}})\r\n         #{#{'A 'B 'C}}))\r\n  (is (= (veitch #{#{'a 'b 'c 'd}\r\n                   #{'a 'B 'c 'd}\r\n                   #{'a 'b 'c 'D}\r\n                   #{'a 'B 'c 'D}\r\n                   #{'A 'B 'C 'd}\r\n                   #{'A 'B 'C 'D}\r\n                   #{'A 'b 'C 'd}\r\n                   #{'A 'b 'C 'D}})\r\n         #{#{'a 'c}\r\n           #{'A 'C}}))\r\n  (is (= (veitch #{#{'a 'b 'c}\r\n                   #{'a 'B 'c}\r\n                   #{'a 'b 'C}\r\n                   #{'a 'B 'C}})\r\n         #{#{'a}}))\r\n  (is (= (veitch #{#{'a 'B 'c 'd}\r\n                   #{'A 'B 'c 'D}\r\n                   #{'A 'b 'C 'D}\r\n                   #{'a 'b 'c 'D}\r\n                   #{'a 'B 'C 'D}\r\n                   #{'A 'B 'C 'd}})\r\n         #{#{'a 'B 'c 'd}\r\n           #{'A 'B 'c 'D}\r\n           #{'A 'b 'C 'D}\r\n           #{'a 'b 'c 'D}\r\n           #{'a 'B 'C 'D}\r\n           #{'A 'B 'C 'd}}))\r\n  (is (= (veitch #{#{'a 'b 'c 'd}\r\n                   #{'a 'B 'c 'd}\r\n                   #{'A 'B 'c 'd}\r\n                   #{'a 'b 'c 'D}\r\n                   #{'a 'B 'c 'D}\r\n                   #{'A 'B 'c 'D}})\r\n         #{#{'a 'c}\r\n           #{'B 'c}}))\r\n  (is (= (veitch #{#{'a 'B 'c 'd}\r\n                   #{'A 'B 'c 'd}\r\n                   #{'a 'b 'c 'D}\r\n                   #{'a 'b 'C 'D}\r\n                   #{'A 'b 'c 'D}\r\n                   #{'A 'b 'C 'D}\r\n                   #{'a 'B 'C 'd}\r\n                   #{'A 'B 'C 'd}})\r\n         #{#{'B 'd}\r\n           #{'b 'D}}))\r\n  (is (= (veitch #{#{'a 'b 'c 'd}\r\n                   #{'A 'b 'c 'd}\r\n                   #{'a 'B 'c 'D}\r\n                   #{'A 'B 'c 'D}\r\n                   #{'a 'B 'C 'D}\r\n                   #{'A 'B 'C 'D}\r\n                   #{'a 'b 'C 'd}\r\n                   #{'A 'b 'C 'd}})\r\n         #{#{'B 'D}\r\n           #{'b 'd}}))\r\n  (is (= (veitch #{#{'a 'b 'c 'd}\r\n                   #{'A 'b 'c 'd}\r\n                   #{'a 'B 'c 'D}\r\n                   #{'A 'B 'c 'D}\r\n                   #{'a 'B 'C 'D}\r\n                   #{'A 'B 'C 'D}\r\n                   #{'a 'b 'C 'd}\r\n                   #{'A 'b 'C 'd}})\r\n         #{#{'B 'D}\r\n           #{'b 'd}})))",
    "rest_test" : "(deftest rest-test\r\n  (is (= v (rest [10 20 30 40]))))",
    "cartesian_test" : "(deftest test-90\r\n  (is (= (cartesian #{\"ace\" \"king\" \"queen\"} #{\"♠\" \"♥\" \"♦\" \"♣\"})\r\n         #{[\"ace\"   \"♠\"] [\"ace\"   \"♥\"] [\"ace\"   \"♦\"] [\"ace\"   \"♣\"]\r\n           [\"king\"  \"♠\"] [\"king\"  \"♥\"] [\"king\"  \"♦\"] [\"king\"  \"♣\"]\r\n           [\"queen\" \"♠\"] [\"queen\" \"♥\"] [\"queen\" \"♦\"] [\"queen\" \"♣\"]}))\r\n  (is (= (cartesian #{1 2 3} #{4 5})\r\n         #{[1 4] [2 4] [3 4] [1 5] [2 5] [3 5]}))\r\n  (is (= 300 (count (cartesian (into #{} (range 10))\r\n                               (into #{} (range 30)))))))",
    "shifter_test" : "(deftest test-44\r\n  (is (= (shifter 2 [1 2 3 4 5]) '(3 4 5 1 2)))\r\n  (is (= (shifter -2 [1 2 3 4 5]) '(4 5 1 2 3)))\r\n  (is (= (shifter 6 [1 2 3 4 5]) '(2 3 4 5 1)))\r\n  (is (= (shifter 1 '(:a :b :c)) '(:b :c :a)))\r\n  (is (= (shifter -4 '(:a :b :c)) '(:c :a :b))))",
    "gcd_test" : "(deftest test-66\r\n  (is (= (gcd 2 4) 2))\r\n  (is (= (gcd 10 5) 5))\r\n  (is (= (gcd 5 7) 1))\r\n  (is (= (gcd 1023 858) 33)))",
    "word_chain_test" : "(deftest test-82\r\n  (is (= true (word-chain #{\"hat\" \"coat\" \"dog\" \"cat\" \"oat\" \"cot\" \"hot\" \"hog\"})))\r\n  (is (= false (word-chain #{\"cot\" \"hot\" \"bat\" \"fat\"})))\r\n  (is (= false (word-chain #{\"to\" \"top\" \"stop\" \"tops\" \"toss\"})))\r\n  (is (= true (word-chain #{\"spout\" \"do\" \"pot\" \"pout\" \"spot\" \"dot\"})))\r\n  (is (= true (word-chain #{\"share\" \"hares\" \"shares\" \"hare\" \"are\"})))\r\n  (is (= false (word-chain #{\"share\" \"hares\" \"hare\" \"are\"}))))",
    "black_box_test" : "(deftest test-65\r\n  (is (= :map (black-box {:a 1, :b 2})))\r\n  (is (= :list (black-box (range (rand-int 20)))))\r\n  (is (= :set (black-box #{10 (rand-int 5)})))\r\n  (is (= :vector (black-box [1 2 3 4 5 6])))\r\n  (is (= [:map :set :vector :list] (map black-box [{} #{} [] ()]))))",
    "reversi_test" : "(deftest test-124\r\n  (is (= {[1 3] #{[1 2]}, [0 2] #{[1 2]}, [3 1] #{[2 1]}, [2 0] #{[2 1]}}\r\n         (reversi '[[e e e e]\r\n                    [e w b e]\r\n                    [e b w e]\r\n                    [e e e e]] 'w)))\r\n  (is (= {[3 2] #{[2 2]}, [3 0] #{[2 1]}, [1 0] #{[1 1]}}\r\n         (reversi '[[e e e e]\r\n                    [e w b e]\r\n                    [w w w e]\r\n                    [e e e e]] 'b)))\r\n  (is (= {[0 3] #{[1 2]}, [1 3] #{[1 2]}, [3 3] #{[2 2]}, [2 3] #{[2 2]}}\r\n         (reversi '[[e e e e]\r\n                    [e w b e]\r\n                    [w w b e]\r\n                    [e e b e]] 'w)))\r\n  (is (= {[0 3] #{[2 1] [1 2]}, [1 3] #{[1 2]}, [2 3] #{[2 1] [2 2]}}\r\n         (reversi '[[e e w e]\r\n                    [b b w e]\r\n                    [b w w e]\r\n                    [b w w w]] 'b)))\r\n  (is (= {[0 3] #{[2 1] [1 2]}, [1 3] #{[1 2]}, [2 3] #{[2 1] [2 2]}}\r\n         (reversi '[[e e w e]\r\n                    [b b w e]\r\n                    [b w w e]\r\n                    [b w w w]] 'b))))",
    "bin_test" : "(deftest test-122\r\n  (is (= 0     (bin \"0\")))\r\n  (is (= 7     (bin \"111\")))\r\n  (is (= 8     (bin \"1000\")))\r\n  (is (= 9     (bin \"1001\")))\r\n  (is (= 255   (bin \"11111111\")))\r\n  (is (= 1365  (bin \"10101010101\")))\r\n  (is (= 65535 (bin \"1111111111111111\"))))",
    "graph_test" : "(deftest test-91\r\n  (is (= true (graph #{[:a :a]})))\r\n  (is (= true (graph #{[:a :b]})))\r\n  (is (= false (graph #{[1 2] [2 3] [3 1]\r\n                        [4 5] [5 6] [6 4]})))\r\n  (is (= true (graph #{[1 2] [2 3] [3 1]\r\n                       [4 5] [5 6] [6 4] [3 4]})))\r\n  (is (= false (graph #{[:a :b] [:b :c] [:c :d]\r\n                        [:x :y] [:d :a] [:b :e]})))\r\n  (is (= true (graph #{[:a :b] [:b :c] [:c :d]\r\n                       [:x :y] [:d :a] [:b :e] [:x :a]}))))",
    "k_test" : "(deftest test-103\r\n  (is (= (k 1 #{4 5 6}) #{#{4} #{5} #{6}}))\r\n  (is (= (k 10 #{4 5 6}) #{}))\r\n  (is (= (k 2 #{0 1 2}) #{#{0 1} #{0 2} #{1 2}}))\r\n  (is (= (k 3 #{0 1 2 3 4}) #{#{0 1 2} #{0 1 3} #{0 1 4} #{0 2 3} #{0 2 4}\r\n                              #{0 3 4} #{1 2 3} #{1 2 4} #{1 3 4} #{2 3 4}}))\r\n  (is (= (k 4 #{[1 2 3] :a \"abc\" \"efg\"}) #{#{[1 2 3] :a \"abc\" \"efg\"}}))\r\n  (is (= (k 2 #{[1 2 3] :a \"abc\" \"efg\"}) #{#{[1 2 3] :a} #{[1 2 3] \"abc\"} #{[1 2 3] \"efg\"}\r\n                                           #{:a \"abc\"} #{:a \"efg\"} #{\"abc\" \"efg\"}})))",
    "dupseq_test" : "(deftest test-32\r\n  (is (= (dupseq [1 2 3]) '(1 1 2 2 3 3)))\r\n  (is (= (dupseq [:a :a :b :b]) '(:a :a :a :a :b :b :b :b)))\r\n  (is (= (dupseq [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4])))\r\n  (is (= (dupseq [44 33]) [44 44 33 33])))",
    "inject_test" : "(deftest test-40\r\n  (is (= (inject 0 [1 2 3]) [1 0 2 0 3]))\r\n  (is (= (apply str (inject \", \" [\"one\" \"two\" \"three\"])) \"one, two, three\"))\r\n  (is (= (inject :z [:a :b :c :d]) [:a :z :b :z :c :z :d])))",
    "seq_prons_test" : "(deftest test-110\r\n  (is (= [[1 1] [2 1] [1 2 1 1]] (take 3 (seq-prons [1]))))\r\n  (is (= [3 1 2 4] (first (seq-prons [1 1 1 4 4]))))\r\n  (is (= [1 1 1 3 2 1 3 2 1 1] (nth (seq-prons [1]) 6)))\r\n  (is (= 338 (count (nth (seq-prons [3 2]) 15)))))",
    "hello_test" : "(deftest hello-test\r\n  (is (= (hello \"Dave\") \"Hello, Dave!\"))\r\n  (is (= (hello \"Jenn\") \"Hello, Jenn!\"))\r\n  (is (= (hello \"Rhea\") \"Hello, Rhea!\")))",
    "symmetric_test" : "(deftest test-96\r\n  (is (= (symmetric? '(:a (:b nil nil) (:b nil nil))) true))\r\n  (is (= (symmetric? '(:a (:b nil nil) nil)) false))\r\n  (is (= (symmetric? '(:a (:b nil nil) (:c nil nil))) false))\r\n  (is (= (symmetric? [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]\r\n                      [2 [3 nil [4 [6 nil nil] [5 nil nil]]] nil]])\r\n         true))\r\n  (is (= (symmetric? [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]\r\n                      [2 [3 nil [4 [5 nil nil] [6 nil nil]]] nil]])\r\n         false))\r\n  (is (= (symmetric? [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]\r\n                      [2 [3 nil [4 [6 nil nil] nil]] nil]])\r\n         false)))",
    "sets_test" : "(deftest sets-test\r\n  (is (= s (set '(:a :a :b :c :c :c :c :d :d))))\r\n  (is (= s (set/union #{:a :b :c} #{:b :c :d}))))",
    "get_highest_test" : "(deftest test-38\r\n  (is (= (get-highest 1 8 3 4) 8))\r\n  (is (= (get-highest 30 20) 30))\r\n  (is (= (get-highest 45 67 11) 67)))",
    "spaz_out_test" : "(deftest test-62\r\n  (is (= (take 5 (spaz-out #(* 2 %) 1)) [1 2 4 8 16]))\r\n  (is (= (take 100 (spaz-out inc 0)) (take 100 (range))))\r\n  (is (= (take 9 (spaz-out #(inc (mod % 3)) 1)) (take 9 (cycle [1 2 3])))))",
    "seqs_test" : "(deftest seqs-test\r\n  (is (= n (first '(3 2 1))))\r\n  (is (= n (second [2 3 4])))\r\n  (is (= n (last (list 1 2 3)))))",
    "last_test" : "(deftest test-19\r\n  (is (= (my-last [1 2 3 4 5]) 5))\r\n  (is (= (my-last '(5 4 3)) 3))\r\n  (is (= (my-last [\"b\" \"c\" \"d\"]) \"d\")))",
    "splatter_test" : "(deftest test-33\r\n  (is (= (splatter [1 2 3] 2) '(1 1 2 2 3 3)))\r\n  (is (= (splatter [:a :b] 4) '(:a :a :a :a :b :b :b :b)))\r\n  (is (= (splatter [4 5 6] 1) '(4 5 6)))\r\n  (is (= (splatter [[1 2] [3 4]] 2) '([1 2] [1 2] [3 4] [3 4])))\r\n  (is (= (splatter [44 33] 2) [44 44 33 33])))",
    "make_map_test" : "(deftest test-61\r\n  (is (= (make-map [:a :b :c] [1 2 3]) {:a 1, :b 2, :c 3}))\r\n  (is (= (make-map [1 2 3 4] [\"one\" \"two\" \"three\"]) {1 \"one\", 2 \"two\", 3 \"three\"}))\r\n  (is (= (make-map [:foo :bar] [\"foo\" \"bar\" \"baz\"]) {:foo \"foo\", :bar \"bar\"})))",
    "ss_test" : "(deftest test-120\r\n  (is (= 8 (ss (range 10))))\r\n  (is (= 19 (ss (range 30))))\r\n  (is (= 50 (ss (range 100))))\r\n  (is (= 50 (ss (range 1000)))))",
    "cw_test" : "(deftest test-111\r\n  (is (= true  (cw \"the\" [\"_ # _ _ e\"])))\r\n  (is (= false (cw \"the\" [\"c _ _ _\"\r\n                          \"d _ # e\"\r\n                          \"r y _ _\"])))\r\n  (is (= true  (cw \"joy\" [\"c _ _ _\"\r\n                          \"d _ # e\"\r\n                          \"r y _ _\"])))\r\n  (is (= false (cw \"joy\" [\"c o n j\"\r\n                          \"_ _ y _\"\r\n                          \"r _ _ #\"])))\r\n  (is (= true  (cw \"clojure\" [\"_ _ _ # j o y\"\r\n                              \"_ _ o _ _ _ _\"\r\n                              \"_ _ f _ # _ _\"]))))",
    "mymap_test" : "(deftest test-118\r\n  (is (= [3 4 5 6 7]\r\n         (mymap inc [2 3 4 5 6])))\r\n  (is (= (repeat 10 nil)\r\n         (mymap (fn [_] nil) (range 10))))\r\n  (is (= [100 101]\r\n         (->> (mymap inc (range 101))\r\n              (drop (dec 100))\r\n              (take 2)))))",
    "key_val_test" : "(deftest test-105\r\n  (is (= {} (key-val [])))\r\n  (is (= {:a [1]} (key-val [:a 1])))\r\n  (is (= {:a [1], :b [2]} (key-val [:a 1, :b 2])))\r\n  (is (= {:a [1 2 3], :b [], :c [4]} (key-val [:a 1 2 3 :b :c 4]))))",
    "lists_test" : "(deftest lists-test\r\n  (is (= l '(:a :b :c))))",
    "change_test" : "(ns change-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [change :refer [issue]]))\r\n\r\n(deftest single-coin-change\r\n  (is (= (issue 25 #{1 5 10 25 100})\r\n         '(25))))\r\n\r\n(deftest multiple-coin-change\r\n  (is (= (issue 15 #{1 5 10 25 100})\r\n         '(5 10))))\r\n\r\n(deftest change-with-lilliputian-coins\r\n  (is (= (issue 23 #{1 4 15 20 50})\r\n         '(4 4 15))))\r\n\r\n(deftest change-with-elbonia-coins\r\n  (is (= (issue 63 #{1 5 10 21 25})\r\n         '(21 21 21))))\r\n\r\n(deftest large-target-values\r\n  (is (= (issue 999 #{1 2 5 10 20 50 100})\r\n         '(2 2 5 20 20 50 100 100 100 100 100 100 100 100 100))))\r\n\r\n(deftest no-coins-make-zero-change\r\n  (is (empty? (issue 0 #{1, 5, 10, 21, 25}))))\r\n\r\n#_(deftest error-testing-for-change-smallet-than-the-smallest-coin\r\n  (is (thrown-with-msg? IllegalArgumentException #\"cannot change\"\r\n                        (issue 3 #{5 10}))))\r\n\r\n#_(deftest cannot-find-negative-change-values\r\n  (is (thrown-with-msg? IllegalArgumentException #\"cannot change\"\r\n                        (issue -5 #{1 2 5}))))\r\n\r\n#_(deftest error-testing-for-no-valid-change\r\n  (is (thrown-with-msg? IllegalArgumentException #\"cannot change\"\r\n                        (issue 10 #{20 8 3}))))\r\n",
    "log_levels_test" : "(ns log-levels-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            log-levels))\r\n\r\n(deftest ^{:task 1} message-error-test\r\n  (is (= \"Stack overflow\" (log-levels/message \"[ERROR]: Stack overflow\"))))\r\n\r\n(deftest ^{:task 1} message-warning-test\r\n  (is (= (log-levels/message \"[WARNING]: Disk almost full\") \"Disk almost full\")))\r\n\r\n(deftest ^{:task 1} message-info-test\r\n  (is (= (log-levels/message \"[INFO]: File moved\") \"File moved\")))\r\n\r\n(deftest ^{:task 1} message-trim-whitespace-test\r\n  (is (= \"Timezone not set\" (log-levels/message \"[WARNING]:   \\tTimezone not set  \\r\\n\"))))\r\n\r\n(deftest ^{:task 2} log-level-error-test\r\n  (is (= \"error\" (log-levels/log-level \"[ERROR]: Disk full\"))))\r\n\r\n(deftest ^{:task 2} log-level-warning-test\r\n  (is (= \"warning\" (log-levels/log-level \"[WARNING]: Unsafe password\"))))\r\n\r\n(deftest ^{:task 2} log-level-info-test\r\n  (is (= \"info\" (log-levels/log-level \"[INFO]: Timezone changed\"))))\r\n\r\n(deftest ^{:task 3} reformat-error-test\r\n  (is (= \"Segmentation fault (error)\" (log-levels/reformat \"[ERROR]: Segmentation fault\"))))\r\n\r\n(deftest ^{:task 3} reformat-warning-test\r\n  (is (= \"Decreased performance (warning)\" (log-levels/reformat \"[WARNING]: Decreased performance\"))))\r\n\r\n(deftest ^{:task 3} reformat-info-test\r\n  (is (= \"Disk defragmented (info)\" (log-levels/reformat \"[INFO]: Disk defragmented\"))))\r\n\r\n(deftest ^{:task 3} reformat-trim-whitespace-test\r\n  (is (= \"Corrupt disk (error)\" (log-levels/reformat \"[ERROR]: \\t Corrupt disk\\t \\t \\r\\n\"))))\r\n",
    "two_fer_test" : "(ns two-fer-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            two-fer))\r\n\r\n(deftest two-fer-test\r\n  (is (= \"One for you, one for me.\" (two-fer))))\r\n\r\n(deftest name-alice-test\r\n  (is (= \"One for Alice, one for me.\" (two-fer \"Alice\"))))\r\n\r\n(deftest name-bob-test\r\n  (is (= \"One for Bob, one for me.\" (two-fer \"Bob\"))))\r\n",
    "gigasecond_test" : "(ns gigasecond-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            gigasecond))\r\n\r\n(deftest from-apr-25-2011\r\n  (is (= [2043 1 1] (from 2011 4 25))))\r\n\r\n#_(deftest from-jun-13-1977\r\n  (is (= [2009 2 19] (from 1977 6 13))))\r\n\r\n#_(deftest from-jul-19-1959\r\n  (is (= [1991 3 27] (from 1959 7 19))))\r\n\r\n",
    "reverse_string_test" : "(ns reverse-string-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            reverse-string))\r\n\r\n(deftest empty-string-test\r\n  (is (= \"\" (reverse-string \"\"))))\r\n\r\n(deftest a-letter-test\r\n  (is (= \"I\" (reverse-string \"I\"))))\r\n\r\n(deftest a-word-test\r\n  (is (= \"tobor\" (reverse-string \"robot\"))))\r\n\r\n(deftest capitalised-word-test\r\n  (is (= \"nemaR\" (reverse-string \"Ramen\"))))\r\n\r\n(deftest sentence-with-punctuation-test\r\n  (is (= \"!yrgnuh m'I\" (reverse-string \"I'm hungry!\"))))\r\n\r\n(deftest palindrome-test\r\n  (is (= \"racecar\" (reverse-string \"racecar\"))))\r\n\r\n(deftest even-sized-word-test\r\n  (is (= \"reward\" (reverse-string \"drawer\"))))\r\n\r\n(deftest long-string-test\r\n  (is (= (apply str (repeat 100 \"?wolfrevo\"))\r\n         (reverse-string\r\n          (apply str (repeat 100 \"overflow?\"))))))\r\n",
    "roman_numerals_test" : "(ns roman-numerals-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            roman-numerals))\r\n\r\n(deftest one\r\n  (is (= \"I\" (numerals 1))))\r\n\r\n(deftest two\r\n  (is (= \"II\" (numerals 2))))\r\n\r\n(deftest three\r\n  (is (= \"III\" (numerals 3))))\r\n\r\n(deftest four\r\n  (is (= \"IV\" (numerals 4))))\r\n\r\n(deftest five\r\n  (is (= \"V\" (numerals 5))))\r\n\r\n(deftest six\r\n  (is (= \"VI\" (numerals 6))))\r\n\r\n(deftest nine\r\n  (is (= \"IX\" (numerals 9))))\r\n\r\n(deftest twenty-seven\r\n  (is (= \"XXVII\" (numerals 27))))\r\n\r\n(deftest forty-eight\r\n  (is (= \"XLVIII\" (numerals 48))))\r\n\r\n(deftest fifty-nine\r\n  (is (= \"LIX\" (numerals 59))))\r\n\r\n(deftest ninety-three\r\n  (is (= \"XCIII\" (numerals 93))))\r\n\r\n(deftest one-hundred-forty-one\r\n  (is (= \"CXLI\" (numerals 141))))\r\n\r\n(deftest one-hundred-sixty-three\r\n  (is (= \"CLXIII\" (numerals 163))))\r\n\r\n(deftest four-hundred-two\r\n  (is (= \"CDII\" (numerals 402))))\r\n\r\n(deftest five-hundred-seventy-five\r\n  (is (= \"DLXXV\" (numerals 575))))\r\n\r\n(deftest nine-hundred-eleven\r\n  (is (= \"CMXI\" (numerals 911))))\r\n\r\n(deftest one-thousand-twenty-four\r\n  (is (= \"MXXIV\" (numerals 1024))))\r\n\r\n(deftest three-thousand\r\n  (is (= \"MMM\" (numerals 3000))))\r\n",
    "all_your_base_test" : "(ns all-your-base-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            [all-your-base]))\r\n\r\n(deftest test-single-bit-to-one-decimal\r\n  (testing \"Base 2 '1' converts to base 10 '1'\"\r\n    (is (= '(1) (convert 2 '(1) 10)))))\r\n\r\n(deftest test-binary-to-single-decimal\r\n  (testing \"Base 2 '1 0 1' converts to base 10 '5'\"\r\n    (is (= '(5) (convert 2 '(1 0 1) 10)))))\r\n\r\n(deftest test-single-decimal-to-binary\r\n  (testing \"Base 10 '5' converts to base 2 '1 0 1'\"\r\n    (is (= '(1 0 1) (convert 10 '(5) 2)))))\r\n\r\n(deftest test-binary-to-multiple-decimal\r\n  (testing \"Base 2 '1 0 1 0 1 0' converts to base 10 '4 2'\"\r\n    (is (= '(4 2) (convert 2 '(1 0 1 0 1 0) 10)))))\r\n\r\n(deftest test-decimal-to-binary\r\n  (testing \"Base 10 '4 2' conves to base 2 '1 0 1 0 1 0'\"\r\n    (is (= '(1 0 1 0 1 0) (convert 10 '(4 2) 2)))))\r\n\r\n(deftest test-trinary-to-hexadecimal\r\n  (testing \"Base 3 '1 1 2 0' converts to base 16 '2 10'\"\r\n    (is (= '(2 10) (convert 3 '(1 1 2 0) 16)))))\r\n\r\n(deftest test-hexadecimal-to-trinary\r\n  (testing \"Base 16 '2 10' converts to base 3 '1 1 2 0'\"\r\n    (is (= '(1 1 2 0) (convert 16 '(2 10) 3)))))\r\n\r\n(deftest test-15-bit-integer\r\n  (testing \"Base 97 '3 46 60' converts to base 73 '6 10 45'\"\r\n    (is (= '(6 10 45) (convert 97 '(3 46 60) 73)))))\r\n\r\n(deftest test-empty-list\r\n  (testing \"Empty input digits returns empty sequence\"\r\n    (is (empty? (convert 2 () 10)))))\r\n\r\n(deftest test-single-zero\r\n  (testing \"0 converts to 0, no matter the base\"\r\n    (is (= '(0) (convert 10 '(0) 2)))))\r\n\r\n(deftest test-multiple-zeroes\r\n  (testing \"0 converts to 0, no matter the how many zeroes\"\r\n    (is (= '(0) (convert 10 '(0 0 0) 2)))))\r\n\r\n(deftest test-leading-zeros\r\n  (testing \"Leading zeroes don't affect conversion\"\r\n    (is (= '(4 2) (convert 7 '(0 6 0) 10)))))\r\n\r\n(deftest test-negative-digit\r\n  (testing \"Negative digits result in nil\"\r\n    (is (nil? (convert 2 '(1 -1 1 0 1 0) 10)))))\r\n\r\n(deftest test-invalid-positive-digit\r\n  (testing \"Invalid digits return nil\"\r\n    (is (nil? (convert 2 '(1 2 1 0 1 0) 10)))))\r\n\r\n(deftest test-first-base-is-one\r\n  (testing \"Input base of 1 returns nil\"\r\n    (is (nil? (convert 1 () 10)))))\r\n\r\n(deftest test-second-base-is-one\r\n  (testing \"Output base of 1 returns nil\"\r\n    (is (nil? (convert 2 '(1 0 1 0 1 0) 1)))))\r\n\r\n(deftest test-first-base-is-zero\r\n  (testing \"Input base of 0 returns nil\"\r\n    (is (nil? (convert 0 () 10)))))\r\n\r\n(deftest test-second-base-is-zero\r\n  (testing \"Output base of 0 returns nil\"\r\n    (is (nil? (convert 10 '(7) 0)))))\r\n\r\n(deftest test-first-base-is-negative\r\n  (testing \"Negative input base returns nil\"\r\n    (is (nil? (convert -2 '(1) 10)))))\r\n\r\n(deftest test-second-base-is-negative\r\n  (testing \"Negative output base returns nil\"\r\n    (is (nil? (convert 2 '(1) -7)))))\r\n\r\n(deftest test-both-bases-are-negative\r\n  (testing \"When both bases are negative, nil is returned\"\r\n    (is (nil? (convert -2 '(1) -7)))))\r\n",
    "yacht_test" : "(ns yacht-test\r\n  (:require [clojure.test :refer [deftest testing is run-tests]]\r\n             yacht))\r\n\r\n(deftest score-test\r\n  (testing \"Yacht\"\r\n     (is (= 50 (score [5 5 5 5 5] \"yacht\"))))\r\n  (testing \"Not Yacht\"\r\n     (is (= 0 (score [1 3 3 2 5] \"yacht\"))))\r\n  (testing \"Ones\"\r\n     (is (= 3 (score [1 1 1 3 5] \"ones\"))))\r\n  (testing \"Ones, out of order\"\r\n     (is (= 3 (score [3 1 1 5 1] \"ones\"))))\r\n  (testing \"No ones\"\r\n     (is (= 0 (score [4 3 6 5 5] \"ones\"))))\r\n  (testing \"Twos\"\r\n     (is (= 2 (score [2 3 4 5 6] \"twos\"))))\r\n  (testing \"Fours\"\r\n     (is (= 8 (score [1 4 1 4 1] \"fours\"))))\r\n  (testing \"Yacht counted as threes\"\r\n     (is (= 15 (score [3 3 3 3 3] \"threes\"))))\r\n  (testing \"Yacht of 3s counted as fives\"\r\n     (is (= 0 (score [3 3 3 3 3] \"fives\"))))\r\n  (testing \"Fives\"\r\n     (is (= 10 (score [1 5 3 5 3] \"fives\"))))\r\n  (testing \"Sixes\"\r\n     (is (= 6 (score [2 3 4 5 6] \"sixes\"))))\r\n  (testing \"Full house two small, three big\"\r\n     (is (= 16 (score [2 2 4 4 4] \"full house\"))))\r\n  (testing \"Full house three small, two big\"\r\n     (is (= 19 (score [5 3 3 5 3] \"full house\"))))\r\n  (testing \"Two pair is not a full house\"\r\n     (is (= 0 (score [2 2 4 4 5] \"full house\"))))\r\n  (testing \"Four of a kind is not a full house\"\r\n     (is (= 0 (score [1 4 4 4 4] \"full house\"))))\r\n  (testing \"Yacht is not a full house\"\r\n     (is (= 0 (score [2 2 2 2 2] \"full house\"))))\r\n  (testing \"Four of a Kind\"\r\n     (is (= 24 (score [6 6 4 6 6] \"four of a kind\"))))\r\n  (testing \"Yacht can be scored as Four of a Kind\"\r\n     (is (= 12 (score [3 3 3 3 3] \"four of a kind\"))))\r\n  (testing \"Full house is not Four of a Kind\"\r\n     (is (= 0 (score [3 3 3 5 5] \"four of a kind\"))))\r\n  (testing \"Little Straight\"\r\n     (is (= 30 (score [3 5 4 1 2] \"little straight\"))))\r\n  (testing \"Little Straight as Big Straight\"\r\n     (is (= 0 (score [1 2 3 4 5] \"big straight\"))))\r\n  (testing \"Four in order but not a little straight\"\r\n     (is (= 0 (score [1 1 2 3 4] \"little straight\"))))\r\n  (testing \"No pairs but not a little straight\"\r\n     (is (= 0 (score [1 2 3 4 6] \"little straight\"))))\r\n  (testing \"Minimum is 1, maximum is 5, but not a little straight\"\r\n     (is (= 0 (score [1 1 3 4 5] \"little straight\"))))\r\n  (testing \"Big Straight\"\r\n     (is (= 30 (score [4 6 2 5 3] \"big straight\"))))\r\n  (testing \"Big Straight as little straight\"\r\n     (is (= 0 (score [6 5 4 3 2] \"little straight\"))))\r\n  (testing \"No pairs but not a big straight\"\r\n     (is (= 0 (score [6 5 4 3 1] \"big straight\"))))\r\n  (testing \"Choice\"\r\n     (is (= 23 (score [3 3 5 6 6] \"choice\"))))\r\n  (testing \"Yacht as choice\"\r\n     (is (= 10 (score [2 2 2 2 2] \"choice\")))))\r\n  )",
    "difference_of_squares_test" : "(ns difference-of-squares-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [difference-of-squares :as dos]))\r\n\r\n(deftest square-of-sum-to-5\r\n  (is (= 225 (square-of-sum 5))))\r\n\r\n(deftest sum-of-squares-to-5\r\n  (is (= 55 (sum-of-squares 5))))\r\n\r\n(deftest difference-of-squares-to-5\r\n  (is (= 170 (difference 5))))\r\n\r\n(deftest square-of-sum-to-10\r\n  (is (= 3025 (square-of-sum 10))))\r\n\r\n(deftest sum-of-squares-to-10\r\n  (is (= 385 (sum-of-squares 10))))\r\n\r\n(deftest difference-of-squares-to-10\r\n  (is (= 2640 (difference 10))))\r\n\r\n(deftest square-of-sum-to-100\r\n  (is (= 25502500 (square-of-sum 100))))\r\n\r\n(deftest sum-of-squares-to-100\r\n  (is (= 338350 (sum-of-squares 100))))\r\n\r\n(deftest difference-of-squares-to-100\r\n  (is (= 25164150 (difference 100))))\r\n",
    "pig_latin_test" : "(ns pig-latin-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            pig-latin))\r\n\r\n;; ay is added to words that start with vowels\r\n\r\n(deftest word-beginning-with-a\r\n  (is (= \"appleay\"\r\n         (translate \"apple\"))))\r\n\r\n(deftest word-beginning-with-e\r\n  (is (= \"earay\"\r\n         (translate \"ear\"))))\r\n\r\n(deftest word-beginning-with-i\r\n  (is (= \"iglooay\"\r\n         (translate \"igloo\"))))\r\n\r\n(deftest word-beginning-with-o\r\n  (is (= \"objectay\"\r\n         (translate \"object\"))))\r\n\r\n(deftest word-beginning-with-u\r\n  (is (= \"underay\"\r\n         (translate \"under\"))))\r\n\r\n(deftest word-beginning-with-a-vowel-and-followed-by-a-qu\r\n  (is (= \"equalay\"\r\n         (translate \"equal\"))))\r\n\r\n;; first letter and ay are moved to the end of words that start with consonants\r\n\r\n(deftest word-beginning-with-p\r\n  (is (= \"igpay\"\r\n         (translate \"pig\"))))\r\n\r\n(deftest word-beginning-with-k\r\n  (is (= \"oalakay\"\r\n         (translate \"koala\"))))\r\n\r\n(deftest word-beginning-with-y\r\n  (is (= \"ellowyay\"\r\n         (translate \"yellow\"))))\r\n\r\n(deftest word-beginning-with-x\r\n  (is (= \"enonxay\"\r\n         (translate \"xenon\"))))\r\n\r\n(deftest word-beginning-with-q-without-a-following-u\r\n  (is (= \"atqay\"\r\n         (translate \"qat\"))))\r\n\r\n;; some letter clusters are treated like a single consonant\r\n\r\n(deftest word-beginning-with-ch\r\n  (is (= \"airchay\"\r\n         (translate \"chair\"))))\r\n\r\n(deftest word-beginning-with-qu\r\n  (is (= \"eenquay\"\r\n         (translate \"queen\"))))\r\n\r\n(deftest word-beginning-with-qu-and-a-preceding-consonant\r\n  (is (= \"aresquay\"\r\n         (translate \"square\"))))\r\n\r\n(deftest word-beginning-with-th\r\n  (is (= \"erapythay\"\r\n         (translate \"therapy\"))))\r\n\r\n(deftest word-beginning-with-thr\r\n  (is (= \"ushthray\"\r\n         (translate \"thrush\"))))\r\n\r\n(deftest word-beginning-with-sch\r\n  (is (= \"oolschay\"\r\n         (translate \"school\"))))\r\n\r\n;;  some letter clusters are treated like a single vowel\r\n\r\n(deftest word-beginning-with-yt\r\n  (is (= \"yttriaay\"\r\n         (translate \"yttria\"))))\r\n\r\n(deftest word-beginning-with-xr\r\n  (is (= \"xrayay\"\r\n         (translate \"xray\"))))\r\n\r\n(deftest word-beginning-with-consonants-followed-by-y\r\n  (is (= \"ythmrhay\"\r\n         (translate \"rhythm\"))))\r\n\r\n(deftest two-letter-word-ends-with-y\r\n  (is (= \"ymay\"\r\n         (translate \"my\"))))\r\n\r\n;; phrases are translated\r\n(deftest a-whole-phrase\r\n  (is (= \"ickquay astfay unray\"\r\n         (translate \"quick fast run\"))))\r\n",
    "date_parser_test" : "(ns date-parser-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            date-parser))\r\n            \r\n(deftest ^{:task 1} day-test\r\n  (testing \"numeric pattern for day matches\"\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/day) \"1\"))))\r\n    (testing \"un-padded 2\"\r\n      (is (= \"2\" (re-matches (re-pattern date-parser/day) \"2\"))))\r\n    (testing \"un-padded 3\"\r\n      (is (= \"3\" (re-matches (re-pattern date-parser/day) \"3\"))))\r\n    (testing \"un-padded 4\"\r\n      (is (= \"4\" (re-matches (re-pattern date-parser/day) \"4\"))))\r\n    (testing \"un-padded 5\"\r\n      (is (= \"5\" (re-matches (re-pattern date-parser/day) \"5\"))))\r\n    (testing \"un-padded 6\"\r\n      (is (= \"6\" (re-matches (re-pattern date-parser/day) \"6\"))))\r\n    (testing \"un-padded 7\"\r\n      (is (= \"7\" (re-matches (re-pattern date-parser/day) \"7\"))))\r\n    (testing \"un-padded 8\"\r\n      (is (= \"8\" (re-matches (re-pattern date-parser/day) \"8\"))))\r\n    (testing \"un-padded 9\"\r\n      (is (= \"9\" (re-matches (re-pattern date-parser/day) \"9\"))))\r\n    (testing \"un-padded 10\"\r\n      (is (= \"10\" (re-matches (re-pattern date-parser/day) \"10\"))))\r\n    (testing \"un-padded 11\"\r\n      (is (= \"11\" (re-matches (re-pattern date-parser/day) \"11\"))))\r\n    (testing \"un-padded 12\"\r\n      (is (= \"12\" (re-matches (re-pattern date-parser/day) \"12\"))))\r\n    (testing \"un-padded 13\"\r\n      (is (= \"13\" (re-matches (re-pattern date-parser/day) \"13\"))))\r\n    (testing \"un-padded 14\"\r\n      (is (= \"14\" (re-matches (re-pattern date-parser/day) \"14\"))))\r\n    (testing \"un-padded 15\"\r\n      (is (= \"15\" (re-matches (re-pattern date-parser/day) \"15\"))))\r\n    (testing \"un-padded 16\"\r\n      (is (= \"16\" (re-matches (re-pattern date-parser/day) \"16\"))))\r\n    (testing \"un-padded 17\"\r\n      (is (= \"17\" (re-matches (re-pattern date-parser/day) \"17\"))))\r\n    (testing \"un-padded 18\"\r\n      (is (= \"18\" (re-matches (re-pattern date-parser/day) \"18\"))))\r\n    (testing \"un-padded 19\"\r\n      (is (= \"19\" (re-matches (re-pattern date-parser/day) \"19\"))))\r\n    (testing \"un-padded 20\"\r\n      (is (= \"20\" (re-matches (re-pattern date-parser/day) \"20\"))))\r\n    (testing \"un-padded 21\"\r\n      (is (= \"21\" (re-matches (re-pattern date-parser/day) \"21\"))))\r\n    (testing \"un-padded 22\"\r\n      (is (= \"22\" (re-matches (re-pattern date-parser/day) \"22\"))))\r\n    (testing \"un-padded 23\"\r\n      (is (= \"23\" (re-matches (re-pattern date-parser/day) \"23\"))))\r\n    (testing \"un-padded 24\"\r\n      (is (= \"24\" (re-matches (re-pattern date-parser/day) \"24\"))))\r\n    (testing \"un-padded 25\"\r\n      (is (= \"25\" (re-matches (re-pattern date-parser/day) \"25\"))))\r\n    (testing \"un-padded 26\"\r\n      (is (= \"26\" (re-matches (re-pattern date-parser/day) \"26\"))))\r\n    (testing \"un-padded 27\"\r\n      (is (= \"27\" (re-matches (re-pattern date-parser/day) \"27\"))))\r\n    (testing \"un-padded 28\"\r\n      (is (= \"28\" (re-matches (re-pattern date-parser/day) \"28\"))))\r\n    (testing \"un-padded 29\"\r\n      (is (= \"29\" (re-matches (re-pattern date-parser/day) \"29\"))))\r\n    (testing \"un-padded 30\"\r\n      (is (= \"30\" (re-matches (re-pattern date-parser/day) \"30\"))))\r\n    (testing \"un-padded 31\"\r\n      (is (= \"31\" (re-matches (re-pattern date-parser/day) \"31\"))))\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/day) \"1\"))))\r\n    (testing \"padded 02\"\r\n      (is (= \"02\" (re-matches (re-pattern date-parser/day) \"02\"))))\r\n    (testing \"padded 03\"\r\n      (is (= \"03\" (re-matches (re-pattern date-parser/day) \"03\"))))\r\n    (testing \"padded 04\"\r\n      (is (= \"04\" (re-matches (re-pattern date-parser/day) \"04\"))))\r\n    (testing \"padded 05\"\r\n      (is (= \"05\" (re-matches (re-pattern date-parser/day) \"05\"))))\r\n    (testing \"padded 06\"\r\n      (is (= \"06\" (re-matches (re-pattern date-parser/day) \"06\"))))\r\n    (testing \"padded 07\"\r\n      (is (= \"07\" (re-matches (re-pattern date-parser/day) \"07\"))))\r\n    (testing \"padded 08\"\r\n      (is (= \"08\" (re-matches (re-pattern date-parser/day) \"08\"))))\r\n    (testing \"padded 09\"\r\n      (is (= \"09\" (re-matches (re-pattern date-parser/day) \"09\")))))\r\n  (testing \"numeric pattern for day doesn't match\"\r\n    (testing \"too few digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"\"))))\r\n    (testing \"too many digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"111\"))))\r\n    (testing \"one letter\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"a\"))))\r\n    (testing \"two letters\"\r\n      (is (nil? (re-matches (re-pattern date-parser/day) \"bb\"))))))\r\n\r\n(deftest ^{:task 1} month-test\r\n  (testing \"numeric pattern for month matches\"\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/month) \"1\"))))\r\n    (testing \"un-padded 2\"\r\n      (is (= \"2\" (re-matches (re-pattern date-parser/month) \"2\"))))\r\n    (testing \"un-padded 3\"\r\n      (is (= \"3\" (re-matches (re-pattern date-parser/month) \"3\"))))\r\n    (testing \"un-padded 4\"\r\n      (is (= \"4\" (re-matches (re-pattern date-parser/month) \"4\"))))\r\n    (testing \"un-padded 5\"\r\n      (is (= \"5\" (re-matches (re-pattern date-parser/month) \"5\"))))\r\n    (testing \"un-padded 6\"\r\n      (is (= \"6\" (re-matches (re-pattern date-parser/month) \"6\"))))\r\n    (testing \"un-padded 7\"\r\n      (is (= \"7\" (re-matches (re-pattern date-parser/month) \"7\"))))\r\n    (testing \"un-padded 8\"\r\n      (is (= \"8\" (re-matches (re-pattern date-parser/month) \"8\"))))\r\n    (testing \"un-padded 9\"\r\n      (is (= \"9\" (re-matches (re-pattern date-parser/month) \"9\"))))\r\n    (testing \"un-padded 10\"\r\n      (is (= \"10\" (re-matches (re-pattern date-parser/month) \"10\"))))\r\n    (testing \"un-padded 11\"\r\n      (is (= \"11\" (re-matches (re-pattern date-parser/month) \"11\"))))\r\n    (testing \"un-padded 12\"\r\n      (is (= \"12\" (re-matches (re-pattern date-parser/month) \"12\"))))\r\n    (testing \"un-padded 1\"\r\n      (is (= \"1\" (re-matches (re-pattern date-parser/month) \"1\"))))\r\n    (testing \"padded 02\"\r\n      (is (= \"02\" (re-matches (re-pattern date-parser/month) \"02\"))))\r\n    (testing \"padded 03\"\r\n      (is (= \"03\" (re-matches (re-pattern date-parser/month) \"03\"))))\r\n    (testing \"padded 04\"\r\n      (is (= \"04\" (re-matches (re-pattern date-parser/month) \"04\"))))\r\n    (testing \"padded 05\"\r\n      (is (= \"05\" (re-matches (re-pattern date-parser/month) \"05\"))))\r\n    (testing \"padded 06\"\r\n      (is (= \"06\" (re-matches (re-pattern date-parser/month) \"06\"))))\r\n    (testing \"padded 07\"\r\n      (is (= \"07\" (re-matches (re-pattern date-parser/month) \"07\"))))\r\n    (testing \"padded 08\"\r\n      (is (= \"08\" (re-matches (re-pattern date-parser/month) \"08\"))))\r\n    (testing \"padded 09\"\r\n      (is (= \"09\" (re-matches (re-pattern date-parser/month) \"09\")))))\r\n  (testing \"numeric pattern for month doesn't match\"\r\n    (testing \"too few digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"\"))))\r\n    (testing \"too many digits\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"111\"))))\r\n    (testing \"one letter\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"a\"))))\r\n    (testing \"two letters\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"bb\"))))\r\n    (testing \"short month name\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"Jan\"))))\r\n    (testing \"long month name\"\r\n      (is (nil? (re-matches (re-pattern date-parser/month) \"January\"))))))\r\n\r\n(deftest ^{:task 1} year-test\r\n  (testing \"numeric pattern for year\"\r\n    (testing \"matches 4 digits\"\r\n      (is (= \"1970\" (re-matches (re-pattern date-parser/year) \"1970\"))))\r\n    (testing \"doesn't match short year\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"84\"))))\r\n    (testing \"doesn't match letters\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"198A\"))))\r\n    (testing \"doesn't match too few\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"198\"))))\r\n    (testing \"doesn't match too many\"\r\n      (is (nil? (re-matches (re-pattern date-parser/year) \"19701\"))))))\r\n\r\n(deftest ^{:task 2} day-names-test\r\n  (testing \"day names match\"\r\n    (is (= \"Sunday\" (date-parser/day-names \"Sunday\")))\r\n    (is (= \"Monday\" (date-parser/day-names \"Monday\")))\r\n    (is (= \"Tuesday\" (date-parser/day-names \"Tuesday\")))\r\n    (is (= \"Wednesday\" (date-parser/day-names \"Wednesday\")))\r\n    (is (= \"Thursday\" (date-parser/day-names \"Thursday\")))\r\n    (is (= \"Friday\" (date-parser/day-names \"Friday\")))\r\n    (is (= \"Saturday\" (date-parser/day-names \"Saturday\"))))\r\n  (testing \"day names don't match\"\r\n    (testing \"combined\"\r\n      (is (nil? (date-parser/day-names \"SundayMonday\"))))\r\n    (testing \"short name\"\r\n      (is (nil? (date-parser/day-names \"Sun\"))))\r\n    (testing \"numeric day of the week (0-indexed)\"\r\n      (is (nil? (date-parser/day-names \"0\"))))\r\n    (testing \"numeric day of the week (1-indexed)\"\r\n      (is (nil? (date-parser/day-names \"1\"))))))\r\n\r\n(deftest ^{:task 2} month-names-test\r\n  (testing \"month names match\"\r\n    (is (= \"January\" (date-parser/month-names \"January\")))\r\n    (is (= \"February\" (date-parser/month-names \"February\")))\r\n    (is (= \"March\" (date-parser/month-names \"March\")))\r\n    (is (= \"April\" (date-parser/month-names \"April\")))\r\n    (is (= \"May\" (date-parser/month-names \"May\")))\r\n    (is (= \"June\" (date-parser/month-names \"June\")))\r\n    (is (= \"July\" (date-parser/month-names \"July\")))\r\n    (is (= \"August\" (date-parser/month-names \"August\")))\r\n    (is (= \"September\" (date-parser/month-names \"September\")))\r\n    (is (= \"October\" (date-parser/month-names \"October\")))\r\n    (is (= \"November\" (date-parser/month-names \"November\")))\r\n    (is (= \"December\" (date-parser/month-names \"December\"))))\r\n  (testing \"month names don't match\"\r\n    (testing \"combined\"\r\n      (is (nil? (date-parser/month-names \"JanuaryFebruary\"))))\r\n    (testing \"short name\"\r\n      (is (nil? (date-parser/month-names \"Jan\"))))\r\n    (testing \"numeric month of the year (0-indexed)\"\r\n      (is (nil? (date-parser/month-names \"0\"))))\r\n    (testing \"numeric month of the year (1-indexed)\"\r\n      (is (nil? (date-parser/month-names \"1\"))))))\r\n\r\n(deftest ^{:task 3} capture-test\r\n  (testing \"capture numeric month\"\r\n    (is (= {:month \"01\"} (date-parser/capture-month \"01\"))))\r\n  (testing \"capture numeric day\"\r\n    (is (= {:day \"01\"} (date-parser/capture-day \"01\"))))\r\n  (testing \"capture numeric year\"\r\n    (is (= {:year \"1970\"} (date-parser/capture-year \"1970\"))))\r\n  (testing \"capture day name\"\r\n    (is (= {:day-name \"Monday\"} (date-parser/capture-day-name \"Monday\"))))\r\n  (testing \"capture month name\"\r\n    (is (= {:month-name \"February\"} (date-parser/capture-month-name \"February\")))))\r\n\r\n(deftest ^{:task 4} combined-capture-test\r\n  (testing \"numeric date\"\r\n    (is (= {:year \"1970\", :month \"02\", :day \"01\"} (date-parser/capture-numeric-date \"01/02/1970\"))))\r\n  (testing \"month named date\"\r\n    (is (= {:year \"1970\", :month-name \"January\", :day \"1\"} (date-parser/capture-month-name-date \"January 1, 1970\"))))\r\n  (testing \"day and month named date\"\r\n    (is (= {:year \"1970\", :month-name \"January\", :day \"1\", :day-name \"Thursday\"}\r\n           (date-parser/capture-day-month-name-date \"Thursday, January 1, 1970\")))))\r\n",
    "octal_test" : "(ns octal-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [octal :refer [to-decimal]]))\r\n\r\n(deftest octal-1-is-decimal-1\r\n  (testing \"1 should still be 1\"\r\n    (is (= 1 (to-decimal \"1\")))))\r\n\r\n(deftest octal-2-is-decimal-2\r\n  (testing \"2 should still be 2\"\r\n    (is (= 2 (to-decimal \"2\")))))\r\n\r\n(deftest octal-10-is-decimal-8\r\n  (testing \"10 should be 8\"\r\n    (is (= 8 (to-decimal \"10\")))))\r\n\r\n(deftest octal-11-is-decimal-9\r\n  (testing \"11 should be 9\"\r\n    (is (= 9 (to-decimal \"11\")))))\r\n\r\n(deftest octal-17-is-decimal-15\r\n  (testing \"17 should be 15\"\r\n    (is (= 15 (to-decimal \"17\")))))\r\n\r\n(deftest octal-130-is-decimal-88\r\n  (testing \"130 should be 88\"\r\n    (is (= 88 (to-decimal \"130\")))))\r\n\r\n(deftest octal-2047-is-decimal-1063\r\n  (testing \"2047 should be 1063\"\r\n    (is (= 1063 (to-decimal \"2047\")))))\r\n\r\n(deftest octal-7777-is-decimal-4095\r\n  (testing \"7777 should be 4095\"\r\n    (is (= 4095 (to-decimal \"7777\")))))\r\n\r\n(deftest octal-1234567-is-decimal-342391\r\n  (testing \"1234567 should be 342391\"\r\n    (is (= 342391 (to-decimal \"1234567\")))))\r\n\r\n(deftest invalid-input-is-decimal-0\r\n  (testing \"carrot should be invalid\"\r\n    (is (= 0 (to-decimal \"carrot\")))))\r\n\r\n(deftest eight-is-invalid-input-decimal-0\r\n  (testing \"8 should be invalid and return 0\"\r\n    (is (= 0 (to-decimal \"8\")))))\r\n\r\n(deftest nine-is-invalid-input-decimal-0\r\n  (testing \"9 should be invalid and return 0\"\r\n    (is (= 0 (to-decimal \"9\")))))\r\n\r\n(deftest invalid-input-6789-is-decimal-0\r\n  (testing \"6789 should be invalid and return 0\"\r\n    (is (= 0 (to-decimal \"6789\")))))\r\n\r\n(deftest invalid-input-with-digits-is-decimal-0\r\n  (testing \"abc1z should be 0\"\r\n    (is (= 0 (to-decimal \"abc1z\")))))\r\n\r\n(deftest leading-zero-is-okay\r\n  (testing \"Leading zero should be valid octal\"\r\n    (is (= 9 (to-decimal \"011\")))))",
    "kindergarten_garden_test" : "(ns kindergarten-garden-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            kindergarten-garden))\r\n\r\n(deftest garden-test\r\n  (is (= [:radishes :clover :grass :grass]\r\n         (:alice (garden \"RC\\nGG\"))))\r\n  (is (= [:violets :clover :radishes :clover]\r\n         (:alice (garden \"VC\\nRC\")))))\r\n\r\n(deftest small-garden-test\r\n  (let [small-garden (garden \"VVCG\\nVVRC\")]\r\n    (is (= [:clover :grass :radishes :clover] (:bob small-garden)))))\r\n\r\n(deftest medium-garden-test\r\n  (let [medium-garden (garden \"VVCCGG\\nVVCCGG\")]\r\n    (is (= [:clover :clover :clover :clover] (:bob medium-garden)))\r\n    (is (= [:grass :grass :grass :grass] (:charlie medium-garden)))))\r\n\r\n(deftest full-garden-test\r\n  (let [string \"VRCGVVRVCGGCCGVRGCVCGCGV\\nVRCCCGCRRGVCGCRVVCVGCGCV\"\r\n        full-garden (garden string)]\r\n    (is (= [:violets  :radishes :violets  :radishes] (:alice   full-garden)))\r\n    (is (= [:clover   :grass    :clover   :clover]   (:bob     full-garden)))\r\n    (is (= [:violets  :violets  :clover   :grass]    (:charlie full-garden)))\r\n    (is (= [:radishes :violets  :clover   :radishes] (:david   full-garden)))\r\n    (is (= [:clover   :grass    :radishes :grass]    (:eve     full-garden)))\r\n    (is (= [:grass    :clover   :violets  :clover]   (:fred    full-garden)))\r\n    (is (= [:clover   :grass    :grass    :clover]   (:ginny   full-garden)))\r\n    (is (= [:violets  :radishes :radishes :violets]  (:harriet full-garden)))\r\n    (is (= [:grass    :clover   :violets  :clover]   (:ileana  full-garden)))\r\n    (is (= [:violets  :clover   :violets  :grass]    (:joseph  full-garden)))\r\n    (is (= [:grass    :clover   :clover   :grass]    (:kincaid full-garden)))\r\n    (is (= [:grass    :violets  :clover   :violets]  (:larry   full-garden)))))\r\n\r\n(deftest surprise-garden-test\r\n  (let [string   \"VCRRGVRG\\nRVGCCGCV\"\r\n        students [\"Samantha\" \"Patricia\" \"Xander\" \"Roger\"]\r\n        surprise-garden (garden string students)]\r\n    (is (= [:violets  :clover   :radishes :violets]\r\n           (:patricia surprise-garden)))\r\n    (is (= [:radishes :radishes :grass    :clover]\r\n           (:roger    surprise-garden)))\r\n    (is (= [:grass    :violets  :clover   :grass]\r\n           (:samantha surprise-garden)))\r\n    (is (= [:radishes :grass    :clover   :violets]\r\n           (:xander   surprise-garden)))))\r\n",
    "run_length_encoding_test" : "(ns run-length-encoding-test\r\n  (:require [clojure.test :refer :all]\r\n            [run-length-encoding :as rle]))\r\n\r\n;;Tests for run-length-encoding exercise\r\n\r\n(deftest encode-empty-string\r\n  (testing \"encode an empty string\"\r\n    (is (= (run-length-encode \"\") \"\"))))\r\n\r\n(deftest encode-single-characters-without-count\r\n  (testing \"encode single characters without count\"\r\n    (is (= (run-length-encode \"XYZ\") \"XYZ\"))))\r\n\r\n(deftest encode-string-with-no-single-characters\r\n  (testing \"encode string with no single characters\"\r\n    (is (= (run-length-encode \"AABBBCCCC\") \"2A3B4C\"))))\r\n\r\n(deftest encode-string-with-single-and-mixed-characters\r\n  (testing \"encode string with single and mixed characters\"\r\n    (is (= (run-length-encode \"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\") \"12WB12W3B24WB\"))))\r\n\r\n(deftest encode-multiple-whitespace\r\n  (testing \"encode string with whitespace characters mixed in it\"\r\n    (is (= (run-length-encode \"  hsqq qww  \") \"2 hs2q q2w2 \"))))\r\n\r\n(deftest encode-lowercase\r\n  (testing \"encode string with lowercase characters\"\r\n    (is (= (run-length-encode \"aabbbcccc\") \"2a3b4c\"))))\r\n\r\n(deftest decode-empty-string\r\n  (testing \"decode empty string\"\r\n    (is (= (run-length-decode \"\") \"\"))))\r\n\r\n(deftest decode-single-characters\r\n  (testing \"decode string with single characters only\"\r\n    (is (= (run-length-decode \"XYZ\") \"XYZ\"))))\r\n\r\n(deftest decode-no-single-characters\r\n  (testing \"decode string with no single characters\"\r\n    (is (= (run-length-decode \"2A3B4C\") \"AABBBCCCC\"))))\r\n\r\n(deftest decode-single-and-repeated-characters\r\n  (testing \"decode string with single and repeated characters\"\r\n    (is (= (run-length-decode \"12WB12W3B24WB\") \"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\"))))\r\n\r\n(deftest decode-lowercase\r\n  (testing \"decode string with lowercase characters\"\r\n    (is (= (run-length-decode \"2a3b4c\") \"aabbbcccc\"))))\r\n\r\n(deftest decode-mixed-whitespace\r\n  (testing \"decode string with mixed whitespace characters in it\"\r\n    (is (= (run-length-decode \"2 hs2q q2w2 \") \"  hsqq qww  \"))))\r\n\r\n(deftest consistency\r\n  (testing \"Encode a string and then decode it. Should return the same one.\"\r\n    (is (= (run-length-decode (run-length-encode \"zzz ZZ  zZ\")) \"zzz ZZ  zZ\"))))\r\n",
    "international_calling_connoisseur_test" : "(ns international-calling-connoisseur-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            international-calling-connoisseur))\r\n\r\n(deftest ^{:task 1} map-count-is-3\r\n  (is (= 3 (count international-calling-connoisseur/countries))))\r\n\r\n(deftest ^{:task 1} United-States-of-America-is-1\r\n  (is (= \"United States of America\" (get international-calling-connoisseur/countries 1))))\r\n\r\n(deftest ^{:task 1} Brazil-is-55\r\n  (is (= \"Brazil\" (get international-calling-connoisseur/countries 55))))\r\n\r\n(deftest ^{:task 1} India-is-55\r\n  (is (= \"India\" (get international-calling-connoisseur/countries 91))))\r\n\r\n(deftest ^{:task 2} add-country-to-empty-map-single\r\n  (is (= 1 (count (international-calling-connoisseur/add-country {} 44 \"United Kingdom\")))))\r\n\r\n(deftest ^{:task 2} add-country-to-empty-map-44-is-United-Kingdom\r\n  (is (= \"United Kingdom\" (get (international-calling-connoisseur/add-country {} 44 \"United Kingdom\") 44))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-count-is-4\r\n  (is (= 4 (count (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\")))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 1))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-44-is-United-Kingdom\r\n  (is (= \"United Kingdom\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 44))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 55))))\r\n\r\n(deftest ^{:task 2} add-country-to-country-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/add-country international-calling-connoisseur/countries 44 \"United Kingdom\") 91))))\r\n\r\n(deftest ^{:task 3} get-country-name-from-map\r\n  (is (= \"Brazil\" (international-calling-connoisseur/country-name international-calling-connoisseur/countries 55))))\r\n\r\n(deftest ^{:task 3} get-country-name-for-non-existent-country\r\n  (is (nil? (international-calling-connoisseur/country-name international-calling-connoisseur/countries 999))))\r\n\r\n(deftest ^{:task 5} check-country-exists\r\n  (is (true? (international-calling-connoisseur/code-exists? international-calling-connoisseur/countries 55))))\r\n\r\n(deftest ^{:task 5} check-non-existent-country-exists\r\n  (is (false? (international-calling-connoisseur/code-exists? international-calling-connoisseur/countries 999))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-count-is-3\r\n  (is (= 3 (count (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\")))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-1-is-les-Etats-Unis\r\n  (is (= \"les États-Unis\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\") 1))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\") 55))))\r\n\r\n(deftest ^{:task 4} update-name-in-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 1 \"les États-Unis\") 91))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-count-is-3\r\n  (is (= 3 (count (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\")))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\") 1))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\") 55))))\r\n\r\n(deftest ^{:task 6} update-non-existent-name-in-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/update-country international-calling-connoisseur/countries 999 \"Newlands\") 91))))\r\n\r\n(deftest ^{:task 7} remove-country-from-map-count-is-2\r\n  (is (= 2 (count (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 91)))))\r\n\r\n(deftest ^{:task 7} remove-country-from-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 44) 1))))\r\n\r\n(deftest ^{:task 7} remove-country-from-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 44) 55))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-count-is-3\r\n  (is (= 3 (count (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999)))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-1-is-United-States-of-America\r\n  (is (= \"United States of America\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999) 1))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-55-is-Brazil\r\n  (is (= \"Brazil\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999) 55))))\r\n\r\n(deftest ^{:task 7} remove-non-existent-country-from-map-91-is-India\r\n  (is (= \"India\" (get (international-calling-connoisseur/remove-country international-calling-connoisseur/countries 999) 91))))\r\n\r\n(deftest ^{:task 8} longest-name\r\n  (is (= \"United States of America\" (international-calling-connoisseur/longest-name international-calling-connoisseur/countries))))\r\n\r\n(deftest ^{:task 8} longest-name-empty-map\r\n  (is (nil? (international-calling-connoisseur/longest-name {}))))",
    "prime_factors_test" : "(ns prime-factors-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            prime-factors))\r\n\r\n(deftest one\r\n  (is (= [] (of 1))))\r\n\r\n(deftest two\r\n  (is (= [2] (of 2))))\r\n\r\n(deftest three\r\n  (is (= [3] (of 3))))\r\n\r\n(deftest four\r\n  (is (= [2, 2] (of 4))))\r\n\r\n(deftest six\r\n  (is (= [2, 3] (of 6))))\r\n\r\n(deftest eight\r\n  (is (= [2, 2, 2] (of 8))))\r\n\r\n(deftest nine\r\n  (is (= [3, 3] (of 9))))\r\n\r\n(deftest twenty-seven\r\n  (is (= [3, 3, 3] (of 27))))\r\n\r\n(deftest six-hundred-twenty-five\r\n  (is (= [5, 5, 5, 5] (of 625))))\r\n\r\n#_(deftest a-large-number\r\n  (is (= [5, 17, 23, 461] (of 901255))))\r\n\r\n#_(deftest a-huge-number\r\n  (is (= [11, 9539, 894119] (of 93819012551))))\r\n",
    "perfect_numbers_test" : "(ns perfect-numbers-test\r\n  (:require\r\n   [clojure.test :refer [deftest testing is]]\r\n   [perfect-numbers]))\r\n\r\n(deftest test-initialize-perfect-number\r\n  #_(testing \"Negative numbers throw an exception\"\r\n    (is (thrown? IllegalArgumentException (classify -1)))))\r\n\r\n(deftest test-classify-deficient\r\n  (testing \"13 is a deficient number\"\r\n    (is (= :deficient (classify 13)))))\r\n\r\n(deftest test-classify-perfect\r\n  (testing \"28 is a perfect number\"\r\n    (is (= :perfect (classify 28)))))\r\n\r\n(deftest test-classify-abundant\r\n  (testing \"12 is an abundant number\"\r\n    (is (= :abundant (classify 12)))))\r\n",
    "raindrops_test" : "(ns raindrops-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            raindrops))\r\n\r\n(deftest one\r\n  (is (= \"1\" (convert 1))))\r\n\r\n(deftest three\r\n  (is (= \"Pling\" (convert 3))))\r\n\r\n(deftest five\r\n  (is (= \"Plang\" (convert 5))))\r\n\r\n(deftest seven\r\n  (is (= \"Plong\" (convert 7))))\r\n\r\n(deftest six\r\n  (is (= \"Pling\" (convert 6))))\r\n\r\n(deftest nine\r\n  (is (= \"Pling\" (convert 9))))\r\n\r\n(deftest ten\r\n  (is (= \"Plang\" (convert 10))))\r\n\r\n(deftest fourteen\r\n  (is (= \"Plong\" (convert 14))))\r\n\r\n(deftest fifteen\r\n  (is (= \"PlingPlang\" (convert 15))))\r\n\r\n(deftest twenty-one\r\n  (is (= \"PlingPlong\" (convert 21))))\r\n\r\n(deftest twenty-five\r\n  (is (= \"Plang\" (convert 25))))\r\n\r\n(deftest thirty-five\r\n  (is (= \"PlangPlong\" (convert 35))))\r\n\r\n(deftest forty-nine\r\n  (is (= \"Plong\" (convert 49))))\r\n\r\n(deftest fifty-two\r\n  (is (= \"52\" (convert 52))))\r\n\r\n(deftest one-hundred-five\r\n  (is (= \"PlingPlangPlong\" (convert 105))))\r\n\r\n(deftest twelve-thousand-one-hundred-twenty-one\r\n  (is (= \"12121\" (convert 12121))))\r\n",
    "beer_song_test" : "(ns beer-song-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            beer-song))\r\n\r\n(def verse-8\r\n  (str \"8 bottles of beer on the wall, 8 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 7 bottles of beer on the wall.\\n\"))\r\n\r\n(def verse-2\r\n  (str \"2 bottles of beer on the wall, 2 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 1 bottle of beer on the wall.\\n\"))\r\n\r\n(def verse-1\r\n  (str \"1 bottle of beer on the wall, 1 bottle of beer.\\n\"\r\n       \"Take it down and pass it around, no more bottles of beer on the wall.\\n\"))\r\n\r\n(def verse-0\r\n  (str \"No more bottles of beer on the wall, no more bottles of beer.\\n\"\r\n       \"Go to the store and buy some more, 99 bottles of beer on the wall.\\n\"))\r\n\r\n(def song-8-6\r\n  (str \"8 bottles of beer on the wall, 8 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 7 bottles of beer on the wall.\\n\\n\"\r\n       \"7 bottles of beer on the wall, 7 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 6 bottles of beer on the wall.\\n\\n\"\r\n       \"6 bottles of beer on the wall, 6 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 5 bottles of beer on the wall.\\n\"))\r\n\r\n(def song-3-0\r\n  (str \"3 bottles of beer on the wall, 3 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 2 bottles of beer on the wall.\\n\\n\"\r\n       \"2 bottles of beer on the wall, 2 bottles of beer.\\n\"\r\n       \"Take one down and pass it around, 1 bottle of beer on the wall.\\n\\n\"\r\n       \"1 bottle of beer on the wall, 1 bottle of beer.\\n\"\r\n       \"Take it down and pass it around, no more bottles of beer on the wall.\\n\\n\"\r\n       \"No more bottles of beer on the wall, no more bottles of beer.\\n\"\r\n       \"Go to the store and buy some more, 99 bottles of beer on the wall.\\n\"))\r\n\r\n(deftest test-verse-8\r\n  (is (= verse-8 (verse 8))))\r\n\r\n(deftest test-verse-2\r\n  (is (= verse-2 (verse 2))))\r\n\r\n(deftest test-verse-1\r\n  (is (= verse-1 (verse 1))))\r\n\r\n(deftest test-verse-0\r\n  (is (= verse-0 (verse 0))))\r\n\r\n(deftest test-song-8-6\r\n  (is (= song-8-6 (sing 8 6))))\r\n\r\n(deftest test-song-3-0\r\n  (is (= song-3-0 (sing 3))))\r\n",
    "space_age_test" : "(ns space-age-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            space-age))\r\n\r\n(defn rounds-to\r\n  [expected actual]\r\n  (is (= (Math/round (* 100.0 expected))\r\n         (Math/round (* 100.0 actual)))))\r\n\r\n(deftest age-in-earth-years\r\n  (rounds-to 31.69 (on-earth 1000000000)))\r\n\r\n(deftest age-in-mercury-years\r\n  (let [seconds 2134835688]\r\n    (rounds-to 67.65 (on-earth seconds))\r\n    (rounds-to 280.88 (on-mercury seconds))))\r\n\r\n(deftest age-in-venus-years\r\n  (let [seconds 189839836]\r\n    (rounds-to 6.02 (on-earth seconds))\r\n    (rounds-to 9.78 (on-venus seconds))))\r\n\r\n(deftest age-on-mars\r\n  (let [seconds 2329871239]\r\n    (rounds-to 73.83 (on-earth seconds))\r\n    (rounds-to 39.25 (on-mars seconds))))\r\n\r\n(deftest age-on-jupiter\r\n  (let [seconds 901876382]\r\n    (rounds-to 28.58 (on-earth seconds))\r\n    (rounds-to 2.41 (on-jupiter seconds))))\r\n\r\n(deftest age-on-saturn\r\n  (let [seconds 3000000000]\r\n    (rounds-to 95.06 (on-earth seconds))\r\n    (rounds-to 3.23 (on-saturn seconds))))\r\n\r\n(deftest age-on-uranus\r\n  (let [seconds 3210123456]\r\n    (rounds-to 101.72 (on-earth seconds))\r\n    (rounds-to 1.21 (on-uranus seconds))))\r\n\r\n(deftest age-on-neptune\r\n  (let [seconds 8210123456]\r\n    (rounds-to 260.16 (on-earth seconds))\r\n    (rounds-to 1.58 (on-neptune seconds))))\r\n",
    "word_count_test" : "(ns word-count-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            word-count))\r\n\r\n(deftest count-one-word\r\n  (is (= {\"word\" 1}\r\n         (word-count \"word\"))))\r\n\r\n(deftest count-one-of-each\r\n  (is (= {\"one\" 1 \"of\" 1 \"each\" 1}\r\n         (word-count \"one of each\"))))\r\n\r\n(deftest count-multiple-occurrences\r\n  (is (= {\"one\" 1 \"fish\" 4 \"two\" 1 \"red\" 1 \"blue\" 1}\r\n         (word-count \"one fish two fish red fish blue fish\"))))\r\n\r\n(deftest ignore-punctuation\r\n  (is (= {\"car\" 1, \"carpet\" 1 \"as\" 1 \"java\" 1 \"javascript\" 1}\r\n         (word-count \"car : carpet as java : javascript!!&@$%^&\"))))\r\n\r\n(deftest include-numbers\r\n  (is (= {\"testing\" 2 \"1\" 1 \"2\" 1}\r\n         (word-count \"testing, 1, 2 testing\"))))\r\n\r\n(deftest normalize-case\r\n  (is (= {\"go\" 3}\r\n         (word-count \"go Go GO\"))))\r\n",
    "allergies_test" : "(ns allergies-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            allergies))\r\n\r\n(deftest no-allergies-at-all\r\n  (is (= [] (allergies 0))))\r\n\r\n(deftest allergic-to-just-eggs\r\n  (is (= [:eggs] (allergies 1))))\r\n\r\n(deftest allergic-to-just-peanuts\r\n  (is (= [:peanuts] (allergies 2))))\r\n\r\n(deftest allergic-to-just-strawberries\r\n  (is (= [:strawberries] (allergies 8))))\r\n\r\n(deftest allergic-to-eggs-and-peanuts\r\n  (is (= [:eggs :peanuts] (allergies 3))))\r\n\r\n(deftest allergic-to-more-than-eggs-but-not-peanuts\r\n  (is (= [:eggs :shellfish] (allergies 5))))\r\n\r\n(deftest allergic-to-lots-of-stuff\r\n  (is (= [:strawberries :tomatoes :chocolate :pollen :cats]\r\n         (allergies 248))))\r\n\r\n(deftest allergic-to-everything\r\n  (is (= [:eggs :peanuts :shellfish :strawberries\r\n          :tomatoes :chocolate :pollen :cats]\r\n         (allergies 255))))\r\n\r\n(deftest no-allergies-means-not-allergic-peanuts\r\n  (is (not (allergic-to? 0 :peanuts))))\r\n\r\n(deftest no-allergies-means-not-allergic-cats\r\n  (is (not (allergic-to? 0 :cats))))\r\n\r\n(deftest no-allergies-means-not-allergic-strawberries\r\n  (is (not (allergic-to? 0 :strawberries))))\r\n\r\n(deftest is-allergic-to-eggs\r\n  (is (allergic-to? 1 :eggs)))\r\n\r\n(deftest allergic-to-eggs-in-addition-to-other-stuff\r\n  (is (allergic-to? 5 :eggs)))\r\n\r\n(deftest ignore-non-allergen-score-parts\r\n  (is (= [:eggs :shellfish :strawberries :tomatoes :chocolate :pollen :cats]\r\n         (allergies 509))))\r\n",
    "largest_series_product_test" : "(ns largest-series-product-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [largest-series-product :as lsp]))\r\n\r\n(deftest largest-series-tests\r\n  (testing \"can find the largest product of 2 with numbers in order\"\r\n    (is (= 72 (largest-product 2 \"0123456789\"))))\r\n  (testing \"can find the largest product of 2\"\r\n    (is (= 48 (largest-product 2 \"576802143\"))))\r\n  (testing \"finds the largest product if span equals length\"\r\n    (is (= 18 (largest-product 2 \"29\"))))\r\n  (testing \"can find the largest product of 3 with numbers in order\"\r\n    (is (= 504 (largest-product 3 \"0123456789\"))))\r\n  (testing \"can find the largest product of 3\"\r\n    (is (= 270 (largest-product 3 \"1027839564\"))))\r\n  (testing \"can find the largest product of 5 with numbers in order\"\r\n    (is (= 15120 (largest-product 5 \"0123456789\"))))\r\n  #_(testing \"can get the largest product of a big number\"\r\n    (is (= 23520\r\n           (let [ds \"73167176531330624919225119674426574742355349194934\"]\r\n             (largest-product 6 ds)))))\r\n  #_(testing \"can get the largest product of a big number II\"\r\n    (is (= 28350\r\n           (let [ds \"52677741234314237566414902593461595376319419139427\"]\r\n             (largest-product 6 ds)))))\r\n  #_(testing \"can get the largest product of a big number (Project Euler)\"\r\n    (is (= 23514624000\r\n           (let [ds \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\"]\r\n             (largest-product 13 ds)))))\r\n  (testing \"reports zero if the only digits are zero\"\r\n    (is (= 0 (largest-product 2 \"0000\"))))\r\n  (testing \"reports zero if all spans include zero\"\r\n    (is (= 0 (largest-product 3 \"99099\"))))\r\n  (testing \"rejects span longer than string length\"\r\n    #_(is (thrown? (largest-product 4 \"123\"))))\r\n  (testing \"rejects empty string and nonzero span\"\r\n    #_(is (thrown? (largest-product 1 \"\"))))\r\n  (testing \"rejects invalid character in digits\"\r\n    #_(is (thrown? (largest-product 2 \"1234a5\"))))\r\n  (testing \"rejects negative span\"\r\n    #_(is (thrown? (largest-product -1 \"12345\")))))\r\n",
    "poker_test" : "(ns poker-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [poker :refer [best-hands]]))\r\n\r\n(defn f [xs ys] (= (sort (best-hands xs)) (sort ys)))\r\n\r\n(deftest single-hand-always-wins\r\n  (is (f [\"4S 5S 7H 8D JC\"] [\"4S 5S 7H 8D JC\"])))\r\n\r\n(deftest highest-card-out-of-all-hands-wins\r\n  (is (f [\"4D 5S 6S 8D 3C\"\r\n          \"2S 4C 7S 9H 10H\"\r\n          \"3S 4S 5D 6H JH\"]\r\n         [\"3S 4S 5D 6H JH\"])))\r\n\r\n(deftest a-tie-has-multiple-winners\r\n  (is (f [\"4D 5S 6S 8D 3C\"\r\n          \"2S 4C 7S 9H 10H\"\r\n          \"3S 4S 5D 6H JH\"\r\n          \"3H 4H 5C 6C JD\"]\r\n         [\"3S 4S 5D 6H JH\"\r\n          \"3H 4H 5C 6C JD\"])))\r\n\r\n(deftest multiple-hands-with-the-same-high-cards-tie-compares-next-highest-ranked-down-to-last-card\r\n  (is (f [\"3S 5H 6S 8D 7H\"\r\n          \"2S 5D 6D 8C 7S\"]\r\n         [\"3S 5H 6S 8D 7H\"])))\r\n\r\n(deftest one-pair-beats-high-card\r\n  (is (f [\"4S 5H 6C 8D KH\"\r\n          \"2S 4H 6S 4D JH\"]\r\n         [\"2S 4H 6S 4D JH\"])))\r\n\r\n(deftest highest-pair-wins\r\n  (is (f [\"4S 2H 6S 2D JH\"\r\n          \"2S 4H 6C 4D JD\"]\r\n         [\"2S 4H 6C 4D JD\"])))\r\n\r\n(deftest two-pairs-beats-one-pair\r\n  (is (f [\"2S 8H 6S 8D JH\"\r\n          \"4S 5H 4C 8C 5C\"]\r\n         [\"4S 5H 4C 8C 5C\"])))\r\n\r\n(deftest both-hands-have-two-pairs-highest-ranked-pair-wins\r\n  (is (f [\"2S 8H 2D 8D 3H\"\r\n          \"4S 5H 4C 8S 5D\"]\r\n         [\"2S 8H 2D 8D 3H\"])))\r\n\r\n(deftest both-hands-have-two-pairs-with-the-same-highest-ranked-pair-tie-goes-to-low-pair\r\n  (is (f [\"2S QS 2C QD JH\"\r\n          \"JD QH JS 8D QC\"]\r\n         [\"JD QH JS 8D QC\"])))\r\n\r\n(deftest both-hands-have-two-identically-ranked-pairs-tie-goes-to-remaining-card-kicker\r\n  (is (f [\"JD QH JS 8D QC\"\r\n          \"JS QS JC 2D QD\"]\r\n         [\"JD QH JS 8D QC\"])))\r\n\r\n(deftest three-of-a-kind-beats-two-pair\r\n  (is (f [\"2S 8H 2H 8D JH\"\r\n          \"4S 5H 4C 8S 4H\"]\r\n         [\"4S 5H 4C 8S 4H\"])))\r\n\r\n(deftest both-hands-have-three-of-a-kind-tie-goes-to-highest-ranked-triplet\r\n  (is (f [\"2S 2H 2C 8D JH\"\r\n          \"4S AH AS 8C AD\"]\r\n         [\"4S AH AS 8C AD\"])))\r\n\r\n(deftest with-multiple-decks-two-players-can-have-same-three-of-a-kind-ties-go-to-highest-remaining-cards\r\n  (is (f [\"4S AH AS 7C AD\"\r\n          \"4S AH AS 8C AD\"]\r\n         [\"4S AH AS 8C AD\"])))\r\n\r\n(deftest a-straight-beats-three-of-a-kind\r\n  (is (f [\"4S 5H 4C 8D 4H\"\r\n          \"3S 4D 2S 6D 5C\"]\r\n         [\"3S 4D 2S 6D 5C\"])))\r\n\r\n(deftest aces-can-end-a-straight-10-J-Q-K-A\r\n  (is (f [\"4S 5H 4C 8D 4H\"\r\n          \"10D JH QS KD AC\"]\r\n         [\"10D JH QS KD AC\"])))\r\n\r\n(deftest aces-can-start-a-straight-A-2-3-4-5\r\n  (is (f [\"4S 5H 4C 8D 4H\"\r\n          \"4D AH 3S 2D 5C\"]\r\n         [\"4D AH 3S 2D 5C\"])))\r\n\r\n(deftest both-hands-with-a-straight-tie-goes-to-highest-ranked-card\r\n  (is (f [\"4S 6C 7S 8D 5H\"\r\n          \"5S 7H 8S 9D 6H\"]\r\n         [\"5S 7H 8S 9D 6H\"])))\r\n\r\n(deftest even-though-an-ace-is-usually-high-a-5-high-straight-is-the-lowest-scoring-straight\r\n  (is (f [\"2H 3C 4D 5D 6H\"\r\n          \"4S AH 3S 2D 5H\"]\r\n         [\"2H 3C 4D 5D 6H\"])))\r\n\r\n(deftest flush-beats-a-straight\r\n  (is (f [\"4C 6H 7D 8D 5H\"\r\n          \"2S 4S 5S 6S 7S\"]\r\n         [\"2S 4S 5S 6S 7S\"])))\r\n\r\n(deftest both-hands-have-a-flush-tie-goes-to-high-card-down-to-the-last-one-if-necessary\r\n  (is (f [\"4H 7H 8H 9H 6H\"\r\n          \"2S 4S 5S 6S 7S\"]\r\n         [\"4H 7H 8H 9H 6H\"])))\r\n\r\n(deftest full-house-beats-a-flush\r\n  (is (f [\"3H 6H 7H 8H 5H\"\r\n          \"4S 5H 4C 5D 4H\"]\r\n         [\"4S 5H 4C 5D 4H\"])))\r\n\r\n(deftest both-hands-have-a-full-house-tie-goes-to-highest-ranked-triplet\r\n  (is (f [\"4H 4S 4D 9S 9D\"\r\n          \"5H 5S 5D 8S 8D\"]\r\n         [\"5H 5S 5D 8S 8D\"])))\r\n\r\n(deftest with-multiple-decks-both-hands-have-a-full-house-with-the-same-triplet-tie-goes-to-the-pair\r\n  (is (f [\"5H 5S 5D 9S 9D\"\r\n          \"5H 5S 5D 8S 8D\"]\r\n         [\"5H 5S 5D 9S 9D\"])))\r\n\r\n(deftest four-of-a-kind-beats-a-full-house\r\n  (is (f [\"4S 5H 4D 5D 4H\"\r\n          \"3S 3H 2S 3D 3C\"]\r\n         [\"3S 3H 2S 3D 3C\"])))\r\n\r\n(deftest both-hands-have-four-of-a-kind-tie-goes-to-high-quad\r\n  (is (f [\"2S 2H 2C 8D 2D\"\r\n          \"4S 5H 5S 5D 5C\"]\r\n         [\"4S 5H 5S 5D 5C\"])))\r\n\r\n(deftest with-multiple-decks-both-hands-with-identical-four-of-a-kind-tie-determined-by-kicker\r\n  (is (f [\"3S 3H 2S 3D 3C\"\r\n          \"3S 3H 4S 3D 3C\"]\r\n         [\"3S 3H 4S 3D 3C\"])))\r\n\r\n(deftest straight-flush-beats-four-of-a-kind\r\n  (is (f [\"4S 5H 5S 5D 5C\"\r\n          \"7S 8S 9S 6S 10S\"]\r\n         [\"7S 8S 9S 6S 10S\"])))\r\n\r\n(deftest both-hands-have-straight-flush-tie-goes-to-highest-ranked-card\r\n  (is (f [\"4H 6H 7H 8H 5H\"\r\n          \"5S 7S 8S 9S 6S\"]\r\n         [\"5S 7S 8S 9S 6S\"])))\r\n",
    "triangle_test" : "(ns triangle-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            triangle))\r\n\r\n(deftest equilateral-all-sides-equal\r\n      (is (true? (equilateral? 2 2 2))))\r\n\r\n(deftest equilateral-any-side-is-unequal\r\n      (is (false? (equilateral? 2 3 2))))\r\n\r\n(deftest equilateral-no-sides-are-equal\r\n      (is (false? (equilateral? 5 4 6))))\r\n\r\n(deftest equilateral-all-zero-sides\r\n      (is (false? (equilateral? 0 0 0))))\r\n\r\n(deftest equilateral-sides-may-be-floats\r\n      (is (true? (equilateral? 0.5 0.5 0.5))))\r\n\r\n(deftest isosceles-last-two-sides-equal\r\n      (is (true? (isosceles? 3 4 4))))\r\n\r\n(deftest isosceles-first-two-sides-equal\r\n      (is (true? (isosceles? 4 4 3))))\r\n\r\n(deftest isosceles-first-last-sides-equal\r\n      (is (true? (isosceles? 4 3 4))))\r\n\r\n(deftest isosceles-equilateral-triangles-also-isosceles\r\n      (is (true? (isosceles? 4 4 4))))\r\n\r\n(deftest isosceles-no-sides-equal\r\n      (is (false? (isosceles? 2 3 4))))\r\n\r\n(deftest isosceles-first-triangle-inequality-violation\r\n      (is (false? (isosceles? 1 1 3))))\r\n\r\n(deftest isosceles-second-triangle-inequality-violation\r\n      (is (false? (isosceles? 1 3 1))))\r\n\r\n(deftest isosceles-third-triangle-inequality-violation\r\n      (is (false? (isosceles? 3 1 1))))\r\n\r\n(deftest isosceles-sides-may-be-floats\r\n      (is (true? (isosceles? 0.5 0.4 0.5))))\r\n\r\n(deftest scalene-no-sides-are-equal\r\n      (is (true? (scalene? 5 4 6))))\r\n\r\n(deftest scalene-all-sides-equal\r\n      (is (false? (scalene? 4 4 4))))\r\n\r\n(deftest scalene-two-sides-equal\r\n      (is (false? (scalene? 4 4 3))))\r\n\r\n(deftest scalene-may-not-violate-triangle-inequality\r\n      (is (false? (scalene? 7 3 2))))\r\n\r\n(deftest scalene-sides-may-be-floats\r\n      (is (true? (scalene? 0.5 0.4 0.6))))\r\n",
    "phone_number_test" : "(ns phone-number-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            phone-number))\r\n\r\n(deftest cleans-number\r\n  (is (= \"2234567890\" (number \"(223) 456-7890\"))))\r\n\r\n(deftest cleans-number-with-dots\r\n  (is (= \"5558675309\" (number \"555.867.5309\"))))\r\n\r\n(deftest valid-when-11-digits-and-first-is-1\r\n  (is (= \"9876543210\" (number \"19876543210\"))))\r\n\r\n(deftest invalid-when-area-code-starts-with-0\r\n  (is (= \"0000000000\" (number \"0234567890\"))))\r\n\r\n(deftest invalid-when-area-code-starts-with-1\r\n  (is (= \"0000000000\" (number \"1234567890\"))))\r\n\r\n(deftest invalid-when--code-starts-with-0\r\n  (is (= \"0000000000\" (number \"0234567890\"))))\r\n\r\n(deftest invalid-when-exchange-code-starts-with-1\r\n  (is (= \"0000000000\" (number \"2231567890\"))))\r\n\r\n(deftest invalid-when-exchange-code-starts-with-0\r\n  (is (= \"0000000000\" (number \"2230567890\"))))\r\n\r\n(deftest invalid-when-11-digits\r\n  (is (= \"0000000000\" (number \"22234567890\"))))\r\n\r\n(deftest invalid-when-9-digits\r\n  (is (= \"0000000000\" (number \"123456789\"))))\r\n\r\n(deftest area-code-test\r\n  (is (= \"223\" (area-code \"2234567890\"))))\r\n\r\n(deftest area-code-with-dots\r\n  (is (= \"555\" (area-code \"555.867.5309\"))))\r\n\r\n(deftest area-code-with-parentheses\r\n  (is (= \"987\" (area-code \"(987) 654-3210\"))))\r\n\r\n(deftest area-code-with-full-us-phone-number\r\n  (is (= \"223\" (area-code \"12234567890\"))))\r\n\r\n(deftest pretty-print-test\r\n  (is (= \"(223) 456-7890\" (pretty-print \"2234567890\"))))\r\n\r\n(deftest pretty-print-with-dots\r\n  (is (= \"(555) 867-5309\" (pretty-print \"555.867.5309\"))))\r\n\r\n(deftest pretty-print-with-full-us-phone-number\r\n  (is (= \"(987) 654-3210\" (pretty-print \"19876543210\"))))\r\n",
    "rna_transcription_test" : "(ns rna-transcription-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            rna-transcription))\r\n\r\n(deftest transcribes-cytosine-to-guanine\r\n  (is (= \"G\" (to-rna \"C\"))))\r\n\r\n(deftest transcribes-guanine-to-cytosine\r\n  (is (= \"C\" (to-rna \"G\"))))\r\n\r\n(deftest transcribes-adenine-to-uracil\r\n  (is (= \"U\" (to-rna \"A\"))))\r\n\r\n(deftest it-transcribes-thymine-to-adenine\r\n  (is (= \"A\" (to-rna \"T\"))))\r\n\r\n(deftest it-transcribes-all-nucleotides\r\n  (is (= \"UGCACCAGAAUU\" (to-rna \"ACGTGGTCTTAA\"))))\r\n\r\n",
    "minesweeper_test" : "(ns minesweeper-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [clojure.string :refer [join]]\r\n            [minesweeper :refer [draw]]))\r\n\r\n(def line-separator \"\\n\")\r\n\r\n(deftest zero-size-board\r\n  (is (= (draw \"\") \"\")))\r\n\r\n(deftest empty-board\r\n  (is (= (draw (join line-separator [\"   \"\r\n                                     \"   \"\r\n                                     \"   \"]))\r\n         (join line-separator [\"   \"\r\n                               \"   \"\r\n                               \"   \"]))))\r\n\r\n(deftest surrounded\r\n  (is (= (draw (join line-separator [\"***\"\r\n                                     \"* *\"\r\n                                     \"***\"]))\r\n         (join line-separator [\"***\"\r\n                               \"*8*\"\r\n                               \"***\"]))))\r\n\r\n(deftest board-full-of-mines\r\n  (is (= (draw (join line-separator [\"***\"\r\n                                     \"***\"\r\n                                     \"***\"]))\r\n         (join line-separator [\"***\"\r\n                               \"***\"\r\n                               \"***\"]))))\r\n\r\n(deftest horizontal-line\r\n  (is (= (draw \" * * \")\r\n         \"1*2*1\")))\r\n\r\n(deftest vertical-line\r\n  (is (= (draw (join line-separator [\" \"\r\n                                     \"*\"\r\n                                     \" \"\r\n                                     \"*\"\r\n                                     \" \"]))\r\n         (join line-separator [\"1\"\r\n                               \"*\"\r\n                               \"2\"\r\n                               \"*\"\r\n                               \"1\"]))))\r\n\r\n(deftest cross\r\n  (is (= (draw (join line-separator [\"  *  \"\r\n                                     \"  *  \"\r\n                                     \"*****\"\r\n                                     \"  *  \"\r\n                                     \"  *  \"]))\r\n         (join line-separator [\" 2*2 \"\r\n                               \"25*52\"\r\n                               \"*****\"\r\n                               \"25*52\"\r\n                               \" 2*2 \"]))))\r\n\r\n",
    "luhn_test" : "(ns luhn-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            luhn))\r\n\r\n(deftest single-digit-strings\r\n    (is (false? (valid? \"1\"))))\r\n\r\n(deftest single-zero\r\n    (is (false? (valid? \"0\"))))\r\n\r\n(deftest sin\r\n    (is (true? (valid? \" 5 9 \"))))\r\n\r\n(deftest Canadian-SIN\r\n    (is (true? (valid? \"046 454 286\"))))\r\n\r\n(deftest invalid-Canadian-SIN\r\n    (is (false? (valid? \"046 454 287\"))))\r\n\r\n(deftest invalid-credit-card\r\n    (is (false? (valid? \"8273 1232 7352 0569\"))))\r\n\r\n(deftest non-digit-added\r\n    (is (false? (valid? \"046a 454 286\"))))\r\n\r\n(deftest punctuation\r\n    (is (false? (valid? \"055-444-285\"))))\r\n\r\n(deftest symbols\r\n    (is (false? (valid? \"055£ 444$ 285\"))))\r\n\r\n(deftest single-zero-with-space\r\n    (is (false? (valid? \" 0\"))))\r\n\r\n(deftest lots-of-zeros\r\n    (is (true? (valid? \" 00000\"))))\r\n\r\n(deftest another-valid-sin\r\n    (is (true? (valid? \"055 444 285\"))))\r\n\r\n(deftest nine-doubled\r\n    (is (true? (valid? \"091\"))))\r\n",
    "matching_brackets_test" : "(ns matching-brackets-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            matching-brackets))\r\n\r\n(deftest paired-square\r\n  (is (valid? \"[]\") \"paired square brackets\"))\r\n\r\n(deftest empty-string\r\n  (is (valid? \"\") \"empty string\"))\r\n\r\n(deftest unpaired-brackets\r\n  (is (false? (valid? \"[[\")) \"unpaired brackets\"))\r\n\r\n(deftest wrong-ordered-brackets\r\n  (is (false? (valid? \"}{\")) \"wrong ordered brackets\"))\r\n\r\n(deftest paired-with-whitespace\r\n  (is (valid? \"{ }\") \"paired with whitespace\"))\r\n\r\n(deftest simple-nested-brackets\r\n  (is (valid? \"{[]}\")\r\n      \"simple nested brackets\"))\r\n\r\n(deftest several-paired-brackets\r\n  (is (valid? \"{}[]\")\r\n      \"several paired brackets\"))\r\n\r\n(deftest paired-and-nested-brackets\r\n  (is (valid? \"([{}({}[])])\")\r\n      \"paired and nested brackets\"))\r\n\r\n(deftest unopened-closing-brackets\r\n  (is (false? (valid? \"{[)][]}\"))\r\n      \"unopened closing brackets\"))\r\n \r\n(deftest unpaired-and-nested-brackets\r\n  (is (false? (valid? \"([{])\"))\r\n      \"unpaired and nested brackets\"))\r\n\r\n(deftest paired-and-wrong-nested-brackets\r\n  (is (false? (valid? \"[({]})\"))\r\n      \"paired and wrong nested brackets\"))\r\n\r\n(deftest math-expression\r\n  (is (valid? \"(((185 + 223.85) * 15) - 543)/2\")\r\n      \"math expression\"))\r\n\r\n(deftest complex-latex-expression\r\n  (is (valid? \"\\\\\\\\left(\\\\\\\\begin{array}{cc} \\\\\\\\frac{1}{3} & x\\\\\\\\\\\\\\\\ \\\\\\\\mathrm{e}^{x} &... x^2 \\\\\\\\end{array}\\\\\\\\right)\")\r\n      \"complex latex expression\"))\r\n",
    "anagram2_test" : "(ns anagram-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            anagram))\r\n\r\n(deftest no-matches\r\n  (is (= []\r\n         (anagrams-for \"diaper\" [\"hello\" \"world\" \"zombies\" \"pants\"]))))\r\n\r\n(deftest detect-simple-anagram\r\n  (is (= [\"tan\"] (anagrams-for \"ant\" [\"tan\" \"stand\" \"at\"]))))\r\n\r\n(deftest does-not-confuse-different-duplicates\r\n  (is (= [] (anagrams-for \"galea\" [\"eagle\"]))))\r\n\r\n(deftest eliminate-anagram-subsets\r\n  (is (= [] (anagrams-for \"good\" [\"dog\" \"goody\"]))))\r\n\r\n(deftest detect-anagram\r\n  (is (= [\"inlets\"]\r\n         (let [coll [\"enlists\" \"google\" \"inlets\" \"banana\"]]\r\n           (anagrams-for \"listen\" coll)))))\r\n\r\n(deftest multiple-anagrams\r\n  (is (= [\"gallery\" \"regally\" \"largely\"]\r\n         (let [coll [\"gallery\" \"ballerina\" \"regally\"\r\n                     \"clergy\"  \"largely\"   \"leading\"]]\r\n           (anagrams-for \"allergy\" coll)))))\r\n\r\n(deftest case-insensitive-anagrams\r\n  (is (= [\"Carthorse\"]\r\n         (let [coll [\"cashregister\" \"Carthorse\" \"radishes\"]]\r\n           (anagrams-for \"Orchestra\" coll)))))\r\n\r\n(deftest word-is-not-own-anagram\r\n  (is (= [] (anagrams-for \"banana\" [\"banana\"]))))\r\n\r\n(deftest capital-word-is-not-own-anagram\r\n  (is (= [] (anagrams-for \"BANANA\" [\"banana\"]))))\r\n",
    "isogram_test" : "(ns isogram-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            isogram))\r\n\r\n(deftest test-isograms\r\n  (is (isogram? \"duplicates\"))\r\n  (is (isogram? \"subdermatoglyphic\"))\r\n  (is (isogram? \"thumbscrew-japingly\"))\r\n  (is (isogram? \"Hjelmqvist-Gryb-Zock-Pfund-Wax\"))\r\n  (is (isogram? \"Heizölrückstoßabdämpfung\"))\r\n  (is (isogram? \"Emily Jung Schwartzkopf\")))\r\n\r\n(deftest test-non-isograms\r\n  (is (not (isogram? \"eleven\")))\r\n  (is (not (isogram? \"Alphabet\")))\r\n  (is (not (isogram? \"the quick brown fox\")))\r\n  (is (not (isogram? \"éléphant\"))))\r\n",
    "sum_of_multiples_test" : "(ns sum-of-multiples-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            sum-of-multiples))\r\n\r\n(deftest sum-to-1\r\n  (is (zero? (sum-of-multiples '(3 5) 1))))\r\n\r\n(deftest sum-to-4\r\n  (is (= 3 (sum-of-multiples '(3 5) 4))))\r\n\r\n(deftest sum-to-10\r\n  (is (= 23 (sum-of-multiples '(3 5) 10))))\r\n\r\n(deftest sum-to-100\r\n  (is (= 2318 (sum-of-multiples '(3 5) 100))))\r\n\r\n(deftest sum-to-1000\r\n  (is (= 233168 (sum-of-multiples '(3 5) 1000))))\r\n\r\n(deftest sum-to-20-using-7-13-17\r\n  (is (= 51 (sum-of-multiples '(7 13 17) 20))))\r\n\r\n(deftest sum-to-15-using-4-6\r\n  (is (= 30 (sum-of-multiples '(4 6) 15))))\r\n\r\n(deftest sum-to-150-using-5-6-8\r\n  (is (= 4419 (sum-of-multiples '(5 6 8) 150))))\r\n\r\n(deftest sum-to-51-using-5-25\r\n  (is (= 275 (sum-of-multiples '(5 25) 51))))\r\n\r\n(deftest sum-to-10_000-using-43-47\r\n  (is (= 2203160 (sum-of-multiples '(43 47) 10000))))\r\n\r\n(deftest sum-to-100-using-1\r\n  (is (= 4950 (sum-of-multiples '(1) 100))))\r\n\r\n(deftest sum-to-10_000-using-empty\r\n  (is (zero? (sum-of-multiples '() 10000))))\r\n",
    "elyses_destructured_enchantments_test" : "(ns elyses-destructured-enchantments-test\r\n  (:require [clojure.test :refer :all]\r\n            [elyses-destructured-enchantments :refer :all]))\r\n\r\n(deftest ^{:task 1} first-card-single-test\r\n  (is (= 3 (first-card [3]))))\r\n\r\n(deftest ^{:task 1} first-card-multiple-test\r\n  (is (= 8 (first-card [8 3 9 5]))))\r\n\r\n(deftest ^{:task 2} second-card-2-test\r\n  (is (= 4 (second-card [10 4]))))\r\n\r\n(deftest ^{:task 2} second-card-4-test\r\n  (is (= 5 (second-card [2 5 1 6]))))\r\n\r\n(deftest ^{:task 2} second-card-empty-test\r\n  (is (nil? (second-card []))))\r\n\r\n(deftest ^{:task 2} second-card-single-test\r\n  (is (nil? (second-card [8]))))\r\n\r\n(deftest ^{:task 3} swap-top-two-cards-2-test\r\n  (is (= [6 3] (swap-top-two-cards [3 6]))))\r\n\r\n(deftest ^{:task 3} swap-top-two-cards-5-test\r\n  (is (= [4 10 3 7 8] (swap-top-two-cards [10 4 3 7 8]))))\r\n\r\n(deftest ^{:task 4} discard-top-card-single-test\r\n  (is (= [7 nil] (discard-top-card [7]))))\r\n\r\n(deftest ^{:task 4} discard-top-card-4-test\r\n  (is (= [9 [2 10 4]] (discard-top-card [9 2 10 4]))))\r\n\r\n(deftest ^{:task 5} insert-face-cards-3-test\r\n  (is (= [3 \"jack\" \"queen\" \"king\" 10 7] (insert-face-cards [3 10 7]))))\r\n\r\n(deftest ^{:task 5} insert-face-cards-1-test\r\n  (is (= [9 \"jack\" \"queen\" \"king\"] (insert-face-cards [9]))))\r\n\r\n(deftest ^{:task 5} insert-face-cards-empty-test\r\n  (is (= [\"jack\" \"queen\" \"king\"] (insert-face-cards []))))\r\n",
    "coordinate_transformation_test" : "(ns coordinate-transformation-test\r\n  (:require [clojure.test :refer [deftest testing is function?]]\r\n            [coordinate-transformation :refer [translate2d scale2d compose-transform memoize-transform]]))\r\n\r\n(deftest translate2d-test\r\n  (testing \"should return a function\"\r\n    (is (true? (function? translate2d))))\r\n  (testing \"should be predictable\"\r\n    (is (let [dx 3 dy -5\r\n              translator (translate2d dx dy)\r\n              x1 0 y1 0\r\n              expected [3 -5]]\r\n          (= expected (translator x1 y1)))))\r\n  (testing \"should be reusable\"\r\n    (is (let [dx 3 dy -5\r\n              translator (translate2d dx dy)\r\n              x2 4 y2 5\r\n              reusedExpected [7 0]]\r\n          (= reusedExpected (translator x2 y2))))))\r\n\r\n(deftest scale2d-test\r\n  (testing \"should return a function\"\r\n    (is (true? (function? scale2d))))\r\n  (testing \"should be predictable\"\r\n    (is (let [dx             4\r\n              dy             2\r\n              scaler         (scale2d dx dy)\r\n              x1             1\r\n              y1             1\r\n              expected       [4 2]]\r\n          (= expected (scaler x1 y1)))))\r\n  (testing \"should be reusable\"\r\n    (is (let [dx             4\r\n              dy             2\r\n              scaler         (scale2d dx dy)\r\n              x2             -2\r\n              y2             5\r\n              reusedExpected [-8 10]]\r\n          (= reusedExpected (scaler x2 y2))))))\r\n\r\n(deftest compose-transform-test\r\n (testing \"should return a function\"\r\n   (is (let [dx         -6\r\n             dy         10\r\n             translator (translate2d dx dy)\r\n             sx         3\r\n             sy         2\r\n             scaler     (scale2d sx sy)]\r\n         (true? (function? (compose-transform translator scaler))))))\r\n  (testing \"should compose two translate functions\"\r\n   (is (let [dx         -6\r\n             dy         10\r\n             translator (translate2d dx dy)\r\n             compose-translate (compose-transform translator translator)]\r\n         (= [-12 20] (compose-translate 0 0)))))\r\n         (testing\r\n          \"should compose two scale functions\"\r\n          (is (let [sx         3\r\n                    sy         2\r\n                    scaler     (scale2d sx sy)\r\n                    compose-scale (compose-transform scaler scaler)]\r\n                (= [9 4] (compose-scale 1 1)))))\r\n         (testing \"should compose in the correct order: g(f(x))\"\r\n          (is\r\n            (let [dx         -6\r\n                  dy         10\r\n                  translator (translate2d dx dy)\r\n                  sx         3\r\n                  sy         2\r\n                  scaler     (scale2d sx sy)\r\n                  composed (compose-transform scaler translator)]\r\n              (= [-6 10] (composed 0 0)))))\r\n         (testing \"should compose in the opposite order: g(f(x))\"\r\n          (is (let [dx         -6\r\n                    dy         10\r\n                    translator (translate2d dx dy)\r\n                    sx         3\r\n                    sy         2\r\n                    scaler     (scale2d sx sy)\r\n                    composed (compose-transform translator scaler)]\r\n                (= [-18 20] (composed 0 0))))))\r\n\r\n(deftest memoize-transform-test\r\n  (testing \"should return a function\"\r\n    (is (function? (memoize-transform (translate2d 2 2)))))\r\n  (testing \"should return the same result if given the same input\"\r\n    (is (= [4 4] (let [memoized-translate (memoize-transform (translate2d 2 2))]\r\n                   (memoized-translate 2 2))))\r\n    (is (= [4 4] (let [memoized-translate (memoize-transform (translate2d 2 2))]\r\n                   (memoized-translate 2 2)))))\r\n  (testing \"should return different results for different inputs\"\r\n    (is (= [3 4] (let [memoized-translate (memoize-transform (translate2d 1 2))]\r\n                   (memoized-translate 2 2))))\r\n    (is (= [7 8] (let [memoized-translate (memoize-transform (translate2d 1 2))]\r\n                   (memoized-translate 6 6)))))\r\n  (testing \"should not call the memoized function if the input is the same\"\r\n    (let [fake-first (atom true)\r\n          fake-transform (fn [_ _]\r\n                           (if @fake-first\r\n                             (do (reset! fake-first false)\r\n                                 [1 1])\r\n                             false))\r\n          memoized-transform (memoize-transform fake-transform)]\r\n      (is (= [1 1] (memoized-transform 5 5)))\r\n      (is (= [1 1] (memoized-transform 5 5)))))\r\n  (testing \"should only remember the last result\"\r\n    (let [mock-fn (let [n (atom 0)]\r\n                    (with-meta\r\n                      (fn [x y]\r\n                        (swap! n inc)\r\n                        [(* x 2) (* y 2)])\r\n                      {::call-count (fn [] @n)}))\r\n          memoized-transform (memoize-transform mock-fn)]\r\n      (is (= [2 2] (memoized-transform 1 1)))\r\n      (is (= [4 4] (memoized-transform 2 2)))\r\n      (is (= [2 2] (memoized-transform 1 1)))\r\n      (is (= 3 ((::call-count (meta mock-fn))))))))\r\n",
    "hexadecimal_test" : "(ns hexadecimal-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            hexadecimal))\r\n\r\n(deftest hex-to-int-test\r\n  (is (= 1 (hex-to-int \"1\")))\r\n  (is (= 12 (hex-to-int \"c\")))\r\n  (is (= 16 (hex-to-int \"10\")))\r\n  (is (= 175 (hex-to-int \"af\")))\r\n  (is (= 256 (hex-to-int \"100\")))\r\n  (is (= 105166 (hex-to-int \"19ace\")))\r\n  (is (= 0 (hex-to-int \"carrot\")))\r\n  (is (= 0 (hex-to-int \"000000\")))\r\n  (is (= 16777215 (hex-to-int \"ffffff\")))\r\n  (is (= 16776960 (hex-to-int \"ffff00\"))))\r\n",
    "robot_name_test" : "(ns robot-name-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            robot-name))\r\n\r\n(deftest robot-name-test\r\n  (let [a-robot (robot)\r\n        its-name (robot-name a-robot)]\r\n      (is (re-seq #\"[A-Z]{2}\\\\d{3}\" its-name))))\r\n\r\n(deftest name-matches-pattern\r\n   (let [a-robot (robot)\r\n         its-name (robot-name a-robot)]\r\n     (is (= its-name (robot-name a-robot)))))\r\n\r\n(deftest different-robots-different-names\r\n (let [a-robot (robot)\r\n        its-name (robot-name a-robot)]\r\n      (is (not= its-name (-> (robot) robot-name)))))\r\n\r\n(deftest new-name-matches\r\n  (let [a-robot (robot)\r\n        its-original-name (robot-name a-robot)\r\n        its-new-name (do (reset-name a-robot)\r\n                         (robot-name a-robot))]\r\n      (is (re-seq #\"[A-Z]{2}\\\\d{3}\" its-new-name))))\r\n\r\n(deftest new-name-different\r\n  (let [a-robot (robot)\r\n        its-original-name (robot-name a-robot)\r\n        its-new-name (do (reset-name a-robot)\r\n                         (robot-name a-robot))]\r\n      (is (not= its-original-name its-new-name))))\r\n\r\n(deftest new-name-does-not-change-until-reset\r\n  (let [a-robot (robot)\r\n        its-original-name (robot-name a-robot)\r\n        its-new-name (do (reset-name a-robot)\r\n                         (robot-name a-robot))]\r\n      (is (= its-new-name (robot-name a-robot)))))\r\n\r\n(deftest new-names-different-each-time\r\n  (let [a-robot (robot)\r\n        its-original-name (robot-name a-robot)\r\n        its-new-name (do (reset-name a-robot)\r\n                         (robot-name a-robot))]\r\n  (is (not= its-new-name (do (reset-name a-robot)\r\n                             (robot-name a-robot))))))\r\n",
    "spiral_matrix_test" : "(ns spiral-matrix-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [spiral-matrix :refer [spiral]]))\r\n\r\n(deftest spiral-matrix-of-0\r\n  (testing \"spiral matrix of 0\"\r\n    (is (= (spiral 0)\r\n           '()))))\r\n\r\n(deftest spiral-matrix-of-1\r\n  (testing \"spiral matrix of 1\"\r\n    (is (= (spiral 1)\r\n           '((1))))))\r\n\r\n(deftest spiral-matrix-of-2\r\n  (testing \"spiral matrix of 2\"\r\n    (is (= (spiral 2)\r\n           '((1 2)\r\n             (4 3))))))\r\n\r\n(deftest spiral-matrix-of-3\r\n  (testing \"spiral matrix of 3\"\r\n    (is (= (spiral 3)\r\n           '((1 2 3)\r\n             (8 9 4)\r\n             (7 6 5))))))\r\n\r\n(deftest spiral-matrix-of-4\r\n  (testing \"spiral matrix of 4\"\r\n    (is (= (spiral 4)\r\n           '((1  2  3  4)\r\n             (12 13 14 5)\r\n             (11 16 15 6)\r\n             (10 9  8  7))))))\r\n\r\n(deftest spiral-matrix-of-20\r\n  (testing \"spiral matrix of 20\"\r\n    (is (= (spiral 20)\r\n           '((1  2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20)\r\n             (76 77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  21)\r\n             (75 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 95  22)\r\n             (74 143 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 161 96  23)\r\n             (73 142 203 256 257 258 259 260 261 262 263 264 265 266 267 268 219 162 97  24)\r\n             (72 141 202 255 300 301 302 303 304 305 306 307 308 309 310 269 220 163 98  25)\r\n             (71 140 201 254 299 336 337 338 339 340 341 342 343 344 311 270 221 164 99  26)\r\n             (70 139 200 253 298 335 364 365 366 367 368 369 370 345 312 271 222 165 100 27)\r\n             (69 138 199 252 297 334 363 384 385 386 387 388 371 346 313 272 223 166 101 28)\r\n             (68 137 198 251 296 333 362 383 396 397 398 389 372 347 314 273 224 167 102 29)\r\n             (67 136 197 250 295 332 361 382 395 400 399 390 373 348 315 274 225 168 103 30)\r\n             (66 135 196 249 294 331 360 381 394 393 392 391 374 349 316 275 226 169 104 31)\r\n             (65 134 195 248 293 330 359 380 379 378 377 376 375 350 317 276 227 170 105 32)\r\n             (64 133 194 247 292 329 358 357 356 355 354 353 352 351 318 277 228 171 106 33)\r\n             (63 132 193 246 291 328 327 326 325 324 323 322 321 320 319 278 229 172 107 34)\r\n             (62 131 192 245 290 289 288 287 286 285 284 283 282 281 280 279 230 173 108 35)\r\n             (61 130 191 244 243 242 241 240 239 238 237 236 235 234 233 232 231 174 109 36)\r\n             (60 129 190 189 188 187 186 185 184 183 182 181 180 179 178 177 176 175 110 37)\r\n             (59 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 38)\r\n             (58 57  56  55  54  53  52  51  50  49  48  47  46  45  44  43  42  41  40  39))))))\r\n",
    "accumulate_test" : "(defn square [n] (* n n))\r\n\r\n(defn to-s [xs] (apply str xs))\r\n\r\n(deftest empty-accumulation\r\n  (is (= [] (accumulate square []))))\r\n\r\n(deftest accumulate-squares\r\n  (is (= [1 4 9] (accumulate square [1 2 3]))))\r\n\r\n(deftest accumulate-upcases\r\n  (is (= [\"HELLO\", \"WORLD\"]\r\n         (->> [\"hello\" \"world\"]\r\n              (accumulate upper-case)\r\n              (map to-s)))))\r\n\r\n(deftest accumulate-reversed-strings\r\n  (is (= [\"eht\" \"kciuq\" \"nworb\" \"xof\" \"cte\"]\r\n         (->> [\"the\" \"quick\" \"brown\" \"fox\" \"etc\"]\r\n              (accumulate reverse)\r\n              (map to-s)))))\r\n\r\n#_(deftest accumulate-recursively\r\n  (is (= [[\"a1\" \"a2\" \"a3\"] [\"b1\" \"b2\" \"b3\"] [\"c1\" \"c2\" \"c3\"]]\r\n         (-> #(accumulate (fn [n] (str % n)) [1 2 3])\r\n             (accumulate \"abc\")))))\r\n",
    "series_test" : "(ns series-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [series :refer [slices]]))\r\n\r\n(deftest empty-string\r\n  (testing \"empty string with any number\"\r\n    (is (= [] (slices \"\" 1)))))\r\n\r\n(deftest number-eq-zero\r\n  (testing \"number = 0\"\r\n    (is (= [\"\"] (slices \"123\" 0)))))\r\n\r\n(deftest number>string\r\n  (testing \"number > string-length\"\r\n    (is (= [] (slices \"123\" 1000)))))\r\n\r\n(deftest number=string\r\n  (testing \"number = string-length\"\r\n    (is (= [\"123\"] (slices \"123\" 3)))))\r\n\r\n(deftest number<string\r\n  (testing \"number < string-length\"\r\n    (is (= #{\"123\" \"234\" \"345\"} (set (slices \"12345\" 3))))))\r\n",
    "rotational_cipher_test" : "(ns rotational-cipher-test\r\n  (:require  [clojure.test :refer [deftest is testing]]\r\n             rotational-cipher))\r\n\r\n(deftest rotate-a-by-1\r\n  (is (= (rotate \"a\" 1) \"b\")))\r\n\r\n(deftest rotate-a-by-26-same-output\r\n  (is (= (rotate \"a\" 26) \"a\")))\r\n\r\n(deftest rotate-a-by-0-same-output\r\n  (is (= (rotate \"a\" 0) \"a\")))\r\n\r\n(deftest rotate-m-by-13\r\n  (is (= (rotate \"m\" 13) \"z\")))\r\n\r\n(deftest rotate-n-by-13-with-wrap\r\n  (is (= (rotate \"n\" 13) \"a\")))\r\n\r\n(deftest rotate-capital-letters\r\n  (is (= (rotate \"OMG\" 5) \"TRL\")))\r\n\r\n(deftest rotate-spaces\r\n  (is (= (rotate \"O M G\" 5) \"T R L\")))\r\n\r\n(deftest rotate-numbers\r\n  (is (= (rotate \"Testing 1 2 3 testing\" 4) \"Xiwxmrk 1 2 3 xiwxmrk\")))\r\n\r\n(deftest rotate-punctuation\r\n  (is (= (rotate \"Let's eat, Grandma!\" 21) \"Gzo'n zvo, Bmviyhv!\")))\r\n\r\n(deftest rotate-opposite-direction\r\n  (is (= (rotate \"b\" -1) \"a\")))\r\n\r\n(deftest rotate-opposite-past-first-letter\r\n  (is (= (rotate \"B\" -2) \"Z\")))\r\n\r\n(deftest rotate-opposite-past-letter-count\r\n  (is (= (rotate \"B\" -28) \"Z\")))\r\n\r\n(deftest rotate-forward-then-backwards-same-number-of-steps\r\n  (is (=  (rotate\r\n           (rotate \"B\" 28) -28) \"B\")))\r\n\r\n(deftest rotate-all-letters\r\n  (is (= (rotate \"The quick brown fox jumps over the lazy dog.\" 13) \"Gur dhvpx oebja sbk whzcf bire gur ynml qbt.\")))\r\n",
    "nth_prime_test" : "(ns nth-prime-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            nth-prime))\r\n\r\n(deftest first-prime\r\n  (testing \"the first prime is 2\"\r\n    (is (= 2 (nth-prime 1)))))\r\n\r\n(deftest second-prime\r\n  (testing \"the second prime is 3\"\r\n    (is (= 3 (nth-prime 2)))))\r\n\r\n(deftest sixth-prime\r\n  (testing \"the sixth prime is 13\"\r\n    (is (= 13 (nth-prime 6)))))\r\n\r\n#_(deftest ten-thousand-first-prime\r\n  (testing \"the ten thousand and first prime is 104743\"\r\n    (is (= 104743 (nth-prime 10001)))))\r\n\r\n#_(deftest zeroth-prime\r\n  (testing \"there is no zeroth prime\"\r\n    (is (thrown? IllegalArgumentException (nth-prime 0)))))\r\n",
    "etl_test" : "(ns etl-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            etl))\r\n\r\n(deftest transform-one-value\r\n  (is (= {\"world\" 1}\r\n         (transform {1 [\"WORLD\"]}))))\r\n\r\n(deftest transform-more-values\r\n  (is (= {\"world\" 1 \"gschoolers\" 1}\r\n         (transform {1 [\"WORLD\" \"GSCHOOLERS\"]}))))\r\n\r\n(deftest more-keys\r\n  (is (= {\"apple\" 1 \"artichoke\" 1 \"boat\" 2 \"ballerina\" 2}\r\n         (transform {1 [\"APPLE\" \"ARTICHOKE\"], 2 [\"BOAT\" \"BALLERINA\"]}))))\r\n\r\n(deftest full-dataset\r\n  (is (= {\"a\"  1 \"b\"  3 \"c\" 3 \"d\" 2 \"e\" 1\r\n          \"f\"  4 \"g\"  2 \"h\" 4 \"i\" 1 \"j\" 8\r\n          \"k\"  5 \"l\"  1 \"m\" 3 \"n\" 1 \"o\" 1\r\n          \"p\"  3 \"q\" 10 \"r\" 1 \"s\" 1 \"t\" 1\r\n          \"u\"  1 \"v\"  4 \"w\" 4 \"x\" 8 \"y\" 4\r\n          \"z\" 10}\r\n         (transform {1  (re-seq #\"\\\\w\" \"AEIOULNRST\")\r\n                         2  (re-seq #\"\\\\w\" \"DG\")\r\n                         3  (re-seq #\"\\\\w\" \"BCMP\")\r\n                         4  (re-seq #\"\\\\w\" \"FHVWY\")\r\n                         5  (re-seq #\"\\\\w\" \"K\")\r\n                         8  (re-seq #\"\\\\w\" \"JX\")\r\n                         10 (re-seq #\"\\\\w\" \"QZ\")}))))\r\n",
    "collatz_conjecture_test" : "(ns collatz-conjecture-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [collatz-conjecture :refer [collatz]]))\r\n\r\n(deftest steps-for-1\r\n  (testing \"zero steps for one\"\r\n    (is (= 0 (collatz 1)))))\r\n\r\n(deftest steps-for-16\r\n  (testing \"divide if even\"\r\n    (is (= 4 (collatz 16)))))\r\n\r\n(deftest steps-for-12\r\n  (testing \"even and odd steps\"\r\n    (is (= 9 (collatz 12)))))\r\n\r\n(deftest steps-for-1000000\r\n  (testing \"Large number of even and odd steps\"\r\n    (is (= 152 (collatz 1000000)))))\r\n\r\n#_(deftest steps-for-0\r\n  (testing \"zero is an error\"\r\n    (is (thrown? Throwable\r\n                 (collatz 0)))))\r\n\r\n#_(deftest steps-for-negative\r\n  (testing \"negative value is an error\"\r\n    (is (thrown? Throwable\r\n                 (collatz -15)))))\r\n",
    "isbn_verifier_test" : "(ns isbn-verifier-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [isbn-verifier :refer [isbn?]]))\r\n\r\n(deftest valid-isbn-number\r\n  (is (= true (isbn? \"3-598-21508-8\"))))\r\n\r\n(deftest invalid-isbn-check-digit\r\n  (is (= false (isbn? \"3-598-21508-9\"))))\r\n\r\n(deftest valid-isbn-number-with-a-check-digit-of-10\r\n  (is (= true (isbn? \"3-598-21507-X\"))))\r\n\r\n(deftest check-digit-is-a-character-other-than-X\r\n  (is (= false (isbn? \"3-598-21507-A\"))))\r\n\r\n(deftest invalid-character-in-isbn\r\n  (is (= false (isbn? \"3-598-2K507-0\"))))\r\n\r\n(deftest X-is-only-valid-as-a-check-digit\r\n  (is (= false (isbn? \"3-598-2X507-9\"))))\r\n\r\n(deftest valid-isbn-without-separating-dashes\r\n  (is (= true (isbn? \"3598215088\"))))\r\n\r\n(deftest isbn-without-separating-dashes-and-X-as-check-digit\r\n  (is (= true (isbn? \"359821507X\"))))\r\n\r\n(deftest isbn-without-check-digit-and-dashes\r\n  (is (= false (isbn? \"359821507\"))))\r\n\r\n(deftest too-long-isbn-and-no-dashes\r\n  (is (= false (isbn? \"3598215078X\"))))\r\n\r\n(deftest too-short-isbn\r\n  (is (= false (isbn? \"00\"))))\r\n\r\n(deftest isbn-without-check-digit\r\n  (is (= false (isbn? \"3-598-21507\"))))\r\n\r\n(deftest too-long-isbn\r\n  (is (= false (isbn? \"3-598-21507-XX\"))))\r\n\r\n(deftest check-digit-of-X-should-not-be-used-for-0\r\n  (is (= false (isbn? \"3-598-21515-X\"))))\r\n",
    "strain_test" : "(ns strain-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [strain :refer [retain discard]]))\r\n\r\n(defn fn-throw-exception [msg] (fn [& _] (throw msg)))\r\n\r\n(deftest empty-sequence\r\n  (is (empty? (retain even? '()))))\r\n\r\n(deftest empty-retain\r\n  (is (empty? (retain odd? [2 4 6 8 10]))))\r\n\r\n(deftest retain-single-element\r\n  (is (= [0] (retain even? [0]))))\r\n\r\n(deftest retain-several\r\n  (is (= [1 3 5] (retain odd? (range 6)))))\r\n\r\n(deftest retain-everything\r\n  (is (= [2 4 6 8 10] (retain even? [2 4 6 8 10]))))\r\n\r\n(deftest retain-strings\r\n  (is (= [\"string\" \"three\"] (retain string? [\"string\" 1 :two \"three\" [\"4\"]]))))\r\n\r\n(deftest empty-discard\r\n  (is (empty? (discard even? [2 4 6 8 10]))))\r\n\r\n(deftest discard-first\r\n  (is (= [1 2] (discard zero? [0 1 2]))))\r\n\r\n(deftest discard-last\r\n  (is (= [2 1] (discard zero? [2 1 0]))))\r\n\r\n(deftest discard-several\r\n  (is (= [0 2 4] (discard odd? (range 6)))))\r\n\r\n#_(deftest does-not-use-existing-implementations\r\n  (with-redefs [filter  (fn-throw-exception \"Implement without filter!\")\r\n                remove  (fn-throw-exception \"Implement without remove!\")\r\n                filterv (fn-throw-exception \"Implement without filterv!\")]\r\n    (dorun (retain even? (range 10)))\r\n    (dorun (discard even? (range 10)))))\r\n",
    "pangram_test" : "(ns pangram-test\r\n  (:require [clojure.test :refer [is deftest]]\r\n            [pangram :refer [pangram?]]))\r\n\r\n(deftest empty-sentence\r\n  (is (false? (pangram? \"\"))))\r\n\r\n(deftest lowercase-pangram\r\n  (is (pangram? \"the quick brown fox jumps over the lazy dog\")))\r\n\r\n(deftest missing-character-x\r\n  (is\r\n   (false?\r\n    (pangram? \"a quick movement of the enemy will jeopardize five gunboats\"))))\r\n\r\n(deftest another-missing-character-x\r\n  (is\r\n   (false?\r\n    (pangram? \"the quick brown fish jumps over the lazy dog\"))))\r\n\r\n(deftest with-underscores\r\n  (is (pangram? \"the_quick_brown_fox_jumps_over_the_lazy_dog\")))\r\n\r\n(deftest with-numbers\r\n  (is (pangram? \"the 1 quick brown fox jumps over the 2 lazy dogs\")))\r\n\r\n(deftest missing-letters-replaced-by-numbers\r\n  (is\r\n   (false?\r\n    (pangram? \"7h3 qu1ck brown fox jumps ov3r 7h3 lazy dog\"))))\r\n\r\n(deftest mixed-case-and-punctuation\r\n  (is (pangram? \"\\\"Five quacking Zephyrs jolt my wax bed.\\\"\")))\r\n\r\n(deftest upper-and-lower-not-counted-separately\r\n  (is\r\n   (false?\r\n    (pangram? \"the quick brown fox jumps over with lazy FX\"))))\r\n",
    "crypto_square_test" : "(ns crypto-square-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            crypto-square))\r\n\r\n(deftest normalize-splunk\r\n  (is (= \"splunk\" (normalize-plaintext \"s#!@$%plunk\"))))\r\n(deftest normalize-with-punctuation\r\n  (is (= \"123go\" (normalize-plaintext \"1, 2, 3 GO!\"))))\r\n\r\n(deftest square-2\r\n  (is (= 2 (square-size \"1234\"))))\r\n(deftest square-3\r\n  (is (= 3 (square-size \"123456789\"))))\r\n(deftest square-4\r\n  (is (= 4 (square-size \"123456789abc\"))))\r\n\r\n(deftest segments\r\n  (is (= [\"neverv\", \"exthin\", \"eheart\", \"withid\", \"lewoes\"]\r\n         (plaintext-segments \"Never vex thine heart with idle woes.\"))))\r\n(deftest segments-2\r\n  (is (= [\"zomg\", \"zomb\", \"ies\"]\r\n         (plaintext-segments \"ZOMG! ZOMBIES!!!\"))))\r\n\r\n(deftest cipher-1\r\n  (is (= \"tasneyinicdsmiohooelntuillibsuuml\"\r\n         (ciphertext \"Time is an illusion. Lunchtime doubly so.\"))))\r\n(deftest cipher-2\r\n  (is (= \"wneiaweoreneawssciliprerlneoidktcms\"\r\n         (ciphertext \"We all know interspecies romance is weird.\"))))\r\n(deftest cipher-3\r\n  (is (= \"vrel aepe mset paoo irpo\"\r\n         (normalize-ciphertext \"Vampires are people too!\"))))\r\n(deftest cipher-4\r\n  (is (= \"msemo aanin dnin  ndla  etlt  shui \"\r\n         (normalize-ciphertext \"Madness, and then illumination.\"))))\r\n(deftest cipher-5\r\n  (is (= (str \"ageihdsednsh lsagtoonaepe lannswnccair hrditeaetnrh \"\r\n              \"ueethdnatoio mbqyewdnotto aouayicdwhod nranatosaef  \"\r\n              \"bnldrhnhrrb  efirersodir  irnieecusno  nedgnailoat \")\r\n         (let [plaintext (str \"All human beings are born free \"\r\n                              \"and equal in dignity and rights. \"\r\n                              \"They are endowed with reason and conscience \"\r\n                              \"and should act towards one another \"\r\n                              \"in a spirit of brotherhood.\")]\r\n           (normalize-ciphertext plaintext)))))\r\n(deftest cipher-6\r\n  (is (= \"imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn  sseoau \"\r\n         (normalize-ciphertext \"If man was meant to stay on the ground, god would have given us roots.\"))))",
    "binary_test" : "(ns binary-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            binary))\r\n\r\n(deftest binary-1-is-decimal-1\r\n  (is (= 1 (to-decimal \"1\"))))\r\n\r\n(deftest binary-10-is-decimal-2\r\n  (is (= 2 (to-decimal \"10\"))))\r\n\r\n(deftest binary-11-is-decimal-3\r\n  (is (= 3 (to-decimal \"11\"))))\r\n\r\n(deftest binary-100-is-decimal-4\r\n  (is (= 4 (to-decimal \"100\"))))\r\n\r\n(deftest binary-1001-is-decimal-9\r\n  (is (= 9 (to-decimal \"1001\"))))\r\n\r\n(deftest binary-11010-is-decimal-26\r\n  (is (= 26 (to-decimal \"11010\"))))\r\n\r\n(deftest binary-10001101000-is-decimal-1128\r\n  (is (= 1128 (to-decimal \"10001101000\"))))\r\n\r\n(deftest invalid-binary-is-decimal-0\r\n  (is (= 0 (to-decimal \"carrot\"))))\r\n",
    "acronym_test" : "(ns acronym-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            acronym))\r\n\r\n(deftest test-acronym-empty-string\r\n  (is (= \"\" (acronym \"\"))))\r\n\r\n(deftest test-acronym-png\r\n  (is (= \"PNG\" (acronym \"Portable Network Graphics\"))))\r\n\r\n(deftest test-acronym-ror\r\n  (is (= \"ROR\" (acronym \"Ruby on Rails\"))))\r\n\r\n(deftest test-acronym-html\r\n  (is (= \"HTML\" (acronym \"HyperText Markup Language\"))))\r\n\r\n(deftest test-acronym-fifo\r\n  (is (= \"FIFO\" (acronym \"First In, First Out\"))))\r\n\r\n(deftest test-acronym-php\r\n  (is (= \"PHP\" (acronym \"PHP: Hypertext Preprocessor\"))))\r\n\r\n(deftest test-acronym-cmos\r\n  (is (= \"CMOS\" (acronym \"Complementary metal-oxide semiconductor\"))))\r\n",
    "complex_numbers_test" : "(ns complex-numbers-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [complex-numbers :as c]))\r\n\r\n;; Tests for Real Part\r\n(deftest real-of-purely-real-number\r\n  (testing \"Real part of a purely real number\"\r\n    (is (= (real [1 0])\r\n           1))))\r\n\r\n(deftest real-of-purely-imaginary-number\r\n  (testing \"Real part of a purely imaginary number\"\r\n    (is (= (real [0 1])\r\n           0))))\r\n\r\n(deftest real-of-real-and-imaginary-number\r\n  (testing \"Real part of a number with real and imaginary part\"\r\n    (is (= (real [1 2])\r\n           1))))\r\n\r\n;; Tests for Imaginary Part\r\n(deftest imaginary-of-purely-real-number\r\n  (testing \"Imaginary part of a purely real number\"\r\n    (is (= (imaginary [1 0])\r\n           0))))\r\n\r\n(deftest imaginary-of-purely-imaginary-number\r\n  (testing \"Imaginary part of a purely imaginary number\"\r\n    (is (= (imaginary [0 1])\r\n           1))))\r\n\r\n(deftest imaginary-of-real-and-imaginary-number\r\n  (testing \"Imaginary part of a number with real and imaginary part\"\r\n    (is (= (imaginary [1 2])\r\n           2))))\r\n\r\n;; Tests for Absolute Value\r\n(deftest absolute-of-positive-purely-real-number\r\n  (testing \"Absolute value of a positive purely real number\"\r\n    (is (= (abs [5 0])\r\n           5.0))))\r\n\r\n(deftest absolute-of-negative-purely-real-number\r\n  (testing \"Absolute value of a negative purely real number\"\r\n    (is (= (abs [-5 0])\r\n           5.0))))\r\n\r\n(deftest absolute-of-positive-purely-imaginary-number\r\n  (testing \"Absolute value of a purely imaginary number with positive imaginary part\"\r\n    (is (= (abs [0 5])\r\n           5.0))))\r\n\r\n(deftest absolute-of-negative-purely-imaginary-number\r\n  (testing \"Absolute value of a purely imaginary number with negative imaginary part\"\r\n    (is (= (abs [0 -5])\r\n           5.0))))\r\n\r\n(deftest absolute-of-real-and-imaginary-number\r\n  (testing \"Absolute value of a number with real and imaginary part\"\r\n    (is (= (abs [3 4])\r\n           5.0))))\r\n\r\n;; Tests for Conjugate\r\n(deftest conjugate-of-purely-real-number\r\n  (testing \"Conjugate a purely real number\"\r\n    (is (= (conjugate [5 0])\r\n           [5 0]))))\r\n\r\n(deftest conjugate-of-purely-imaginary-number\r\n  (testing \"Conjugate a purely imaginary number\"\r\n    (is (= (conjugate [0 5])\r\n           [0 -5]))))\r\n\r\n(deftest conjugate-of-real-and-imaginary-number\r\n  (testing \"Conjugate a number with real and imaginary part\"\r\n    (is (= (conjugate [1 1])\r\n           [1 -1]))))\r\n\r\n;; Tests for Addition\r\n(deftest add-purely-real-numbers\r\n  (testing \"Add purely real numbers\"\r\n    (is (= (add [1 0] [2 0])\r\n           [3 0]))))\r\n\r\n(deftest add-purely-imaginary-numbers\r\n  (testing \"Add purely imaginary numbers\"\r\n    (is (= (add [0 1] [0 2])\r\n           [0 3]))))\r\n\r\n(deftest add-numbers-with-real-and-imaginary-part\r\n  (testing \"Add numbers with real and imaginary part\"\r\n    (is (= (add [1 2] [3 4])\r\n           [4 6]))))\r\n\r\n;; Tests for Subtraction\r\n(deftest subtract-purely-real-numbers\r\n  (testing \"Subtract purely real numbers\"\r\n    (is (= (sub [1 0] [2 0])\r\n           [-1 0]))))\r\n\r\n(deftest subtract-purely-imaginary-numbers\r\n  (testing \"Subtract purely imaginary numbers\"\r\n    (is (= (sub [0 1] [0 2])\r\n           [0 -1]))))\r\n\r\n(deftest subtract-numbers-with-real-and-imaginary-part\r\n  (testing \"Subtract numbers with real and imaginary part\"\r\n    (is (= (sub [1 2] [3 4])\r\n           [-2 -2]))))\r\n\r\n;; Tests for Multiplication\r\n(deftest multiply-purely-real-numbers\r\n  (testing \"Multiply purely real numbers\"\r\n    (is (= (mul [1 0] [2 0])\r\n           [2 0]))))\r\n\r\n(deftest multiply-purely-imaginary-numbers\r\n  (testing \"Multiply purely imaginary numbers\"\r\n    (is (= (mul [0 1] [0 2])\r\n           [-2 0]))))\r\n\r\n(deftest multiply-numbers-with-real-and-imaginary-part\r\n  (testing \"Multiply numbers with real and imaginary part\"\r\n    (is (= (mul [1 2] [3 4])\r\n           [-5 10]))))\r\n\r\n;; Tests for division\r\n(deftest divide-purely-real-numbers\r\n  (testing \"Divide purely real numbers\"\r\n    (is (= (div [1 0] [2 0])\r\n           [0.5 0.0]))))\r\n\r\n(deftest dividey-purely-imaginary-numbers\r\n  (testing \"Divide purely imaginary numbers\"\r\n    (is (= (div [0 1] [0 2])\r\n           [0.5 0.0]))))\r\n\r\n(deftest divide-numbers-with-real-and-imaginary-part\r\n  (testing \"Divide numbers with real and imaginary part\"\r\n    (is (= (div [1 2] [3 4])\r\n           [0.44 0.08]))))\r\n",
    "scrabble_score_test" : "(ns scrabble-score-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            scrabble-score))\r\n\r\n(deftest lower-case-letter\r\n  (is (= 1 (score-letter \"a\"))))\r\n\r\n(deftest upper-case-letter\r\n  (is (= 1 (score-letter \"A\"))))\r\n\r\n(deftest two-letter-word\r\n  (is (= 2 (score-word \"at\"))))\r\n\r\n(deftest bigger-word-1\r\n  (is (= 6 (score-word \"street\"))))\r\n\r\n(deftest bigger-word-2\r\n  (is (= 22 (score-word \"quirky\"))))\r\n\r\n(deftest all-upper-case-word\r\n  (is (= 41 (score-word \"OXYPHENBUTAZONE\"))))\r\n",
    "say_test" : "(ns say-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            say))\r\n\r\n(deftest zero-test\r\n  (is (= \"zero\" (number 0))))\r\n\r\n(deftest one-test\r\n  (is (= \"one\" (number 1))))\r\n\r\n(deftest fourteen-test\r\n  (is (= \"fourteen\" (number 14))))\r\n\r\n(deftest twenty-test\r\n  (is (= \"twenty\" (number 20))))\r\n\r\n(deftest twenty-two-test\r\n  (is (= \"twenty-two\" (number 22))))\r\n\r\n(deftest one-hundred-test\r\n  (is (= \"one hundred\" (number 100))))\r\n\r\n(deftest one-hundred-twenty-three-test\r\n  (is (= \"one hundred twenty-three\" (number 123))))\r\n\r\n(deftest one-thousand-test\r\n  (is (= \"one thousand\" (number 1000))))\r\n\r\n(deftest one-thousand-two-hundred-thirty-four-test\r\n  (is (= \"one thousand two hundred thirty-four\" (number 1234))))\r\n\r\n(deftest one-million-test\r\n  (is (= \"one million\" (number 1000000))))\r\n\r\n(deftest one-million-two-thousand-three-hundred-forty-five-test\r\n  (is (= \"one million two thousand three hundred forty-five\" (number 1002345))))\r\n\r\n(deftest one-billion-test\r\n  (is (= \"one billion\" (number 1000000000))))\r\n\r\n(deftest a-big-number-test\r\n  (is (= \"nine hundred eighty-seven billion six hundred fifty-four million three hundred twenty-one thousand one hundred twenty-three\" (number 987654321123))))\r\n\r\n#_(deftest below-zero-is-out-of-range-test\r\n  (is (thrown? IllegalArgumentException (number -1))))\r\n\r\n#_(deftest numbers-above-999999999999-out-of-range-test\r\n  (is (thrown? IllegalArgumentException (number 1000000000000))))\r\n",
    "tracks_on_tracks_on_tracks_test" : "(ns tracks-on-tracks-on-tracks-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            tracks-on-tracks-on-tracks))\r\n\r\n(deftest ^{:task 1} list-empty-test\r\n  (is (= '() (tracks-on-tracks-on-tracks/new-list))))\r\n\r\n(deftest ^{:task 2} list-add-test\r\n  (is (= '(\"JavaScript\" \"Java\" \"Lisp\" \"Clojure\")\r\n         (-> (tracks-on-tracks-on-tracks/new-list)\r\n             (tracks-on-tracks-on-tracks/add-language \"Clojure\")\r\n             (tracks-on-tracks-on-tracks/add-language \"Lisp\")\r\n             (tracks-on-tracks-on-tracks/add-language \"Java\")\r\n             (tracks-on-tracks-on-tracks/add-language \"JavaScript\")))))\r\n\r\n(deftest ^{:task 3} first-test\r\n  (is (= \"Lisp\" (tracks-on-tracks-on-tracks/first-language '(\"Lisp\" \"Clojure\")))))\r\n\r\n(deftest ^{:task 4} list-remove-test\r\n  (is (= '(\"Clojure\") (tracks-on-tracks-on-tracks/remove-language '(\"Lisp\" \"Clojure\")))))\r\n\r\n(deftest ^{:task 5} list-count-test\r\n  (is (= 3 (tracks-on-tracks-on-tracks/count-languages '(\"JavaScript\" \"Java\" \"Clojure\")))))\r\n\r\n(deftest ^{:task 6} learning-list-test\r\n  (is (= 3 (tracks-on-tracks-on-tracks/learning-list))))\r\n",
    "binary_search_test" : "(ns binary-search-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            binary-search))\r\n\r\n(def short-vector [1, 3, 4, 6, 8, 9, 11])\r\n\r\n(def large-vector [1, 3, 5, 8, 13, 21, 34, 55, 89])\r\n\r\n(def even-length-vector [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377])\r\n\r\n(deftest it-finds-position-of-middle-item\r\n  (is (= 3 (middle short-vector))))\r\n\r\n(deftest searches-a-singleton\r\n  (is (= 0 (search-for 4 [4]))))\r\n\r\n(deftest it-finds-position-of-search-data\r\n  (is (= 5 (search-for 9 short-vector))))\r\n\r\n(deftest it-finds-position-in-a-larger-list\r\n  (is (= 1 (search-for 3 large-vector))))\r\n\r\n(deftest it-finds-position-in-a-larger-list-again\r\n  (is (= 7 (search-for 55 large-vector))))\r\n\r\n(deftest it-finds-correct-position-in-a-list-with-an-even-number-of-elements\r\n  (is (= 5 (search-for 21 even-length-vector))))\r\n\r\n(deftest it-finds-correct-position-in-a-list-with-an-even-number-of-elements-again\r\n  (is (= 6 (search-for 34 even-length-vector))))\r\n\r\n(deftest it-works-on-lists\r\n  (is (= 7 (search-for 7 '(0 1 2 3 4 5 6 7 8 9)))))\r\n\r\n(deftest it-works-on-lists-again\r\n  (is (= 4 (search-for 3 '(-3 -2 0 1 3 4)))))\r\n\r\n#_(deftest throws-exception-when-element-not-found\r\n  (is (thrown-with-msg? #\"not found\"\r\n                        (search-for 20 short-vector))))\r\n",
    "diamond_test" : "(ns diamond-test\r\n  (:require [clojure.test :refer [deftest is are]]\r\n            [diamond :refer [diamond]]))\r\n\r\n(deftest single-a-row\r\n  (is (= (diamond \\A) [\"A\"])))\r\n\r\n(deftest b-diamond\r\n  (is (= (diamond \\B) [\" A \"\r\n                       \"B B\"\r\n                       \" A \"])))\r\n(deftest c-diamond\r\n  (is (= (diamond \\C) [\"  A  \"\r\n                       \" B B \"\r\n                       \"C   C\"\r\n                       \" B B \"\r\n                       \"  A  \"])))\r\n\r\n(deftest d-diamond\r\n  (is (= (diamond \\D) [\"   A   \"\r\n                       \"  B B  \"\r\n                       \" C   C \"\r\n                       \"D     D\"\r\n                       \" C   C \"\r\n                       \"  B B  \"\r\n                       \"   A   \"])))\r\n\r\n(deftest full-z-diamond\r\n  (is (= (diamond \\Z) [\"                         A                         \"\r\n                       \"                        B B                        \"\r\n                       \"                       C   C                       \"\r\n                       \"                      D     D                      \"\r\n                       \"                     E       E                     \"\r\n                       \"                    F         F                    \"\r\n                       \"                   G           G                   \"\r\n                       \"                  H             H                  \"\r\n                       \"                 I               I                 \"\r\n                       \"                J                 J                \"\r\n                       \"               K                   K               \"\r\n                       \"              L                     L              \"\r\n                       \"             M                       M             \"\r\n                       \"            N                         N            \"\r\n                       \"           O                           O           \"\r\n                       \"          P                             P          \"\r\n                       \"         Q                               Q         \"\r\n                       \"        R                                 R        \"\r\n                       \"       S                                   S       \"\r\n                       \"      T                                     T      \"\r\n                       \"     U                                       U     \"\r\n                       \"    V                                         V    \"\r\n                       \"   W                                           W   \"\r\n                       \"  X                                             X  \"\r\n                       \" Y                                               Y \"\r\n                       \"Z                                                 Z\"\r\n                       \" Y                                               Y \"\r\n                       \"  X                                             X  \"\r\n                       \"   W                                           W   \"\r\n                       \"    V                                         V    \"\r\n                       \"     U                                       U     \"\r\n                       \"      T                                     T      \"\r\n                       \"       S                                   S       \"\r\n                       \"        R                                 R        \"\r\n                       \"         Q                               Q         \"\r\n                       \"          P                             P          \"\r\n                       \"           O                           O           \"\r\n                       \"            N                         N            \"\r\n                       \"             M                       M             \"\r\n                       \"              L                     L              \"\r\n                       \"               K                   K               \"\r\n                       \"                J                 J                \"\r\n                       \"                 I               I                 \"\r\n                       \"                  H             H                  \"\r\n                       \"                   G           G                   \"\r\n                       \"                    F         F                    \"\r\n                       \"                     E       E                     \"\r\n                       \"                      D     D                      \"\r\n                       \"                       C   C                       \"\r\n                       \"                        B B                        \"\r\n                       \"                         A                         \"])))\r\n",
    "interest_is_interesting_test" : "(ns interest-is-interesting-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            interest-is-interesting))\r\n\r\n(deftest ^{:task 1} minimal-first-interest-rate-test\r\n  (is (= 0.5 (interest-is-interesting/interest-rate 0M))))\r\n\r\n(deftest ^{:task 1} tiny-first-interest-rate-test\r\n  (is (= 0.5 (interest-is-interesting/interest-rate 0.000001M))))\r\n\r\n(deftest ^{:task 1} maximum-first-interest-rate-test\r\n  (is (= 0.5 (interest-is-interesting/interest-rate 999.9999M))))\r\n\r\n(deftest ^{:task 1} minimal-second-interest-rate-test\r\n  (is (= 1.621 (interest-is-interesting/interest-rate 1000.0M))))\r\n\r\n(deftest ^{:task 1} tiny-second-interest-rate-test\r\n  (is (= 1.621 (interest-is-interesting/interest-rate 1000.0001M))))\r\n\r\n(deftest ^{:task 1} maximum-second-interest-rate-test\r\n  (is (= 1.621 (interest-is-interesting/interest-rate 4999.9990M))))\r\n\r\n(deftest ^{:task 1} minimal-third-interest-rate-test\r\n  (is (= 2.475 (interest-is-interesting/interest-rate 5000.0000M))))\r\n\r\n(deftest ^{:task 1} tiny-third-interest-rate-test\r\n  (is (= 2.475 (interest-is-interesting/interest-rate 5000.0001M))))\r\n\r\n(deftest ^{:task 1} large-third-interest-rate-test\r\n  (is (= 2.475 (interest-is-interesting/interest-rate 5639998.742909M))))\r\n\r\n(deftest ^{:task 1} minimal-negative-interest-rate-test\r\n  (is (= -3.213 (interest-is-interesting/interest-rate -0.000001M))))\r\n\r\n(deftest ^{:task 1} small-negative-interest-rate-test\r\n  (is (= -3.213 (interest-is-interesting/interest-rate -0.123M))))\r\n\r\n(deftest ^{:task 1} regular-negative-interest-rate-test\r\n  (is (= -3.213 (interest-is-interesting/interest-rate -300.0M))))\r\n\r\n(deftest ^{:task 1} large-negative-interest-rate-test\r\n  (is (= -3.213 (interest-is-interesting/interest-rate -152964.231M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-empty-balance-test\r\n  (is (= 0.0000M (interest-is-interesting/annual-balance-update 0.0M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-small-positive-balance-test\r\n  (is (= 0.000001005M (interest-is-interesting/annual-balance-update 0.000001M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-average-positive-balance-test\r\n  (is (= 1016.210000M (interest-is-interesting/annual-balance-update 1000.0M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-large-positive-balance-test\r\n  (is (= 1016.210101621M (interest-is-interesting/annual-balance-update 1000.0001M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-huge-positive-balance-test\r\n  (is (= 920352587.26744292868451875M (interest-is-interesting/annual-balance-update 898124017.826243404425M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-small-negative-balance-test\r\n  (is (= -0.12695199M (interest-is-interesting/annual-balance-update -0.123M))))\r\n\r\n(deftest ^{:task 2} annual-balance-update-large-negative-balance-test\r\n  (is (= -157878.97174203M (interest-is-interesting/annual-balance-update -152964.231M))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-empty-balance-test\r\n  (is (= 0 (interest-is-interesting/amount-to-donate 0.0M 2.0))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-small-positive-balance-test\r\n  (is (= 0 (interest-is-interesting/amount-to-donate 0.000001M 2.1))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-average-positive-balance-test\r\n  (is (= 40 (interest-is-interesting/amount-to-donate 1000.0M 2.0))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-large-positive-balance-test\r\n  (is (= 19 (interest-is-interesting/amount-to-donate 1000.0001M 0.99))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-huge-positive-balance-test\r\n  (is (= 47600572 (interest-is-interesting/amount-to-donate 898124017.826243404425M 2.65))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-small-negative-balance-test\r\n  (is (= 0 (interest-is-interesting/amount-to-donate -0.123M 3.33))))\r\n\r\n(deftest ^{:task 3} amount-to-donate-large-negative-balance-test\r\n  (is (= 0 (interest-is-interesting/amount-to-donate -152964.231M 5.4))))\r\n",
    "bird_watcher_test" : "(ns bird-watcher-test\r\n  (:require bird-watcher\r\n            [clojure.test :refer [deftest is testing]]))\r\n\r\n(deftest ^{:task 1} last-week-test\r\n  (is (= [0 2 5 3 7 8 4] bird-watcher/last-week)))\r\n\r\n(deftest ^{:task 2} today-disappointing-week-test\r\n  (testing \"Today's bird count of disappointing week\"\r\n    (is (= 0 (bird-watcher/today [0 0 2 0 0 1 0])))))\r\n\r\n(deftest ^{:task 2} today-busy-week-test\r\n  (testing \"Today's bird count of busy week\"\r\n    (is (= 10 (bird-watcher/today [8 8 9 5 4 7 10])))))\r\n\r\n(deftest ^{:task 3} increment-bird-no-visits-test\r\n  (testing \"Increment today's count with no previous visits\"\r\n    (is (= [6 5 5 11 2 5 1] (bird-watcher/inc-bird [6 5 5 11 2 5 0])))))\r\n\r\n(deftest ^{:task 3} increment-bird-multiple-visits-test\r\n  (testing \"Increment today's count with multiple previous visits\"\r\n    (is (= [5 2 4 2 4 5 8] (bird-watcher/inc-bird [5 2 4 2 4 5 7])))))\r\n\r\n(deftest ^{:task 4} day-without-birds-test\r\n  (testing \"Has day without birds with day without birds\"\r\n    (is (= true (bird-watcher/day-without-birds? [5 5 4 0 7 6 7])))))\r\n\r\n(deftest ^{:task 4} no-day-without-birds-test\r\n  (testing \"Has day without birds with no day without birds\"\r\n    (is (= false (bird-watcher/day-without-birds? [5 5 4 1 7 6 7])))))\r\n\r\n(deftest ^{:task 5} n-days-count-disappointing-week-test\r\n  (testing \"Count for first three days of disappointing week\"\r\n    (is (= 1 (bird-watcher/n-days-count [0, 0, 1, 0, 0, 1, 0] 3)))))\r\n\r\n(deftest ^{:task 5} n-days-count-busy-week-test\r\n  (testing \"Count for first 6 days of busy week\"\r\n    (is (= 48 (bird-watcher/n-days-count [5, 9, 12, 6, 8, 8, 17] 6)))))\r\n\r\n(deftest ^{:task 6} busy-days-disappointing-week-test\r\n  (testing \"Busy days for disappointing week\"\r\n    (is (= 0 (bird-watcher/busy-days [1 1 1 0 0 0 0])))))\r\n\r\n(deftest ^{:task 6} busy-days-busy-week-test\r\n  (testing \"Busy days for busy week\"\r\n    (is (= 5 (bird-watcher/busy-days [4 9 5 7 8 8 2])))))\r\n\r\n(deftest ^{:task 7} odd-week-matching-test\r\n  (testing \"Odd week for week matching odd pattern\"\r\n    (is (= true (bird-watcher/odd-week? [1 0 1 0 1 0 1])))))\r\n\r\n(deftest ^{:task 7} odd-week-not-matching-test\r\n  (testing \"Odd week for week that does not match pattern\"\r\n    (is (= false (bird-watcher/odd-week? [2 2 1 0 1 1 1])))))",
    "robot_simulator_test" : "(ns robot-simulator-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            robot-simulator))\r\n\r\n(def robbie (robot {:x -2 :y 1} :east))\r\n\r\n(deftest can-get-vals-bearing\r\n  (is (= :east (:bearing robbie))))\r\n\r\n(deftest can-get-vals-coords\r\n  (is (= {:x -2 :y 1} (:coordinates robbie))))\r\n\r\n(deftest can-turn-right\r\n  (is (= :north (turn-right :west))))\r\n\r\n(deftest can-turn-left\r\n  (is (= :west  (turn-left :north))))\r\n\r\n(deftest can-simulate-bearing\r\n  (is (= :west (:bearing (simulate \"RLAALAL\" robbie)))))\r\n\r\n(deftest can-simulate-coords\r\n  (is (= {:x 0 :y 2}\r\n         (:coordinates (simulate \"RLAALAL\" robbie)))))\r\n\r\n(deftest simulate-clutz-bearing\r\n  (let [clutz (->> (robot {:x 0 :y  0} :north)\r\n                   (simulate \"LAAARALA\"))]\r\n    (is (= :west (:bearing clutz)))))\r\n\r\n(deftest simulate-clutz-coords\r\n  (let [clutz (->> (robot {:x 0 :y  0} :north)\r\n                   (simulate \"LAAARALA\"))]\r\n    (is (= {:x -4 :y 1} (:coordinates clutz)))))\r\n\r\n(deftest simulate-sphero-bearing\r\n  (let [sphero (->> (robot {:x 2 :y -7} :east)\r\n                    (simulate \"RRAAAAALA\"))]\r\n    (is (= :south (:bearing sphero)))))\r\n\r\n(deftest simulate-sphero-coords\r\n  (let [sphero (->> (robot {:x 2 :y -7} :east)\r\n                    (simulate \"RRAAAAALA\"))]\r\n    (is (= {:x -3 :y -8} (:coordinates sphero)))))\r\n\r\n(deftest simulate-roomba-bearing\r\n  (let [roomba (->> (robot {:x 8 :y  4} :south)\r\n                    (simulate \"LAAARRRALLLL\"))]\r\n    (is (= :north (:bearing roomba)))))\r\n\r\n(deftest simulate-roomba-coords\r\n  (let [roomba (->> (robot {:x 8 :y  4} :south)\r\n                    (simulate \"LAAARRRALLLL\"))]\r\n    (is (= {:x 11 :y 5} (:coordinates roomba)))))\r\n",
    "wordy_test" : "(ns wordy-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            wordy))\r\n\r\n(deftest addition\r\n  (is (= (evaluate \"What is 1 plus 1?\") 2)))\r\n\r\n(deftest more-addition\r\n  (is (= (evaluate \"What is 53 plus 2?\") 55)))\r\n\r\n(deftest addition-with-negative-numbers\r\n  (is (= (evaluate \"What is -1 plus -10?\") -11)))\r\n\r\n(deftest large-addition\r\n  (is (= (evaluate \"What is 123 plus 45678?\") 45801)))\r\n\r\n(deftest subtraction\r\n  (is (= (evaluate \"What is 4 minus -12?\") 16)))\r\n\r\n(deftest multiplication\r\n  (is (= (evaluate \"What is -3 multiplied by 25?\") -75)))\r\n\r\n(deftest division\r\n  (is (= (evaluate \"What is 33 divided by -3?\") -11)))\r\n\r\n(deftest multiple-additions\r\n  (is (= (evaluate \"What is 1 plus 1 plus 1?\") 3)))\r\n\r\n(deftest addition-and-subtraction\r\n  (is (= (evaluate \"What is 1 plus 5 minus -2?\") 8)))\r\n\r\n(deftest multiple-subtraction\r\n  (is (= (evaluate \"What is 20 minus 4 minus 13?\") 3)))\r\n\r\n(deftest subtraction-then-addition\r\n  (is (= (evaluate \"What is 17 minus 6 plus 3?\") 14)))\r\n\r\n(deftest multiple-multiplication\r\n  (is (= (evaluate \"What is 2 multiplied by -2 multiplied by 3?\") -12)))\r\n\r\n(deftest addition-and-multiplication\r\n  (is (= (evaluate \"What is -3 plus 7 multiplied by -2?\") -8)))\r\n\r\n(deftest multiple-division\r\n  (is (= (evaluate \"What is -12 divided by 2 divided by -3?\") 2)))\r\n\r\n#_(deftest unknown-operation\r\n  (is (thrown?\r\n       IllegalArgumentException\r\n       (evaluate \"What is 52 cubed?\"))))\r\n\r\n#_(deftest Non-math-question\r\n  (is (thrown?\r\n       IllegalArgumentException\r\n       (evaluate \"Who is the President of the United States?\"))))\r\n\r\n",
    "squeaky_clean_test" : "(ns squeaky-clean-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            squeaky-clean))\r\n\r\n(deftest ^{:task 1} clean-single-letter\r\n  (is (= \"A\" (squeaky-clean/clean \"A\"))))\r\n\r\n(deftest ^{:task 1} clean-clean-string\r\n  (is (= \"àḃç\" (squeaky-clean/clean \"àḃç\"))))\r\n\r\n(deftest ^{:task 1} clean-string-with-spaces\r\n  (is (= \"my___Id\" (squeaky-clean/clean \"my   Id\"))))\r\n\r\n(deftest ^{:task 1} clean-empty-string\r\n  (is (= \"\" (squeaky-clean/clean \"\"))))\r\n\r\n(deftest ^{:task 2} clean-string-with-control-char\r\n  (is (= \"myCTRLId\" (squeaky-clean/clean \"my\\u0000Id\"))))\r\n\r\n(deftest ^{:task 3} convert-kebab-to-camel-case\r\n  (is (= \"àḂç\" (squeaky-clean/clean \"à-ḃç\"))))\r\n\r\n(deftest ^{:task 4} clean-string-with-special-characters\r\n  (is (= \"MyFinder\" (squeaky-clean/clean \"My😀😀Finder😀\"))))\r\n\r\n(deftest ^{:task 4} clean-string-with-numbers\r\n  (is (= \"MyFinder\" (squeaky-clean/clean \"1My2Finder3\"))))\r\n\r\n(deftest ^{:task 5} omit-lower-case-greek-letters\r\n  (is (= \"MyΟFinder\" (squeaky-clean/clean \"MyΟβιεγτFinder\"))))\r\n\r\n(deftest ^{:task 5} combine-conversions\r\n  (is (= \"_AbcĐCTRL\" (squeaky-clean/clean \"9 -abcĐ😀ω\\0\"))))\r\n",
    "binary_search_tree_test" : "(ns binary-search-tree-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [binary-search-tree :as bst]))\r\n\r\n(deftest data-is-retained\r\n  (is (= 4 (value (singleton 4)))))\r\n\r\n(deftest inserting-less\r\n  (let [t (insert 2 (singleton 4))]\r\n    (is (= 4 (value t)))\r\n    (is (= 2 (value (left t))))))\r\n\r\n(deftest inserting-same\r\n  (let [t (insert 4 (singleton 4))]\r\n    (is (= 4 (value t)))\r\n    (is (= 4 (value (left t))))))\r\n\r\n(deftest inserting-right\r\n  (let [t (insert 5 (singleton 4))]\r\n    (is (= 4 (value t)))\r\n    (is (= 5 (value (right t))))))\r\n\r\n(deftest complex-tree\r\n  (let [t (from-list [4 2 6 1 3 7 5])]\r\n    (is (= 4 (value t)))\r\n    (is (= 2 (value (left t))))\r\n    (is (= 1 (value (left (left t)))))\r\n    (is (= 3 (value (right (left t)))))\r\n    (is (= 6 (value (right t))))\r\n    (is (= 5 (value (left (right t)))))\r\n    (is (= 7 (value (right (right t)))))))\r\n\r\n(deftest iterating-one-element\r\n  (is (= [4] (to-list (singleton 4)))))\r\n\r\n(deftest iterating-over-smaller-element\r\n  (is (= [2 4] (to-list (from-list [4 2])))))\r\n\r\n(deftest iterating-over-larger-element\r\n  (is (= [4 5] (to-list (from-list [4 5])))))\r\n\r\n(deftest iterating-over-complex-tree\r\n  (is (= (range 1 8) (to-list (from-list [4 2 1 3 6 7 5])))))\r\n",
    "secret_handshake_test" : "(ns secret-handshake-test\r\n  (:require [clojure.test :refer [deftest testing is]]\r\n            secret-handshake))\r\n\r\n(deftest wink\r\n  (testing \"a wink is returned for binary 1\"\r\n    (is (= [\"wink\"] (commands 1)))))\r\n\r\n(deftest double-blink\r\n  (testing \"a double blink is returned for a binary 10\"\r\n    (is (= [\"double blink\"] (commands 2)))))\r\n\r\n(deftest close-your-eyes\r\n  (testing \"a close your eyes is returned for a binary 100\"\r\n    (is (= [\"close your eyes\"] (commands 4)))))\r\n\r\n(deftest jump\r\n  (testing \"a jump is returned for a binary 1000\"\r\n    (is (= [\"jump\"] (commands 8)))))\r\n\r\n(deftest two-actions\r\n  (testing \"commands returns multiple actions\"\r\n    (is (= [\"wink\" \"double blink\"] (commands 3)))))\r\n\r\n(deftest reversing\r\n  (testing \"giving a binary 10000 reverses actions\"\r\n    (is (= [\"double blink\" \"wink\"] (commands 19)))))\r\n\r\n(deftest reversing-one-action\r\n  (testing \"reversing one action returns the same action\"\r\n    (is (= [\"jump\"] (commands 24)))))\r\n\r\n(deftest reverse-nothing\r\n  (testing \"reversing nothing still gives nothing\"\r\n    (is (= [] (commands 16)))))\r\n\r\n(deftest all-actions\r\n  (testing \"all actions together\"\r\n    (is (=\r\n         [\"wink\" \"double blink\" \"close your eyes\" \"jump\"]\r\n         (commands 15)))))\r\n\r\n(deftest reverse-all-actions\r\n  (testing \"reversing all actions together\"\r\n    (is (=\r\n         [\"jump\" \"close your eyes\" \"double blink\" \"wink\"]\r\n         (commands 31)))))\r\n\r\n(deftest nothing\r\n  (testing \"do nothing for 0\"\r\n    (is (= [] (commands 0)))))\r\n\r\n(deftest lower-5-bits-zero\r\n  (testing \"do nothing for high numbers if lower 5 bits not set\"\r\n    (is (= [] (commands 32)))))\r\n",
    "clock_test" : "(ns clock-test\r\n  (:require [clock :refer :all]\r\n            [clojure.test :refer [deftest testing is]]))\r\n\r\n(deftest create-clock-test\r\n\r\n  (testing \"on the hour\"\r\n    (let [test-clock (clock->string (clock 8 0))]\r\n      (is (= \"08:00\" test-clock))))\r\n  (testing \"past the hour\"\r\n    (let [test-clock (clock->string (clock 11 9))]\r\n      (is (= \"11:09\" test-clock))))\r\n  (testing \"midnight is zero hours\"\r\n    (let [test-clock (clock->string (clock 24 0))]\r\n      (is (= \"00:00\" test-clock))))\r\n  (testing \"hour rolls over\"\r\n    (let [test-clock (clock->string (clock 25 0))]\r\n      (is (= \"01:00\" test-clock))))\r\n  (testing \"hour rolls over continuously\"\r\n    (let [test-clock (clock->string (clock 100 0))]\r\n      (is (= \"04:00\" test-clock))))\r\n  (testing \"sixty minutes is next hour\"\r\n    (let [test-clock (clock->string (clock 1 60))]\r\n      (is (= \"02:00\" test-clock))))\r\n  (testing \"minutes roll over\"\r\n    (let [test-clock (clock->string (clock 0 160))]\r\n      (is (= \"02:40\" test-clock))))\r\n  (testing \"minutes roll over continuously\"\r\n    (let [test-clock (clock->string (clock 0 1723))]\r\n      (is (= \"04:43\" test-clock))))\r\n  (testing \"hour and minutes roll over\"\r\n    (let [test-clock (clock->string (clock 25 160))]\r\n      (is (= \"03:40\" test-clock))))\r\n  (testing \"hour and minutes roll over continuously\"\r\n    (let [test-clock (clock->string (clock 201 3001))]\r\n      (is (= \"11:01\" test-clock))))\r\n  (testing \"hour and minutes roll over to exactly midnight\"\r\n    (let [test-clock (clock->string (clock 72 8640))]\r\n      (is (= \"00:00\" test-clock))))\r\n  (testing \"negative hour\"\r\n    (let [test-clock (clock->string (clock -1 15))]\r\n      (is (= \"23:15\" test-clock))))\r\n  (testing \"negative hour rolls over\"\r\n    (let [test-clock (clock->string (clock -25 0))]\r\n      (is (= \"23:00\" test-clock))))\r\n  (testing \"negative hour rolls over continuously\"\r\n    (let [test-clock (clock->string (clock -91 0))]\r\n      (is (= \"05:00\" test-clock))))\r\n  (testing \"negative minutes\"\r\n    (let [test-clock (clock->string (clock 1 -40))]\r\n      (is (= \"00:20\" test-clock))))\r\n  (testing \"negative minutes roll over\"\r\n    (let [test-clock (clock->string (clock 1 -160))]\r\n      (is (= \"22:20\" test-clock))))\r\n  (testing \"negative minutes roll over continuously\"\r\n    (let [test-clock (clock->string (clock 1 -4820))]\r\n      (is (= \"16:40\" test-clock))))\r\n  (testing \"negative hour and minutes both roll over\"\r\n    (let [test-clock (clock->string (clock -25 -160))]\r\n      (is (= \"20:20\" test-clock))))\r\n  (testing \"negative hour and minutes both roll over continuously\"\r\n    (let [test-clock (clock->string (clock -121 -5810))]\r\n      (is (= \"22:10\" test-clock)))))\r\n\r\n(deftest add-time-test\r\n\r\n  (testing \"add minutes\"\r\n    (let [test-clock (clock->string (add-time (clock 10 0) 3))]\r\n      (is (= \"10:03\" test-clock))))\r\n  (testing \"add no minutes\"\r\n    (let [test-clock (clock->string (add-time (clock 6 41) 0))]\r\n      (is (= \"06:41\" test-clock))))\r\n  (testing \"add to next hour\"\r\n    (let [test-clock (clock->string (add-time (clock 0 45) 40))]\r\n      (is (= \"01:25\" test-clock))))\r\n  (testing \"add more than one hour\"\r\n    (let [test-clock (clock->string (add-time (clock 10 0) 61))]\r\n      (is (= \"11:01\" test-clock))))\r\n  (testing \"add more than two hours with carry\"\r\n    (let [test-clock (clock->string (add-time (clock 0 45) 160))]\r\n      (is (= \"03:25\" test-clock))))\r\n  (testing \"add across midnight\"\r\n    (let [test-clock (clock->string (add-time (clock 23 59) 2))]\r\n      (is (= \"00:01\" test-clock))))\r\n  (testing \"add more than one day (1500 min = 25 hrs)\"\r\n    (let [test-clock (clock->string (add-time (clock 5 32) 1500))]\r\n      (is (= \"06:32\" test-clock))))\r\n  (testing \"add more than two days\"\r\n    (let [test-clock (clock->string (add-time (clock 1 1) 3500))]\r\n      (is (= \"11:21\" test-clock))))\r\n  (testing \"subtract minutes\"\r\n    (let [test-clock (clock->string (add-time (clock 10 3) -3))]\r\n      (is (= \"10:00\" test-clock))))\r\n  (testing \"subtract to previous hour\"\r\n    (let [test-clock (clock->string (add-time (clock 10 3) -30))]\r\n      (is (= \"09:33\" test-clock))))\r\n  (testing \"subtract more than an hour\"\r\n    (let [test-clock (clock->string (add-time (clock 10 3) -70))]\r\n      (is (= \"08:53\" test-clock))))\r\n  (testing \"subtract across midnight\"\r\n    (let [test-clock (clock->string (add-time (clock 0 3) -4))]\r\n      (is (= \"23:59\" test-clock))))\r\n  (testing \"subtract more than two hours\"\r\n    (let [test-clock (clock->string (add-time (clock 0 0) -160))]\r\n      (is (= \"21:20\" test-clock))))\r\n  (testing \"subtract more than two hours with borrow\"\r\n    (let [test-clock (clock->string (add-time (clock 6 15) -160))]\r\n      (is (= \"03:35\" test-clock))))\r\n  (testing \"subtract more than one day (1500 min = 25 hrs)\"\r\n    (let [test-clock (clock->string (add-time (clock 5 32) -1500))]\r\n      (is (= \"04:32\" test-clock))))\r\n  (testing \"subtract more than two days\"\r\n    (let [test-clock (clock->string (add-time (clock 2 20) -3000))]\r\n      (is (= \"00:20\" test-clock)))))\r\n\r\n(deftest equal-clock-test\r\n  (testing \"clocks with same time\"\r\n    (let [clock1 (clock 15 37)\r\n          clock2 (clock 15 37)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks a minute apart\"\r\n    (let [clock1 (clock 15 36)\r\n          clock2 (clock 15 37)]\r\n      (is (not= clock1 clock2))))\r\n  (testing \"clocks an hour apart\"\r\n    (let [clock1 (clock 14 37)\r\n          clock2 (clock 15 37)]\r\n      (is (not= clock1 clock2))))\r\n  (testing \"clocks with hour overflow\"\r\n    (let [clock1 (clock 10 37)\r\n          clock2 (clock 34 37)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with hour overflow by several days\"\r\n    (let [clock1 (clock 3 11)\r\n          clock2 (clock 99 11)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hour\"\r\n    (let [clock1 (clock 22 40)\r\n          clock2 (clock -2 40)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hour that wraps\"\r\n    (let [clock1 (clock 17 3)\r\n          clock2 (clock -31 3)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hour that wraps multiple times\"\r\n    (let [clock1 (clock 13 49)\r\n          clock2 (clock -83 49)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with minute overflow\"\r\n    (let [clock1 (clock 0 1)\r\n          clock2 (clock 0 1441)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with minute overflow by several days\"\r\n    (let [clock1 (clock 2 2)\r\n          clock2 (clock 2 4322)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative minute\"\r\n    (let [clock1 (clock 2 40)\r\n          clock2 (clock 3 -20)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative minute that wraps\"\r\n    (let [clock1 (clock 4 10)\r\n          clock2 (clock 5 -1490)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative minute that wraps multiple times\"\r\n    (let [clock1 (clock 6 15)\r\n          clock2 (clock 6 -4305)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hours and minutes\"\r\n    (let [clock1 (clock 7 32)\r\n          clock2 (clock -12 -268)]\r\n      (is (= clock1 clock2))))\r\n  (testing \"clocks with negative hours and minutes that wrap\"\r\n    (let [clock1 (clock 18 7)\r\n          clock2 (clock -54 -11513)]\r\n      (is (= clock1 clock2)))))\r\n",
    "grade_school_test" : "(ns grade-school-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            grade-school))\r\n\r\n(def db {})\r\n\r\n(deftest add-student\r\n  (is (= {2 [\"Aimee\"]} (add db \"Aimee\" 2))))\r\n\r\n(deftest add-more-students-in-same-class\r\n  (is (= {2 [\"James\", \"Blair\", \"Paul\"]}\r\n         (-> db\r\n             (add \"James\" 2)\r\n             (add \"Blair\" 2)\r\n             (add \"Paul\" 2)))))\r\n\r\n(deftest add-students-to-different-grades\r\n  (is (= {3 [\"Chelsea\"] 7 [\"Logan\"]}\r\n         (-> db\r\n             (add \"Chelsea\" 3)\r\n             (add \"Logan\" 7)))))\r\n\r\n(deftest get-students-in-a-grade\r\n  (is (= [\"Franklin\", \"Bradley\"]\r\n         (-> db\r\n             (add \"Franklin\" 5)\r\n             (add \"Bradley\" 5)\r\n             (add \"Jeff\" 1)\r\n             (grade 5)))))\r\n\r\n(deftest get-students-in-a-non-existent-grade\r\n  (is (= [] (grade db 1))))\r\n\r\n(deftest sorted-grade-school\r\n  (is (= (sorted-map 3 [\"Kyle\"]\r\n                     4 [\"Christopher\" \"Jennifer\"]\r\n                     6 [\"Kareem\"])\r\n         (-> db\r\n             (add \"Jennifer\" 4)\r\n             (add \"Kareem\" 6)\r\n             (add \"Christopher\" 4)\r\n             (add \"Kyle\" 3)\r\n             (sorted)))))\r\n\r\n(deftest sorted-grade_school-keys-sorted\r\n  (is (= [3 4 6]\r\n         (-> db\r\n             (add \"Jennifer\" 4)\r\n             (add \"Kareem\" 6)\r\n             (add \"Christopher\" 4)\r\n             (add \"Kyle\" 3)\r\n             (sorted)\r\n             (keys)))))\r\n",
    "nucleotide_count_test" : "(ns nucleotide-count-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            nucleotide-count))\r\n\r\n(deftest empty-dna-strand-has-no-adenosine\r\n  (is (= 0 (count-of-nucleotide-in-strand \\A, \"\"))))\r\n\r\n(deftest empty-dna-strand-has-no-nucleotides\r\n  (is (= {\\A 0, \\T 0, \\C 0, \\G 0}\r\n         (nucleotide-counts \"\"))))\r\n\r\n(deftest repetitive-cytidine-gets-counted\r\n  (is (= 5 (count-of-nucleotide-in-strand \\C \"CCCCC\"))))\r\n\r\n(deftest repetitive-sequence-has-only-guanosine\r\n  (is (= {\\A 0, \\T 0, \\C 0, \\G 8}\r\n         (nucleotide-counts \"GGGGGGGG\"))))\r\n\r\n(deftest counts-only-thymidine\r\n  (is (= 1 (count-of-nucleotide-in-strand \\T \"GGGGGTAACCCGG\"))))\r\n\r\n#_(deftest validates-nucleotides\r\n  (is (thrown? (count-of-nucleotide-in-strand \\X \"GACT\"))))\r\n\r\n(deftest counts-all-nucleotides\r\n  (let [s \"AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\"]\r\n    (is (= {\\A 20, \\T 21, \\G 17, \\C 12}\r\n           (nucleotide-counts s)))))\r\n",
    "bob_test" : "(ns bob-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            bob))\r\n\r\n(deftest responds-to-something\r\n  (is (= \"Whatever.\" (response-for \"Tom-ay-to, tom-aaaah-to.\"))))\r\n\r\n(deftest responds-to-shouts\r\n  (is (= \"Whoa, chill out!\" (response-for \"WATCH OUT!\"))))\r\n\r\n(deftest responds-to-shouting-gibberish\r\n  (is (= \"Whoa, chill out!\" (response-for \"FCECDFCAAB\"))))\r\n\r\n(deftest responds-to-questions\r\n  (is (= \"Sure.\"\r\n         (response-for \"Does this cryogenic chamber make me look fat?\"))))\r\n\r\n(deftest responds-to-numeric-question\r\n  (is (= \"Sure.\" (response-for \"You are, what, like 15?\"))))\r\n\r\n(deftest responds-to-gibberish-question\r\n  (is (= \"Sure.\" (response-for \"fffbbcbeab?\"))))\r\n\r\n(deftest responds-to-forceful-talking\r\n  (is (= \"Whatever.\" (response-for \"Let's go make out behind the gym!\"))))\r\n\r\n(deftest responds-to-acronyms\r\n  (is (= \"Whatever.\"\r\n         (response-for \"It's OK if you don't want to go to the DMV.\"))))\r\n\r\n(deftest responds-to-forceful-questions\r\n  (is (= \"Calm down, I know what I'm doing!\"\r\n         (response-for \"WHAT THE HELL WERE YOU THINKING?\"))))\r\n\r\n(deftest responds-to-shouting-numbers\r\n  (is (= \"Whoa, chill out!\" (response-for \"1, 2, 3 GO!\"))))\r\n\r\n(deftest responds-to-no-letters\r\n  (is (= \"Whatever.\" (response-for \"1, 2, 3\"))))\r\n\r\n(deftest responds-to-question-with-no-letters\r\n  (is (= \"Sure.\" (response-for \"4?\"))))\r\n\r\n(deftest responds-to-shouting-with-special-characters\r\n  (is (= \"Whoa, chill out!\"\r\n         (response-for \"ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!\"))))\r\n\r\n(deftest responds-to-shouting-with-no-exclamation-mark\r\n  (is (= \"Whoa, chill out!\" (response-for \"I HATE THE DMV\"))))\r\n\r\n(deftest responds-to-statement-containing-question-mark\r\n  (is (= \"Whatever.\" (response-for \"Ending with ? means a question.\"))))\r\n\r\n(deftest responds-to-non-letters-with-question\r\n  (is (= \"Sure.\" (response-for \":) ?\"))))\r\n\r\n(deftest responds-to-prattling-on\r\n  (is (= \"Sure.\" (response-for \"Wait! Hang on. Are you going to be OK?\"))))\r\n\r\n(deftest responds-to-silence\r\n  (is (= \"Fine. Be that way!\" (response-for \"\"))))\r\n\r\n(deftest responds-to-prolonged-silence\r\n  (is (= \"Fine. Be that way!\" (response-for \"    \"))))\r\n\r\n(deftest responds-to-alternate-silence\r\n  (is (= \"Fine. Be that way!\" (response-for \"\\\\t\\\\t\\\\t\\\\t\\\\t\"))))\r\n\r\n(deftest responds-to-multiple-line-question\r\n  (is (= \"Whatever.\"\r\n         (response-for \"\\\\nDoes this cryogenic chamber make me look fat?\\\\nNo.\"))))\r\n\r\n(deftest responds-to-starting-with-whitespace\r\n  (is (= \"Whatever.\" (response-for \"         hmmmmmmm...\"))))\r\n\r\n(deftest responds-to-ending-with-whitespace\r\n  (is (= \"Sure.\" (response-for \"Okay if like my  spacebar  quite a bit?   \"))))\r\n\r\n(deftest responds-to-other-whitespace\r\n  (is (= \"Fine. Be that way!\" (response-for \"\\\\n\\\\r \\\\t\"))))\r\n\r\n(deftest responds-to-non-question-ending-with-whitespace\r\n  (is (= \"Whatever.\"\r\n         (response-for \"This is a statement ending with whitespace      \"))))\r\n",
    "trinary_test" : "(ns trinary-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [trinary :refer [to-decimal]]))\r\n\r\n(deftest trinary-1-is-decimal-1\r\n  (testing \"1 should still be 1\"\r\n    (is (= 1 (to-decimal \"1\")))))\r\n\r\n(deftest trinary-2-is-decimal-2\r\n  (testing \"2 should still be 2\"\r\n    (is (= 2 (to-decimal \"2\")))))\r\n\r\n(deftest trinary-10-is-decimal-3\r\n  (testing \"10 should be 3\"\r\n    (is (= 3 (to-decimal \"10\")))))\r\n\r\n(deftest trinary-11-is-decimal-4\r\n  (testing \"11 should be 4\"\r\n    (is (= 4 (to-decimal \"11\")))))\r\n\r\n(deftest trinary-100-is-decimal-9\r\n  (testing \"100 should be 9\"\r\n    (is (= 9 (to-decimal \"100\")))))\r\n\r\n(deftest trinary-112-is-decimal-14\r\n  (testing \"112 should be 14\"\r\n    (is (= 14 (to-decimal \"112\")))))\r\n\r\n(deftest trinary-222-is-decimal-26\r\n  (testing \"222 should be 26\"\r\n    (is (= 26 (to-decimal \"222\")))))\r\n\r\n(deftest trinary-1122000120-is-decimal-32091\r\n  (testing \"1122000120 should be 32091\"\r\n    (is (= 32091 (to-decimal \"1122000120\")))))\r\n\r\n(deftest invalid-input-is-decimal-0\r\n  (testing \"carrot should be invalid\"\r\n    (is (= 0 (to-decimal \"carrot\")))))\r\n\r\n(deftest invalid-input-with-digits-is-decimal-0\r\n  (testing \"0a1b2c should be 0\"\r\n    (is (= 0 (to-decimal \"0a1b2c\")))))\r\n",
    "pascals_triangle_test" : "(ns pascals-triangle-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [pascals-triangle :refer :all]))\r\n\r\n(deftest test-one-row\r\n  (testing \"First row\"\r\n    (is (= (take 1 triangle) '([1])))))\r\n\r\n(deftest test-two-rows\r\n  (testing \"First two rows\"\r\n    (is (= (take 2 triangle) [[1], [1 1]]))))\r\n\r\n(deftest test-three-rows\r\n  (testing \"First 3 rows\"\r\n    (is (= (take 3 triangle) [[1], [1 1], [1 2 1]]))))\r\n\r\n(deftest test-third-row\r\n  (testing \"Third row\"\r\n    (is (= (row 3) [1 2 1]))))\r\n\r\n(deftest test-fourth-row\r\n  (testing \"Fourth row\"\r\n    (is (= (row 4) [1 3 3 1]))))\r\n\r\n(deftest test-fifth-row\r\n  (testing \"Fifth row\"\r\n    (is (= (row 5) [1 4 6 4 1]))))\r\n\r\n#_(deftest triangle-20th-row\r\n  (testing \"20th row\"\r\n    (is (= (row 20)\r\n           (let [v [1 19 171 969 3876 11628 27132 50388 75582 92378]]\r\n             (into v (rseq v)))))))\r\n\r\n\r\n",
    "hamming_test" : "(ns hamming-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            hamming))\r\n\r\n(deftest no-difference-between-empty-strands\r\n  (is (= 0 (distance \"\" \"\"))))\r\n\r\n(deftest no-difference-between-identical-strands\r\n  (is (= 0 (distance \"GGACTGA\" \"GGACTGA\"))))\r\n\r\n(deftest complete-distance-in-small-strand\r\n  (is (= 3 (distance \"ACT\" \"GGA\"))))\r\n\r\n(deftest small-distance-in-middle-somewhere\r\n  (is (= 1 (distance \"GGACG\" \"GGTCG\"))))\r\n\r\n(deftest larger-distance\r\n  (is (= 2 (distance \"ACCAGGG\" \"ACTATGG\"))))\r\n\r\n(deftest undefined-when-lengths-are-different\r\n  (is (= nil (distance \"AAAC\" \"TAGGGGAGGCTAGCGGTAGGAC\")))\r\n  (is (= nil (distance \"GACTACGGACAGGGTAACATAG\" \"GACA\"))))\r\n",
    "meetup_test" : "(ns meetup-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            meetup))\r\n\r\n(deftest monteenth-of-may-2013\r\n  (is (= [2013 5 13] (meetup 5 2013 :monday :teenth))))\r\n\r\n(deftest monteenth-of-august-2013\r\n  (is (= [2013 8 19] (meetup 8 2013 :monday :teenth))))\r\n\r\n(deftest monteenth-of-september-2013\r\n  (is (= [2013 9 16] (meetup 9 2013 :monday :teenth))))\r\n\r\n(deftest tuesteenth-of-march-2013\r\n  (is (= [2013 3 19] (meetup 3 2013 :tuesday :teenth))))\r\n\r\n(deftest tuesteenth-of-april-2013\r\n  (is (= [2013 4 16] (meetup 4 2013 :tuesday :teenth))))\r\n\r\n(deftest tuesteenth-of-august-2013\r\n  (is (= [2013 8 13] (meetup 8 2013 :tuesday :teenth))))\r\n\r\n(deftest wednesteenth-of-january-2013\r\n  (is (= [2013 1 16] (meetup 1 2013 :wednesday :teenth))))\r\n\r\n(deftest wednesteenth-of-february-2013\r\n  (is (= [2013 2 13] (meetup 2 2013 :wednesday :teenth))))\r\n\r\n(deftest wednesteenth-of-june-2013\r\n  (is (= [2013 6 19] (meetup 6 2013 :wednesday :teenth))))\r\n\r\n(deftest thursteenth-of-may-2013\r\n  (is (= [2013 5 16] (meetup 5 2013 :thursday :teenth))))\r\n\r\n(deftest thursteenth-of-june-2013\r\n  (is (= [2013 6 13] (meetup 6 2013 :thursday :teenth))))\r\n\r\n(deftest thursteenth-of-september-2013\r\n  (is (= [2013 9 19] (meetup 9 2013 :thursday :teenth))))\r\n\r\n(deftest friteenth-of-april-2013\r\n  (is (= [2013 4 19] (meetup 4 2013 :friday :teenth))))\r\n\r\n(deftest friteenth-of-august-2013\r\n  (is (= [2013 8 16] (meetup 8 2013 :friday :teenth))))\r\n\r\n(deftest friteenth-of-september-2013\r\n  (is (= [2013 9 13] (meetup 9 2013 :friday :teenth))))\r\n\r\n(deftest saturteenth-of-february-2013\r\n  (is (= [2013 2 16] (meetup 2 2013 :saturday :teenth))))\r\n\r\n(deftest saturteenth-of-april-2013\r\n  (is (= [2013 4 13] (meetup 4 2013 :saturday :teenth))))\r\n\r\n(deftest saturteenth-of-october-2013\r\n  (is (= [2013 10 19] (meetup 10 2013 :saturday :teenth))))\r\n\r\n(deftest sunteenth-of-may-2013\r\n  (is (= [2013 5 19] (meetup 5 2013 :sunday :teenth))))\r\n\r\n(deftest sunteenth-of-june-2013\r\n  (is (= [2013 6 16] (meetup 6 2013 :sunday :teenth))))\r\n\r\n(deftest sunteenth-of-october-2013\r\n  (is (= [2013 10 13] (meetup 10 2013 :sunday :teenth))))\r\n\r\n(deftest first-monday-of-march-2013\r\n  (is (= [2013 3 4] (meetup 3 2013 :monday :first))))\r\n\r\n(deftest first-monday-of-april-2013\r\n  (is (= [2013 4 1] (meetup 4 2013 :monday :first))))\r\n\r\n(deftest first-tuesday-of-may-2013\r\n  (is (= [2013 5 7] (meetup 5 2013 :tuesday :first))))\r\n\r\n(deftest first-tuesday-of-june-2013\r\n  (is (= [2013 6 4] (meetup 6 2013 :tuesday :first))))\r\n\r\n(deftest first-wednesday-of-july-2013\r\n  (is (= [2013 7 3] (meetup 7 2013 :wednesday :first))))\r\n\r\n(deftest first-wednesday-of-august-2013\r\n  (is (= [2013 8 7] (meetup 8 2013 :wednesday :first))))\r\n\r\n(deftest first-thursday-of-september-2013\r\n  (is (= [2013 9 5] (meetup 9 2013 :thursday :first))))\r\n\r\n(deftest first-thursday-of-october-2013\r\n  (is (= [2013 10 3] (meetup 10 2013 :thursday :first))))\r\n\r\n(deftest first-friday-of-november-2013\r\n  (is (= [2013 11 1] (meetup 11 2013 :friday :first))))\r\n\r\n(deftest first-friday-of-december-2013\r\n  (is (= [2013 12 6] (meetup 12 2013 :friday :first))))\r\n\r\n(deftest first-saturday-of-january-2013\r\n  (is (= [2013 1 5] (meetup 1 2013 :saturday :first))))\r\n\r\n(deftest first-saturday-of-february-2013\r\n  (is (= [2013 2 2] (meetup 2 2013 :saturday :first))))\r\n\r\n(deftest first-sunday-of-march-2013\r\n  (is (= [2013 3 3] (meetup 3 2013 :sunday :first))))\r\n\r\n(deftest first-sunday-of-april-2013\r\n  (is (= [2013 4 7] (meetup 4 2013 :sunday :first))))\r\n\r\n(deftest second-monday-of-march-2013\r\n  (is (= [2013 3 11] (meetup 3 2013 :monday :second))))\r\n\r\n(deftest second-monday-of-april-2013\r\n  (is (= [2013 4 8] (meetup 4 2013 :monday :second))))\r\n\r\n(deftest second-tuesday-of-may-2013\r\n  (is (= [2013 5 14] (meetup 5 2013 :tuesday :second))))\r\n\r\n(deftest second-tuesday-of-june-2013\r\n  (is (= [2013 6 11] (meetup 6 2013 :tuesday :second))))\r\n\r\n(deftest second-wednesday-of-july-2013\r\n  (is (= [2013 7 10] (meetup 7 2013 :wednesday :second))))\r\n\r\n(deftest second-wednesday-of-august-2013\r\n  (is (= [2013 8 14] (meetup 8 2013 :wednesday :second))))\r\n\r\n(deftest second-thursday-of-september-2013\r\n  (is (= [2013 9 12] (meetup 9 2013 :thursday :second))))\r\n\r\n(deftest second-thursday-of-october-2013\r\n  (is (= [2013 10 10] (meetup 10 2013 :thursday :second))))\r\n\r\n(deftest second-friday-of-november-2013\r\n  (is (= [2013 11 8] (meetup 11 2013 :friday :second))))\r\n\r\n(deftest second-friday-of-december-2013\r\n  (is (= [2013 12 13] (meetup 12 2013 :friday :second))))\r\n\r\n(deftest second-saturday-of-january-2013\r\n  (is (= [2013 1 12] (meetup 1 2013 :saturday :second))))\r\n\r\n(deftest second-saturday-of-february-2013\r\n  (is (= [2013 2 9] (meetup 2 2013 :saturday :second))))\r\n\r\n(deftest second-sunday-of-march-2013\r\n  (is (= [2013 3 10] (meetup 3 2013 :sunday :second))))\r\n\r\n(deftest second-sunday-of-april-2013\r\n  (is (= [2013 4 14] (meetup 4 2013 :sunday :second))))\r\n\r\n(deftest third-monday-of-march-2013\r\n  (is (= [2013 3 18] (meetup 3 2013 :monday :third))))\r\n\r\n(deftest third-monday-of-april-2013\r\n  (is (= [2013 4 15] (meetup 4 2013 :monday :third))))\r\n\r\n(deftest third-tuesday-of-may-2013\r\n  (is (= [2013 5 21] (meetup 5 2013 :tuesday :third))))\r\n\r\n(deftest third-tuesday-of-june-2013\r\n  (is (= [2013 6 18] (meetup 6 2013 :tuesday :third))))\r\n\r\n(deftest third-wednesday-of-july-2013\r\n  (is (= [2013 7 17] (meetup 7 2013 :wednesday :third))))\r\n\r\n(deftest third-wednesday-of-august-2013\r\n  (is (= [2013 8 21] (meetup 8 2013 :wednesday :third))))\r\n\r\n(deftest third-thursday-of-september-2013\r\n  (is (= [2013 9 19] (meetup 9 2013 :thursday :third))))\r\n\r\n(deftest third-thursday-of-october-2013\r\n  (is (= [2013 10 17] (meetup 10 2013 :thursday :third))))\r\n\r\n(deftest third-friday-of-november-2013\r\n  (is (= [2013 11 15] (meetup 11 2013 :friday :third))))\r\n\r\n(deftest third-friday-of-december-2013\r\n  (is (= [2013 12 20] (meetup 12 2013 :friday :third))))\r\n\r\n(deftest third-saturday-of-january-2013\r\n  (is (= [2013 1 19] (meetup 1 2013 :saturday :third))))\r\n\r\n(deftest third-saturday-of-february-2013\r\n  (is (= [2013 2 16] (meetup 2 2013 :saturday :third))))\r\n\r\n(deftest third-sunday-of-march-2013\r\n  (is (= [2013 3 17] (meetup 3 2013 :sunday :third))))\r\n\r\n(deftest third-sunday-of-april-2013\r\n  (is (= [2013 4 21] (meetup 4 2013 :sunday :third))))\r\n\r\n(deftest fourth-monday-of-march-2013\r\n  (is (= [2013 3 25] (meetup 3 2013 :monday :fourth))))\r\n\r\n(deftest fourth-monday-of-april-2013\r\n  (is (= [2013 4 22] (meetup 4 2013 :monday :fourth))))\r\n\r\n(deftest fourth-tuesday-of-may-2013\r\n  (is (= [2013 5 28] (meetup 5 2013 :tuesday :fourth))))\r\n\r\n(deftest fourth-tuesday-of-june-2013\r\n  (is (= [2013 6 25] (meetup 6 2013 :tuesday :fourth))))\r\n\r\n(deftest fourth-wednesday-of-july-2013\r\n  (is (= [2013 7 24] (meetup 7 2013 :wednesday :fourth))))\r\n\r\n(deftest fourth-wednesday-of-august-2013\r\n  (is (= [2013 8 28] (meetup 8 2013 :wednesday :fourth))))\r\n\r\n(deftest fourth-thursday-of-september-2013\r\n  (is (= [2013 9 26] (meetup 9 2013 :thursday :fourth))))\r\n\r\n(deftest fourth-thursday-of-october-2013\r\n  (is (= [2013 10 24] (meetup 10 2013 :thursday :fourth))))\r\n\r\n(deftest fourth-friday-of-november-2013\r\n  (is (= [2013 11 22] (meetup 11 2013 :friday :fourth))))\r\n\r\n(deftest fourth-friday-of-december-2013\r\n  (is (= [2013 12 27] (meetup 12 2013 :friday :fourth))))\r\n\r\n(deftest fourth-saturday-of-january-2013\r\n  (is (= [2013 1 26] (meetup 1 2013 :saturday :fourth))))\r\n\r\n(deftest fourth-saturday-of-february-2013\r\n  (is (= [2013 2 23] (meetup 2 2013 :saturday :fourth))))\r\n\r\n(deftest fourth-sunday-of-march-2013\r\n  (is (= [2013 3 24] (meetup 3 2013 :sunday :fourth))))\r\n\r\n(deftest fourth-sunday-of-april-2013\r\n  (is (= [2013 4 28] (meetup 4 2013 :sunday :fourth))))\r\n\r\n(deftest last-monday-of-march-2013\r\n  (is (= [2013 3 25] (meetup 3 2013 :monday :last))))\r\n\r\n(deftest last-monday-of-april-2013\r\n  (is (= [2013 4 29] (meetup 4 2013 :monday :last))))\r\n\r\n(deftest last-tuesday-of-may-2013\r\n  (is (= [2013 5 28] (meetup 5 2013 :tuesday :last))))\r\n\r\n(deftest last-tuesday-of-june-2013\r\n  (is (= [2013 6 25] (meetup 6 2013 :tuesday :last))))\r\n\r\n(deftest last-wednesday-of-july-2013\r\n  (is (= [2013 7 31] (meetup 7 2013 :wednesday :last))))\r\n\r\n(deftest last-wednesday-of-august-2013\r\n  (is (= [2013 8 28] (meetup 8 2013 :wednesday :last))))\r\n\r\n(deftest last-thursday-of-september-2013\r\n  (is (= [2013 9 26] (meetup 9 2013 :thursday :last))))\r\n\r\n(deftest last-thursday-of-october-2013\r\n  (is (= [2013 10 31] (meetup 10 2013 :thursday :last))))\r\n\r\n(deftest last-friday-of-november-2013\r\n  (is (= [2013 11 29] (meetup 11 2013 :friday :last))))\r\n\r\n(deftest last-friday-of-december-2013\r\n  (is (= [2013 12 27] (meetup 12 2013 :friday :last))))\r\n\r\n(deftest last-saturday-of-january-2013\r\n  (is (= [2013 1 26] (meetup 1 2013 :saturday :last))))\r\n\r\n(deftest last-saturday-of-february-2013\r\n  (is (= [2013 2 23] (meetup 2 2013 :saturday :last))))\r\n\r\n(deftest last-sunday-of-march-2013\r\n  (is (= [2013 3 31] (meetup 3 2013 :sunday :last))))\r\n\r\n(deftest last-sunday-of-april-2013\r\n  (is (= [2013 4 28] (meetup 4 2013 :sunday :last))))\r\n",
    "hello_world_test" : "(ns hello-world-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            hello-world))\r\n\r\n(deftest hello-world-test\r\n  (is (= \"Hello, World!\" (hello))))\r\n",
    "leap_test" : "(ns leap-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            leap))\r\n\r\n(deftest year-not-divisible-by-4\r\n  (is (not (leap-year? 2015))))\r\n\r\n(deftest year-divisible-by-2-but-not-4\r\n  (is (not (leap-year? 1970))))\r\n\r\n(deftest year-divisible-by-4-but-not-100\r\n  (is (leap-year? 1996)))\r\n\r\n(deftest year-divisible-by-4-and-5\r\n  (is (leap-year? 1960)))\r\n\r\n(deftest year-divisible-by-100-but-not-400\r\n  (is (not (leap-year? 2100))))\r\n\r\n(deftest year-divisible-by-100-but-not-by-3\r\n  (is (not (leap-year? 1900))))\r\n\r\n(deftest year-divisible-by-400\r\n  (is (leap-year? 2000)))\r\n\r\n(deftest year-divisible-by-400-but-not-125\r\n  (is (leap-year? 2400)))\r\n\r\n(deftest year-divisible-by-200-but-not-by-400\r\n  (is (not (leap-year? 1800))))\r\n",
    "protein_translation_test" : "(ns protein-translation-test\r\n  (:require [clojure.test :refer [deftest is are]]\r\n            protein-translation))\r\n\r\n(deftest AUG-translates-to-Methionine\r\n  (is (= \"Methionine\" (translate-codon \"AUG\"))))\r\n\r\n(deftest UGG-translates-to-Tryptophan\r\n  (is (= \"Tryptophan\" (translate-codon \"UGG\"))))\r\n\r\n(deftest identifies-Phenylalanine-codons\r\n  (is (= \"Phenylalanine\" (translate-codon \"UUU\")))\r\n  (is (= \"Phenylalanine\" (translate-codon \"UUC\"))))\r\n\r\n(deftest identifies-Leucine-codons\r\n  (is (= \"Leucine\" (translate-codon \"UUA\")))\r\n  (is (= \"Leucine\" (translate-codon \"UUG\"))))\r\n\r\n(deftest identiefies-Serine-codons\r\n  (is (= \"Serine\" (translate-codon \"UCU\")))\r\n  (is (= \"Serine\" (translate-codon \"UCC\")))\r\n  (is (= \"Serine\" (translate-codon \"UCA\")))\r\n  (is (= \"Serine\" (translate-codon \"UCG\"))))\r\n\r\n(deftest identiefies-Tyrosine-codons\r\n  (is (= \"Tyrosine\" (translate-codon \"UAU\")))\r\n  (is (= \"Tyrosine\" (translate-codon \"UAC\"))))\r\n\r\n(deftest identifies-Cysteine-codons\r\n  (is (= \"Cysteine\" (translate-codon \"UGU\")))\r\n  (is (= \"Cysteine\" (translate-codon \"UGC\"))))\r\n\r\n(deftest identifies-stop-codons\r\n  (is (= \"STOP\" (translate-codon \"UAA\")))\r\n  (is (= \"STOP\" (translate-codon \"UAG\")))\r\n  (is (= \"STOP\" (translate-codon \"UGA\"))))\r\n\r\n(deftest translates-rna-strand-into-correct-protein\r\n  (is (= [\"Methionine\" \"Phenylalanine\" \"Tryptophan\"] (translate-rna \"AUGUUUUGG\"))))\r\n\r\n(deftest stops-translation-if-stop-codon-present\r\n  (is (= [\"Methionine\" \"Phenylalanine\"] (translate-rna \"AUGUUUUAA\"))))\r\n\r\n(deftest stops-translation-of-longer-strand\r\n  (is (= [\"Tryptophan\" \"Cysteine\" \"Tyrosine\"] (translate-rna \"UGGUGUUAUUAAUGGUUU\"))))\r\n",
    "atbash_cipher_test" : "(ns atbash-cipher-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            atbash-cipher))\r\n\r\n(deftest encode-no\r\n  (is (= \"ml\" (encode \"no\"))))\r\n\r\n(deftest encode-yes\r\n  (is (= \"bvh\" (encode \"yes\"))))\r\n\r\n(deftest encode-OMG\r\n  (is (= \"lnt\" (encode \"OMG\"))))\r\n\r\n(deftest encode-O-M-G\r\n  (is (= \"lnt\" (encode \"O M G\"))))\r\n\r\n(deftest encode-long-word\r\n  (is (= \"nrmwy oldrm tob\" (encode \"mindblowingly\"))))\r\n\r\n(deftest encode-numbers\r\n  (is (= \"gvhgr mt123 gvhgr mt\"\r\n         (encode \"Testing, 1 2 3, testing.\"))))\r\n\r\n(deftest encode-sentence\r\n  (is (= \"gifgs rhurx grlm\" (encode \"Truth is fiction.\"))))\r\n\r\n(deftest encode-all-the-things\r\n  (let [plaintext \"The quick brown fox jumps over the lazy dog.\"\r\n        cipher    \"gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt\"]\r\n    (is (= cipher (encode plaintext)))))\r\n",
    "zipper_test" : "(ns zipper-test\r\n  (:require [clojure.test :refer [deftest testing is run-tests]]\r\n             zipper))\r\n\r\n(def t1 {:value 1, :left {:value 2, :left nil, :right {:value 3, :left nil, :right nil}}, :right {:value 4, :left nil, :right nil}})\r\n\r\n(deftest expected-value-test\r\n  (let [tree {:value 1\r\n              :left  {:value 2\r\n                      :left  nil\r\n                      :right {:value 3\r\n                              :left  nil\r\n                              :right nil}}\r\n              :right {:value 4\r\n                      :left  nil\r\n                      :right nil}}]\r\n    (testing \"data is retained\"\r\n      (is (= tree (-> tree from-tree to-tree))))\r\n    (testing \"left, right and value\"\r\n      (is (= 3 (-> t1\r\n                   from-tree\r\n                   left\r\n                   right\r\n                   value\r\n                   ))))\r\n    (testing \"dead end\"\r\n      (is (nil? (-> tree\r\n                     from-tree\r\n                     left\r\n                     left))))\r\n    (testing \"tree from deep focus\"\r\n      (is (= tree (-> tree\r\n                      from-tree\r\n                      left\r\n                      right\r\n                      to-tree))))\r\n    (testing \"traversing up from top\"\r\n      (is (= nil \r\n             (-> tree\r\n                 from-tree\r\n                 up))))\r\n    (testing \"left, right, and up\"\r\n      (is (= 3 \r\n             (-> tree\r\n                 from-tree\r\n                 left\r\n                 up\r\n                 right\r\n                 up\r\n                 left\r\n                 right\r\n                 value))))\r\n    (testing \"test ability to descend multiple levels and return\"\r\n      (is (= 1 \r\n             (-> tree\r\n                 from-tree\r\n                 left\r\n                 right\r\n                 up\r\n                 up\r\n                 value))))\r\n    (testing \"set_value\"\r\n      (is (= {:value 1\r\n              :left  {:value 5\r\n                      :left  nil\r\n                      :right {:value 3\r\n                              :left  nil\r\n                              :right nil}}\r\n              :right {:value 4\r\n                      :left  nil\r\n                      :right nil}} \r\n             (-> tree\r\n                 from-tree\r\n                 left\r\n                 (set-value 5)\r\n                 to-tree))))\r\n    (testing \"set_value after traversing up\"\r\n      (is (= {:value 1\r\n              :left  {:value 5\r\n                      :left  nil\r\n                      :right {:value 3\r\n                              :left  nil\r\n                              :right nil}}\r\n              :right {:value 4\r\n                      :left  nil\r\n                      :right nil}} \r\n             (-> tree\r\n                 from-tree\r\n                 left\r\n                 right\r\n                 up\r\n                 (set-value 5)\r\n                 to-tree))))\r\n    (testing \"set_left with leaf\"\r\n      (is (= {:value 1\r\n              :left  {:value 2\r\n                      :left  {:value 5\r\n                              :left  nil\r\n                              :right nil}\r\n                      :right {:value 3\r\n                              :left  nil\r\n                              :right nil}}\r\n              :right {:value 4\r\n                      :left  nil\r\n                      :right nil}} \r\n             (-> tree\r\n                 from-tree\r\n                 left\r\n                 (set-left {:value 5\r\n                                   :left  nil\r\n                                   :right nil})\r\n                 to-tree))))\r\n    (testing \"set_right with null\"\r\n      (is (= {:value 1\r\n              :left  {:value 2\r\n                      :left  nil\r\n                      :right nil}\r\n              :right {:value 4\r\n                      :left  nil\r\n                      :right nil}} \r\n             (-> tree\r\n                 from-tree\r\n                 left\r\n                 (set-right nil)\r\n                 to-tree))))\r\n    (testing \"set_right with subtree\"\r\n      (is (= {:value 1\r\n              :left  {:value 2\r\n                      :left  nil\r\n                      :right {:value 3\r\n                              :left  nil\r\n                              :right nil}}\r\n              :right {:value 6\r\n                      :left  {:value 7\r\n                              :left  nil\r\n                              :right nil}\r\n                      :right {:value 8\r\n                              :left  nil\r\n                              :right nil}}} \r\n             (-> tree\r\n                 from-tree\r\n                 (set-right {:value 6\r\n                                    :left  {:value 7\r\n                                            :left  nil\r\n                                            :right nil}\r\n                                    :right {:value 8\r\n                                            :left  nil\r\n                                            :right nil}})\r\n                 to-tree))))\r\n    (testing \"set_value on deep focus\"\r\n      (is (= {:value 1\r\n              :left  {:value 2\r\n                      :left  nil\r\n                      :right {:value 5\r\n                              :left  nil\r\n                              :right nil}}\r\n              :right {:value 4\r\n                      :left  nil\r\n                      :right nil}} \r\n             (-> tree\r\n                 from-tree\r\n                 left\r\n                 right\r\n                 (set-value 5)\r\n                 to-tree))))))\r\n\r\n(deftest sameResultFromOperations-test\r\n  (testing \"different paths to same zipper\"\r\n     (is (= (-> {:value 1\r\n                 :left  {:value 2\r\n                         :left  nil\r\n                         :right {:value 3\r\n                                 :left  nil\r\n                                 :right nil}}\r\n                 :right {:value 4\r\n                         :left  nil\r\n                         :right nil}}\r\n                from-tree\r\n                right)\r\n         (-> {:value 1\r\n              :left  {:value 2\r\n                      :left  nil\r\n                      :right {:value 3\r\n                              :left  nil\r\n                              :right nil}}\r\n              :right {:value 4\r\n                      :left  nil\r\n                      :right nil}}\r\n             from-tree\r\n             left\r\n             up\r\n             right)))))\r\n",
    "sublist_test" : "(ns sublist-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            sublist))\r\n\r\n(deftest empty-lists-test\r\n    (is (= :equal (classify [] []))))\r\n\r\n(deftest empty-list-within-non-empty-list-test\r\n    (is (= :sublist (classify [] [1 2 3]))))\r\n\r\n(deftest non-empty-list-contains-empty-list-test\r\n    (is (= :superlist (classify [1 2 3] []))))\r\n\r\n(deftest list-equals-itself-test\r\n    (is (= :equal (classify [1 2 3] [1 2 3]))))\r\n\r\n(deftest different-lists\r\n    (is (= :unequal (classify [1 2 3] [2 3 4]))))\r\n\r\n(deftest false-start\r\n    (is (= :sublist (classify [1 2 5] [0 1 2 3 1 2 5 6]))))\r\n\r\n(deftest consecutive\r\n    (is (= :sublist (classify [1 1 2] [0 1 1 1 2 1 2]))))\r\n\r\n(deftest sublist-at-start\r\n    (is (= :sublist (classify [0 1 2] [0 1 2 3 4 5]))))\r\n\r\n(deftest sublist-in-middle\r\n    (is (= :sublist (classify [2 3 4] [0 1 2 3 4 5]))))\r\n\r\n(deftest sublist-at-end\r\n    (is (= :sublist (classify [3 4 5] [0 1 2 3 4 5]))))\r\n\r\n(deftest at-start-of-superlist\r\n    (is (= :superlist (classify [0 1 2 3 4 5] [0 1 2]))))\r\n\r\n(deftest in-middle-of-superlist\r\n    (is (= :superlist (classify [0 1 2 3 4 5] [2 3]))))\r\n\r\n(deftest at-end-of-superlist\r\n    (is (= :superlist (classify [0 1 2 3 4 5] [3 4 5]))))\r\n\r\n(deftest first-list-missing-element-from-second-list\r\n    (is (= :unequal (classify [1 3] [1 2 3]))))\r\n\r\n(deftest second-list-missing-element-from-first-list\r\n    (is (= :unequal (classify [1 2 3] [1 3]))))\r\n\r\n(deftest order-matters-to-a-list\r\n    (is (= :unequal (classify [1 2 3] [3 2 1]))))\r\n\r\n(deftest same-digits-but-different-numbers\r\n    (is (= :unequal (classify [1 0 1] [10 1]))))\r\n\r\n(deftest second-list-continues-first-list\r\n  (is (= :unequal (classify [1] [2 3]))))\r\n",
    "cars_assemble_test" : "(ns cars-assemble-test\r\n  (:require cars-assemble\r\n            [clojure.test :refer [deftest is testing]]))\r\n\r\n(deftest ^{:task 1} production-rate-speed-0-test\r\n  (testing \"Production rate for speed 0\"\r\n    (is (= 0.0 (cars-assemble/production-rate 0)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-1-test\r\n  (testing \"Production rate for speed 1\"\r\n    (is (= 221.0 (cars-assemble/production-rate 1)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-4-test\r\n  (testing \"Production rate for speed 4\"\r\n    (is (= 884.0 (cars-assemble/production-rate 4)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-7-test\r\n  (testing \"Production rate for speed 7\"\r\n    (is (= 1392.3 (cars-assemble/production-rate 7)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-9-test\r\n  (testing \"Production rate for speed 9\"\r\n    (is (= 1591.2 (cars-assemble/production-rate 9)))))\r\n\r\n(deftest ^{:task 1} production-rate-speed-10-test\r\n  (testing \"Production rate for speed 10\"\r\n    (is (= 1701.7 (cars-assemble/production-rate 10)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-0-test\r\n  (testing \"Working items for speed 0\"\r\n    (is (= 0 (cars-assemble/working-items 0)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-1-test\r\n  (testing \"Working items for speed 1\"\r\n    (is (= 3 (cars-assemble/working-items 1)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-5-test\r\n  (testing \"Working items for speed 5\"\r\n    (is (= 16 (cars-assemble/working-items 5)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-8-test\r\n  (testing \"Working items for speed 8\"\r\n    (is (= 26 (cars-assemble/working-items 8)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-9-test\r\n  (testing \"Working items for speed 9\"\r\n    (is (= 26 (cars-assemble/working-items 9)))))\r\n\r\n(deftest ^{:task 2} working-items-speed-10-test\r\n  (testing \"Working items for speed 10\"\r\n    (is (= 28 (cars-assemble/working-items 10)))))\r\n",
    "go_counting_test" : "(ns go-counting-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [go-counting :as g]))\r\n\r\n(def example\r\n  [\"  B  \"\r\n   \" B B \"\r\n   \"B W B\"\r\n   \" W W \"\r\n   \"  W  \"])\r\n\r\n(deftest territory\r\n  (is (= (territory example [0 1])\r\n         {:stones #{[0 0] [0 1] [1 0]} :owner :black}))\r\n  (is (= (territory example [2 3])\r\n         {:stones #{[2 3]} :owner :white}))\r\n  (is (= (territory example [1 4])\r\n         {:stones #{[0 3] [0 4] [1 4]} :owner nil}))\r\n  (is (= (territory example [1 1])\r\n         {:stones #{} :owner nil}))\r\n  #_(is (thrown? (territory example [-1 1])))\r\n  #_(is (thrown? (territory example [5 1])))\r\n  #_(is (thrown? (territory example [1 -1])))\r\n  #_(is (thrown? (territory example [1 5]))))\r\n\r\n(deftest territories\r\n  (is (= (territories [\" \"])\r\n         {:black-territory #{}\r\n          :white-territory #{}\r\n          :null-territory  #{[0 0]}}))\r\n  (is (= (territories [\" BW \" \" BW \"])\r\n         {:black-territory #{[0 0] [0 1]}\r\n          :white-territory #{[3 0] [3 1]}\r\n          :null-territory  #{}}))\r\n  (is (= (territories [\" B \"])\r\n         {:black-territory #{[0 0] [2 0]}\r\n          :white-territory #{}\r\n          :null-territory  #{}})))\r\n",
    "proverb_test" : "(ns proverb-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [proverb :refer [recite]]\r\n            [clojure.string :as str]))\r\n\r\n(deftest zero-pieces\r\n  (is (=\r\n        (recite ())\r\n        \"\")))\r\n      \r\n(deftest one-piece\r\n  (is (=\r\n        (recite '(\"nail\"))\r\n        \"And all for the want of a nail.\")))\r\n\r\n(deftest two-pieces\r\n  (is (=\r\n        (recite '(\"nail\" \"shoe\"))\r\n        (str/join \"\\n\" [\"For want of a nail the shoe was lost.\"\r\n                        \"And all for the want of a nail.\"]))))\r\n\r\n(deftest three-pieces\r\n  (is (=\r\n        (recite '(\"nail\" \"shoe\" \"horse\"))\r\n        (str/join \"\\n\" [\"For want of a nail the shoe was lost.\"\r\n                        \"For want of a shoe the horse was lost.\"\r\n                        \"And all for the want of a nail.\"]))))\r\n\r\n(deftest full-proverb\r\n  (is (= (recite '(\"nail\" \"shoe\" \"horse\" \"rider\" \"message\" \"battle\" \"kingdom\"))\r\n         (str/join \"\\n\" [\"For want of a nail the shoe was lost.\"\r\n                         \"For want of a shoe the horse was lost.\"\r\n                         \"For want of a horse the rider was lost.\"\r\n                         \"For want of a rider the message was lost.\"\r\n                         \"For want of a message the battle was lost.\"\r\n                         \"For want of a battle the kingdom was lost.\"\r\n                         \"And all for the want of a nail.\"]))))\r\n\r\n(deftest four-pieces-modernized\r\n  (is (=\r\n        (recite '(\"pin\" \"gun\" \"soldier\" \"battle\"))\r\n        (str/join \"\\n\" [\"For want of a pin the gun was lost.\"\r\n                        \"For want of a gun the soldier was lost.\"\r\n                        \"For want of a soldier the battle was lost.\"\r\n                        \"And all for the want of a pin.\"]))))\r\n",
    "lucians_luscious_lasagna_test" : "(ns lucians-luscious-lasagna-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            lucians-luscious-lasagna))\r\n\r\n(deftest ^{:task 1} expected-time-test\r\n  (is (= 40 lucians-luscious-lasagna/expected-time)))\r\n\r\n(deftest ^{:task 2} remaining-time-test\r\n  (is (= 15 (lucians-luscious-lasagna/remaining-time 25))))\r\n\r\n(deftest ^{:task 3} prep-time-one-layer-test\r\n  (is (= 2 (lucians-luscious-lasagna/prep-time 1))))\r\n\r\n(deftest ^{:task 3} prep-time-multiple-layers-test\r\n  (is (= 8 (lucians-luscious-lasagna/prep-time 4))))\r\n\r\n(deftest ^{:task 4} total-time-one-layer-test\r\n  (is (= 32 (lucians-luscious-lasagna/total-time 1 30))))\r\n\r\n(deftest ^{:task 4} total-time-multiple-layers-test\r\n  (is (= 16 (lucians-luscious-lasagna/total-time 4 8))))",
    "pov_test" : "(ns pov-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            pov))\r\n\r\n;;; Inputs.\r\n\r\n(def singleton [:x])\r\n\r\n(def simple-tree [:parent [:sibling] [:x]])\r\n\r\n(def large-flat\r\n  [:parent [:sib-a]\r\n   [:sib-b]\r\n   [:x]\r\n   [:sib-c]\r\n   [:sib-d]])\r\n\r\n(def deeply-nested\r\n  [:level-0\r\n   [:level-1\r\n    [:level-2\r\n     [:level-3\r\n      [:level-4\r\n       [:x]]]]]])\r\n\r\n(def cousins\r\n  [:grand-parent\r\n   [:parent\r\n    [:sib-1]\r\n    [:x]\r\n    [:sib-2]]\r\n   [:uncle\r\n    [:cousin-1]\r\n    [:cousin-2]]])\r\n\r\n(def target-with-children\r\n  [:grand-parent\r\n   [:parent\r\n    [:x\r\n     [:child-1]\r\n     [:child-2]]\r\n    [:sibling\r\n     [:nephew]\r\n     [:niece]]]\r\n   [:aunt\r\n    [:cousin-1\r\n     [:2nd-cousin-1]\r\n     [:2nd-cousin-2]]\r\n    [:cousin-2\r\n     [:2nd-cousin-3]\r\n     [:2nd-cousin-4]]]])\r\n\r\n;;; Expected results.\r\n\r\n(def simple-pulled [:x [:parent [:sibling]]])\r\n\r\n(def flat-pulled\r\n  [:x [:parent\r\n       [:sib-a]\r\n       [:sib-b]\r\n       [:sib-c]\r\n       [:sib-d]]])\r\n\r\n(def nested-pulled\r\n  [:x\r\n   [:level-4\r\n    [:level-3\r\n     [:level-2\r\n      [:level-1\r\n       [:level-0]]]]]])\r\n\r\n(def cousins-pulled\r\n  [:x\r\n   [:parent\r\n    [:sib-1]\r\n    [:sib-2]\r\n    [:grand-parent\r\n     [:uncle\r\n      [:cousin-1]\r\n      [:cousin-2]]]]])\r\n\r\n(def with-kids-pulled\r\n  [:x\r\n   [:child-1]\r\n   [:child-2]\r\n   [:parent\r\n    [:sibling\r\n     [:nephew]\r\n     [:niece]]\r\n    [:grand-parent\r\n     [:aunt\r\n      [:cousin-1\r\n       [:2nd-cousin-1]\r\n       [:2nd-cousin-2]]\r\n      [:cousin-2\r\n       [:2nd-cousin-3]\r\n       [:2nd-cousin-4]]]]]])\r\n\r\n(deftest singletons\r\n  (is (= singleton\r\n         (of :x singleton))))\r\n\r\n(deftest simple-trees\r\n  (is (= simple-pulled\r\n         (of :x simple-tree))))\r\n\r\n(deftest nested-trees\r\n  (is (= nested-pulled\r\n         (of :x deeply-nested))))\r\n\r\n(deftest extract-node-from-siblings\r\n  (is (= flat-pulled\r\n         (of :x large-flat))))\r\n\r\n(deftest moderate-trees\r\n  (is (= cousins-pulled\r\n         (of :x cousins))))\r\n\r\n(deftest complex-trees\r\n  (is (= with-kids-pulled\r\n         (of :x target-with-children))))\r\n\r\n(deftest not-found-cannot-reparent\r\n  (is (nil? (of :not-found! target-with-children))))\r\n\r\n(deftest not-found-input-empty\r\n  (is (nil? (of :x []))))\r\n\r\n(deftest not-found-input-nil\r\n  (is (nil? (of :x nil))))\r\n\r\n(deftest path-from-target-to-parent\r\n  (is (= [:x :parent]\r\n         (path-from-to :x :parent simple-tree))))\r\n\r\n(deftest path-from-target-to-sibling\r\n  (is (= [:x :parent :sib-c]\r\n         (path-from-to :x :sib-c large-flat))))\r\n\r\n(deftest path-from-x-to-2nd-cousin-1\r\n  (is (= [:x :parent :grand-parent :aunt :cousin-1 :2nd-cousin-1]\r\n         (path-from-to :x :2nd-cousin-1 target-with-children))))\r\n\r\n(deftest no-path\r\n  (is (nil? (path-from-to :x :not-there! cousins))))\r\n",
    "bank_account_test" : "(deftest initial-account-state\r\n  (testing \"Accounts are opened with a balance of 0\"\r\n    (is (= 0 (-> (open-account)\r\n                 (get-balance))))))\r\n\r\n(deftest increment-and-get-balance\r\n  (testing \"Adding money to the account works\"\r\n    (let [account (open-account)]\r\n      (is (= 0 (get-balance account)))\r\n      (update-balance account 10)\r\n      (is (= 10 (get-balance account))))))\r\n\r\n(deftest increment-decrement-and-get-balance\r\n  (testing \"Taking money out of the account works\"\r\n    (let [account (open-account)]\r\n      (is (= 0 (get-balance account)))\r\n      (update-balance account 10)\r\n      (is (= 10 (get-balance account)))\r\n      (update-balance account -10)\r\n      (is (= 0 (get-balance account))))))\r\n\r\n(deftest closed-accounts-are-nil\r\n  (testing \"Closing an account makes it nil\"\r\n    (let [account (open-account)]\r\n      (close-account account)\r\n      (is (nil? (get-balance account))))))\r\n",
    "grains_test" : "(ns grains-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            grains))\r\n\r\n(deftest square-1\r\n  (is (= 1 (square 1))))\r\n\r\n(deftest square-2\r\n  (is (= 2 (square 2))))\r\n\r\n(deftest square-3\r\n  (is (= 4 (square 3))))\r\n\r\n(deftest square-4\r\n  (is (= 8 (square 4))))\r\n\r\n(deftest square-16\r\n  (is (= 32768 (square 16))))\r\n\r\n(deftest square-32\r\n  (is (= 2147483648 (square 32))))\r\n\r\n(deftest square-64\r\n  (is (= 9223372036854775808 (square 64))))\r\n\r\n",
    "armstrong_numbers_test" : "(ns armstrong-numbers-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [armstrong-numbers :refer [armstrong?]]))\r\n\r\n(deftest armstrong-number-0\r\n  (testing \"Zero is an Armstrong number\"\r\n    (is (armstrong? 0))))\r\n\r\n(deftest armstrong-number-5\r\n  (testing \"Single digit numbers are Armstrong numbers\"\r\n    (is (armstrong? 5))))\r\n\r\n(deftest not-armstrong-number-10\r\n  (testing \"There are no 2 digit Armstrong numbers\"\r\n    (is (not (armstrong? 10)))))\r\n\r\n(deftest armstrong-number-153\r\n  (testing \"Three digit number that is an Armstrong number\"\r\n    (is (armstrong? 153))))\r\n\r\n(deftest not-armstrong-number-100\r\n  (testing \"Three digit number that is not an Armstrong number\"\r\n    (is (not (armstrong? 100)))))\r\n\r\n(deftest armstrong-number-9474\r\n  (testing \"Four digit number that is an Armstrong number\"\r\n    (is (armstrong? 9474))))\r\n\r\n(deftest not-armstrong-number-9475\r\n  (testing \"Four digit number that is not an Armstrong number\"\r\n    (is (not (armstrong? 9475)))))\r\n\r\n(deftest armstrong-number-9926315\r\n  (testing \"Seven digit number that is an Armstrong number\"\r\n    (is (armstrong? 9926315))))\r\n\r\n(deftest not-armstrong-number-9926314\r\n  (testing \"Seven digit number that is not an Armstrong number\"\r\n    (is (not (armstrong? 9926314)))))\r\n\r\n",
    "sieve_test" : "(ns sieve-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [sieve :refer [sieve]]))\r\n\r\n(deftest a-few-primes\r\n  (is (= [2 3 5 7] (sieve 10))))\r\n\r\n(deftest test-prime-limit\r\n  (is (= [2 3 5 7] (sieve 7))))\r\n\r\n(deftest more-primes\r\n  (is (= [2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89\r\n          97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179\r\n          181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271\r\n          277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379\r\n          383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479\r\n          487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599\r\n          601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701\r\n          709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823\r\n          827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941\r\n          947 953 967 971 977 983 991 997]\r\n         (sieve 1000))))\r\n",
    "dominoes_test" : "(ns dominoes-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            [dominoes     :refer [can-chain?]]))\r\n\r\n(deftest empty-input-empty-output\r\n  (is (can-chain? [])))\r\n\r\n(deftest singleton-input-singleton-output\r\n  (is (can-chain? [[1 1]])))\r\n\r\n(deftest singleton-that-cant-be-chained\r\n  (is ((comp not can-chain?) [[1 2]])))\r\n\r\n(deftest three-elements\r\n  (is (can-chain?  [[1 2] [3 1] [2 3]])))\r\n\r\n(deftest can-reverse-dominoes\r\n  (is (can-chain? [[1 2] [1 3] [2 3]])))\r\n\r\n(deftest cant-be-chained\r\n  (is ((comp not can-chain?) [[1 2] [4 1] [2 3]])))\r\n\r\n(deftest disconnected-simple\r\n  (is ((comp not can-chain?) [[1 1] [2 2]])))\r\n\r\n(deftest disconnected-double-loop\r\n  (is ((comp not can-chain?) [[1 2] [2 1] [3 4] [4 3]])))\r\n\r\n(deftest disconnected-single-isolated\r\n  (is ((comp not can-chain?) [[1 2] [2 3] [3 1] [4 4]])))\r\n\r\n(deftest need-backtrack\r\n  (is (can-chain? [[1 2] [2 3] [3 1] [2 4] [2 4]])))\r\n\r\n(deftest separate-loops\r\n  (is (can-chain? [[1 2] [2 3] [3 1] [1 1] [2 2] [3 3]])))\r\n\r\n(deftest nine-elements\r\n  (is (can-chain? [[1 2] [5 3] [3 1] [1 2] [2 4] [1 6] [2 3] [3 4] [5 6]])))\r\n",
    "annalyns_infiltration_test" : "(ns annalyns-infiltration-test\r\n  (:require annalyns-infiltration\r\n            [clojure.test :refer [deftest is testing]]))\r\n\r\n(deftest ^{:task 1} fast-attack-awake-test\r\n  (testing \"Fast attack if knight is awake\"\r\n    (is (= false (annalyns-infiltration/can-fast-attack? true)))))\r\n\r\n(deftest ^{:task 1} fast-attack-asleep-test\r\n  (testing \"Fast attack if knight is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-fast-attack? false)))))\r\n\r\n(deftest ^{:task 2} spy-everyone-sleeping-test\r\n  (testing \"Cannot spy if everyone is sleeping\"\r\n    (is (= false (annalyns-infiltration/can-spy? false false false)))))\r\n\r\n(deftest ^{:task 2} spy-but-knight-sleeping-test\r\n  (testing \"Can spy if everyone but knight is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? true false false)))))\r\n\r\n(deftest ^{:task 2} spy-but-archer-sleeping-test\r\n  (testing \"Can spy if everyone but archer is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? false true false)))))\r\n\r\n(deftest ^{:task 2} spy-but-prisoner-sleeping-test\r\n  (testing \"Can spy if everyone but prisoner is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? false false true)))))\r\n\r\n(deftest ^{:task 2} spy-only-knight-sleeping-test\r\n  (testing \"Can spy if only knight is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? false true true)))))\r\n\r\n(deftest ^{:task 2} spy-only-archer-sleeping-test\r\n  (testing \"Can spy if only archer is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? true false true)))))\r\n\r\n(deftest ^{:task 2} spy-only-prisoner-sleeping-test\r\n  (testing \"Can spy if only prisoner is sleeping\"\r\n    (is (= true (annalyns-infiltration/can-spy? true true false)))))\r\n\r\n(deftest ^{:task 2} spy-everyone-awake-test\r\n  (testing \"Can spy if everyone is awake\"\r\n    (is (= true (annalyns-infiltration/can-spy? true true true)))))\r\n\r\n(deftest ^{:task 3} signal-prisoner-archer-sleeping-prisoner-awake-test\r\n  (testing \"Can signal prisoner if archer is sleeping and prisoner is awake\"\r\n    (is (= true (annalyns-infiltration/can-signal-prisoner? false true)))))\r\n\r\n(deftest ^{:task 3} signal-prisoner-archer-awake-prisoner-sleeping-test\r\n  (testing \"Cannot signal prisoner if archer is awake and prisoner is sleeping\"\r\n    (is (= false (annalyns-infiltration/can-signal-prisoner? true false)))))\r\n\r\n(deftest ^{:task 3} signal-prisoner-both-sleeping-test\r\n  (testing \"Cannot signal prisoner if archer and prisoner are both sleeping\"\r\n    (is (= false (annalyns-infiltration/can-signal-prisoner? false false)))))\r\n\r\n(deftest ^{:task 3} signal-prisoner-both-awake-test\r\n  (testing \"Cannot signal prisoner if archer and prisoner are both awake\"\r\n    (is (= false (annalyns-infiltration/can-signal-prisoner? true true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-everyone-awake-dog-present-test\r\n  (testing \"Cannot release prisoner if everyone is awake and pet dog is present\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true true true true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-everyone-awake-dog-absent-test\r\n  (testing \"Cannot release prisoner if everyone is awake and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true true true false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-everyone-asleep-dog-absent-test\r\n  (testing \"Cannot release prisoner if everyone is asleep and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false false false false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-archer-awake-dog-present-test\r\n  (testing \"Cannot release prisoner if only archer is awake and pet dog is present\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false true false true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-archer-awake-dog-absent-test\r\n  (testing \"Cannot release prisoner if only archer is awake and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false true false false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-knight-awake-dog-absent-test\r\n  (testing \"Cannot release prisoner if only knight is awake and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true false false false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-knight-awake-dog-present-test\r\n  (testing \"Cannot release prisoner if only knight is asleep and pet dog is present\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false true true true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-knight-asleep-dog-absent-test\r\n  (testing \"Cannot release prisoner if only knight is asleep and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? false true true false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-archer-asleep-dog-absent-test\r\n  (testing \"Cannot release prisoner if only archer is asleep and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true false true false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-prisoner-asleep-dog-present-test\r\n  (testing \"Cannot release prisoner if only prisoner is asleep and pet dog is present\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true true false true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-prisoner-asleep-dog-absent-test\r\n  (testing \"Cannot release prisoner if only prisoner is asleep and pet dog is absent\"\r\n    (is (= false (annalyns-infiltration/can-free-prisoner? true true false false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-everyone-asleep-dog-present-test\r\n  (testing \"Can release prisoner if everyone is asleep and pet dog is present\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? false false false true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-prisoner-awake-dog-present-test\r\n  (testing \"Can release prisoner if only prisoner is awake and pet dog is present\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? false false true true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-prisoner-awake-dog-absent-test\r\n  (testing \"Can release prisoner if only prisoner is awake and pet dog is absent\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? false false true false)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-knight-awake-dog-present-test\r\n  (testing \"Can release prisoner if only knight is awake and pet dog is present\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? true false false true)))))\r\n\r\n(deftest ^{:task 4} release-prisoner-archer-asleep-dog-present-test\r\n  (testing \"Can release prisoner if only archer is asleep and pet dog is present\"\r\n    (is (= true (annalyns-infiltration/can-free-prisoner? true false true true)))))\r\n",
    "flatten_array_test" : "(ns flatten-array-test\r\n  (:require [clojure.test :refer [deftest is testing]]\r\n            [flatten-array]))\r\n\r\n(deftest flattens-array-of-ints\r\n  (testing \"flattens array with just integers present\"\r\n    (is (= [1 2 3 4 5 6 7 8]\r\n           (flatten [1 [2 3 4 5 6 7] 8])))))\r\n\r\n(deftest five-level-nesting\r\n  (testing \"5 level nested list\"\r\n    (is (= [0 2 2 3 8 100 4 50 -2]\r\n           (flatten [0 2 [[2 3] 8 100 4 [[[50]]]] -2])))))\r\n\r\n(deftest six-level-nesting\r\n  (testing \"6 level nested list\"\r\n    (is (= [1 2 3 4 5 6 7 8]\r\n           (flatten [1 [2 [[3]] [4 [[5]]] 6 7] 8])))))\r\n\r\n(deftest six-level-nested-with-nils\r\n  (testing \"6 level nested list with nil values\"\r\n    (is (= [0 2 2 3 8 100 -2]\r\n           (flatten [0 2 [[2 3] 8 [[100]] nil [[nil]]] -2])))))\r\n\r\n(deftest all-nils-list\r\n  (testing \"All values in nested list are nil\"\r\n    (is (empty?\r\n         (flatten [nil [[[nil]]] nil nil [[nil nil] nil] nil])))))\r\n",
    "queen_attack_test" : "(ns queen-attack-test\r\n  (:require [clojure.test :refer [deftest is]]\r\n            queen-attack))\r\n\r\n(def empty-board\r\n  (str \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"))\r\n\r\n(def board\r\n  (str \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ W _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"\r\n       \"_ _ _ _ _ _ B _\\n\"\r\n       \"_ _ _ _ _ _ _ _\\n\"))\r\n\r\n(deftest handles-empty-board\r\n  (is (= empty-board (board-string {}))))\r\n(deftest build-board\r\n  (is (= board (board-string {:w [2 4] :b [6 6]}))))\r\n\r\n(deftest finds-attack-positions\r\n  (is (= false (can-attack {:w [2 3] :b [4 7]})))\r\n  (is (= true  (can-attack {:w [2 4] :b [2 7]})))\r\n  (is (= true  (can-attack {:w [5 4] :b [2 4]})))\r\n  (is (= true  (can-attack {:w [1 1] :b [6 6]})))\r\n  (is (= true  (can-attack {:w [0 6] :b [1 7]})))\r\n  (is (= true  (can-attack {:w [4 1] :b [6 3]})))\r\n  (is (= true  (can-attack {:w [2 3] :b [5 0]})))\r\n  (is (= true  (can-attack {:w [2 3] :b [0 5]}))))\r\n"
  }